<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ZeroTier 异地组网及私有 Moon 转发节点搭建</title>
    <url>/819.html</url>
    <content><![CDATA[<p>支持 Windows、macOS、Linux、IOS、Android、Synology、QNAP、Western Digital MyCloud NAS等</p>
<h2 id="使用官方根节点"><a href="#使用官方根节点" class="headerlink" title="使用官方根节点"></a>使用官方根节点</h2><p>1、创建账号</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9teS56ZXJvdGllci5jb20v">https://my.zerotier.com</span></p>
<p>2、创建网络</p>
<p>进入 <span class="exturl" data-url="aHR0cHM6Ly9teS56ZXJvdGllci5jb20vbmV0d29yaw==">https://my.zerotier.com/network</span> 点击 Create 创建网络，点击进入已创建的网络 此时可以看到 Network ID，后续添加设备都会需要这个 ID</p>
<p>Access Control，默认是Certificate (Private Network)，选择此模式表示每次在添加新的主机时，需要手动勾选是否允许连接，如果选择None (Public Network)模式，表示加入网络后自动分配IP并允许连接，从安全性来说建议使用默认选项Certificate (Private Network)，方便性来看None (Public Network)更方便，不用每次加入网络后手动勾选。</p>
<p>好了，一个中转的ZeroTier就配置完成了，接下来只需要在其他设备安装所对应的客户端，然后加入到这个网络中就可以了。</p>
<h2 id="搭建私有节点（moon）"><a href="#搭建私有节点（moon）" class="headerlink" title="搭建私有节点（moon）"></a>搭建私有节点（moon）</h2><blockquote>
<p>搭建私有节点是为了解决根节点在国外,速度慢, 且不稳定</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s https://install.zerotier.com/ | sudo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功后</span></span><br><span class="line"><span class="comment"># *** Success! You are ZeroTier address [ b32fxxxxxx ].</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-Moon"><a href="#配置-Moon" class="headerlink" title="配置 Moon"></a>配置 Moon</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/zerotier-one</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 moon.json 配置文件</span></span><br><span class="line">zerotier-idtool initmoon identity.public &gt;&gt; moon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 moon.json 配置文件，修改 stableEndpoints</span></span><br><span class="line">vim moon.json</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;stableEndpoints&quot;</span>: [<span class="string">&quot;你服务器公网ip/9993&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 .moon 文件 私有网络的 zerotier 标志性文件</span></span><br><span class="line">zerotier-idtool genmoon moon.json</span><br><span class="line"><span class="comment"># 此命令会生成一个签名文件在当前目录下，文件名如 000000b32fxxxxxx.moon （b32fxxxxxx 为 ZeroTier address)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line"><span class="comment"># 将生成的 000000b32fxxxxxx.moon 移动到 moons.d 目录</span></span><br><span class="line"><span class="built_in">mkdir</span> moons.d</span><br><span class="line"><span class="built_in">mv</span> 000000b32fxxxxxx.moon moons.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 zerotier-one 服务</span></span><br><span class="line">systemctl restart zerotier-one</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入虚拟网络</span></span><br><span class="line"><span class="comment"># zerotier-cli join af415e486f26xxxx //  af415e486f26xxxx 为在 zerotier 官网创建的网络</span></span><br></pre></td></tr></table></figure>


<p>将内网机器连接上 moon 节点</p>
<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windows 在 C:\ProgramData\ZeroTier\One 目录下执行</span></span><br><span class="line">zerotier-cli orbit 000000b32fxxxxxx 000000b32fxxxxxx <span class="comment"># moon 服务器的ID值 输入2遍</span></span><br></pre></td></tr></table></figure>

<p> 查看是否连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在其他机子执行以下命令是否显示该 moon 节点</span></span><br><span class="line"><span class="comment"># 或在 moon 服务器上执行命令否显示 LEAF 节点</span></span><br><span class="line">zerotier-cli listpeers</span><br><span class="line"></span><br><span class="line">200 listpeers &lt;ztaddr&gt; &lt;path&gt; &lt;latency&gt; &lt;version&gt; &lt;role&gt;</span><br><span class="line">200 listpeers xxxxxxxxxx xx.xx.xx.xx/4532;1037;853 183 1.6.4 LEAF</span><br><span class="line">200 listpeers xxxxxxxxxx xx.xx.xx.xx/9993;19869;4337 0 - PLANET</span><br><span class="line">200 listpeers xxxxxxxxxx xx.xx.xx.xx/9993;4337;4167 170 - PLANET</span><br><span class="line">200 listpeers xxxxxxxxxx xx.xx.xx.xx/9993;363;4274 63 - PLANET</span><br><span class="line">200 listpeers xxxxxxxxxx xx.xx.xx.xx/9993;19508;4192 145 - PLANET</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLw==">https://docs.docker.com/engine/reference/builder/</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plcm90aWVyL1plcm9UaWVyT25lL3RyZWUvbWFzdGVyL2V4dC9pbnN0YWxsZmlsZXMvbGludXgvemVyb3RpZXItY29udGFpbmVyaXplZA==">https://github.com/zerotier/ZeroTierOne/tree/master/ext/installfiles/linux/zerotier-containerized</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build . -t zerotier</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>zerotier</tag>
      </tags>
  </entry>
  <entry>
    <title>google 浏览器插件离线安装方法</title>
    <url>/372.html</url>
    <content><![CDATA[<p>谷歌浏览器扩展程序管理页面 chrome:&#x2F;&#x2F;extensions&#x2F;</p>
<h4 id="方式一-crx"><a href="#方式一-crx" class="headerlink" title="方式一 .crx"></a>方式一 <code>.crx</code></h4><p>打开扩展程序管理页面，将 .crx 格式插件拖入浏览器即可</p>
<p>若安装时出现“程序包无效 CRX-HEADER-INVALID”的报错信息，或出现 <code>该扩展程序未列在 Chrome 网上应用店中，并可能是在您不知情的情况下添加的</code>，且插件无法启用，可使用方式二安装</p>
<h4 id="方式二-zip"><a href="#方式二-zip" class="headerlink" title="方式二 .zip"></a>方式二 <code>.zip</code></h4><p>将 .crx 插件后缀改成 .zip，或下载 .zip 格式插件</p>
<p>扩展程序管理页面，开启开发者模式，再按 F5 刷新一下，将 .zip 格式插件拖入浏览器，或者将 .zip 格式插件解压，点击加载已解压的扩展程序</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>禁用 Chrome 的“请停用以开发者模式运行的扩展程序”提示的<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBd09UazNNamc0TWc9PSZtaWQ9MTAwMDAwMDg1JmlkeD0xJnNuPTE3ZTZmYjVjNGRiMGY0ZGMzZmJlODQwZDcxZmQwNGQ4JmNoa3NtPTFiNTYzY2E4MmMyMWI1YmU4NWUzMzdjOTRhNzQ3NDg1Nzg0N2ZkYzJhZjk2ODQ1MTY1MjA2ZGYxMWFjZDY5YTQ1NGQwOGY4ZWNiZDUjcmQ=">方法</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>git 版本控制系统</title>
    <url>/421.html</url>
    <content><![CDATA[<h2 id="为什么要有版本控制系统"><a href="#为什么要有版本控制系统" class="headerlink" title="为什么要有版本控制系统"></a>为什么要有版本控制系统</h2><p>在开发过程中，经常需要对一个文件进行修改甚至删除，但是我们又希望能够保存这个文件的历史记录，如果通过备份，那么管理起来会非常的复杂</p>
<h2 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h2><blockquote>
<p>版本控制系统（Version Control System）:是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>
</blockquote>
<p>版本控制系统不仅可以应用于软件源代码的文本文件，而且可以对任何类型的文件进行版本控制。</p>
<h2 id="版本控制系统的分类"><a href="#版本控制系统的分类" class="headerlink" title="版本控制系统的分类"></a>版本控制系统的分类</h2><p>参考文章：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YxLyVFOCVCNSVCNyVFNiVBRCVBNS0lRTUlODUlQjMlRTQlQkElOEUlRTclODklODglRTYlOUMlQUMlRTYlOEUlQTclRTUlODglQjY=">关于版本控制的介绍</span></p>
<h3 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h3><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202248.png"></p>
<p>本地版本控制系统就是在一台机器上，记录版本的不同变化，保证内容不会丢失</p>
<ol>
<li>如果多人开发，每个人都在不同的系统和电脑上开发，没办法协同工作。</li>
</ol>
<h3 id="集中式版本控制系統"><a href="#集中式版本控制系統" class="headerlink" title="集中式版本控制系統"></a>集中式版本控制系統</h3><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202303.png"></p>
<p><code>svn</code> 是集中式的版本控制系统，集中式版本控制系统都有一个单一的集中管理的服务器（中央服务器），保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p>
<ol>
<li>需要一个中央服务器来管理代码的的版本和备份</li>
<li>所有的用户电脑都是从中央服务器获取代码或者是将本地的代码提交到中央服务器</li>
<li>依赖与网络环境，如果连不上中央服务器，就无法提交和获取代码。</li>
</ol>
<h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202325.png"></p>
<p><code>git</code> 是分布式的版本控制系统。分布式版本控制系统的客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份</p>
<ol>
<li>需要一台服务器作为代码仓库</li>
<li>每个用户电脑都是一个服务器（代码仓库），并且和代码仓库是镜像的，用户修改和获取代码都是提交到自己的服务器当中。</li>
<li>不需要网络就可以进行工作。</li>
<li>当连接网络时，用户可以选择将自己的服务器与代码仓库进行同步。</li>
</ol>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy">git 官方中文文档</span></p>
<h2 id="Git-核心概念"><a href="#Git-核心概念" class="headerlink" title="Git 核心概念"></a>Git 核心概念</h2><ul>
<li><p>**<code>WorkSpace</code>**：<br>工作区，即从仓库中 checkout 出来的，需要通过 Git 进行版本控制的目录和文件，可以简单的理解为在电脑里真实看到的文件</p>
</li>
<li><p>**<code>Stage(Index)</code>**：<br>暂存区，或者叫做待提交更新区；在提交进入 Repository 之前，可以把所有的更新放在暂存区, 用 <code>git add</code> 的文件都在这里</p>
</li>
<li><p>**<code>Repository(Remote/Local)</code>**：<br>仓库，一个存放在远端&#x2F;本地的版本库，用 <code>git commit</code> 提交的文件就到 Local Repository,用 <code>git push</code> 提交的文件就到 Remote Repository</p>
</li>
<li><p>**<code>.git</code>**：存放 Git 管理信息的目录，初始化仓库的时候会自动创建</p>
</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202341.jpeg"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202402.png"></p>
<h2 id="Git-初始设置"><a href="#Git-初始设置" class="headerlink" title="Git 初始设置"></a>Git 初始设置</h2><h3 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户名使用英文</span></span><br><span class="line"><span class="comment"># --global 全局设置</span></span><br><span class="line">git config --global user.name <span class="string">&#x27;your_name&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;your_email@example.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看账号信息</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置信息</span></span><br><span class="line">git config --<span class="built_in">unset</span> -- user.name</span><br></pre></td></tr></table></figure>

<p>全局设置会在 <code>~/.gitconfig</code> 中以如下形式输出设置文件，可以直接编辑这个文件来修改设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = your_name</span><br><span class="line">email = your_email@example.com</span><br></pre></td></tr></table></figure>

<p>每个仓库的 Git 配置文件都放在 <code>.git/config</code> 文件中，可以直接修改此文件<br><code>$ cat .git/config</code> 查看配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解决中文变成数字加百分号，也可以在设置中将编码修改为 utf-8</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="设置-SSH-Key"><a href="#设置-SSH-Key" class="headerlink" title="设置 SSH Key"></a>设置 SSH Key</h3><p>GitHub 上连接已有仓库时的认证，是通过使用了 SSH 的公开密钥认证方式进行的。现在我们来创建公开密钥认证所需的 SSH Key，并将其添加至 GitHub</p>
<p>运行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key(/Users/your_user_directory/.ssh/id_rsa):按回车键</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):输入密码</span><br><span class="line">Enter same passphrase again:再次输入密码</span><br></pre></td></tr></table></figure>

<p>输入密码后会出现以下结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/your_user_directory/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/your_user_directory/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:SHA256:hbn1zPihlVDe/Y2FvzzZU8l+AOSlVRlaOmro/nTQDGg cui3155@gmail.com(fingerprint值+your_email@example.com)</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|            o o++|</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">|        . . .   +|</span></span><br><span class="line"><span class="string">|         ...     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p><code>id_rsa</code> 文件是私有密钥，<code>id_rsa.pub</code> 是公开密钥</p>
<h3 id="添加公开密钥"><a href="#添加公开密钥" class="headerlink" title="添加公开密钥"></a>添加公开密钥</h3><p>在 GitHub 中添加公开密钥，今后就可以用私有密钥进行认证了<br>点击右上角的账户设定按钮（Account Settings），选择 SSH Keys 菜单。点击 AddSSH Key 之后，在 Title 中输入适当的密钥名称。Key 部分请粘贴 id_rsa.pub 文件里的内容</p>
<p><code>id_rsa.pub</code> 的内容可以用如下方法查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa公开密钥的内容your_email@example.com</span><br></pre></td></tr></table></figure>

<p>完成以上设置后，就可以用手中的私人密钥与 GitHub 进行认证和通信了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">The authenticity of host <span class="string">&#x27;github.com (192.30.255.113)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is (fingerprint值).</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?输入yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>github.com,192.30.255.113<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Enter passphrase for key &#x27;</span>/c/Users/C.DESKTOP-3S4APJ4/.ssh/id_rsa<span class="string">&#x27;:</span></span><br></pre></td></tr></table></figure>

<p>出现如下结果即为成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi cuilongjin! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<h3 id="提高命令输出的可读性"><a href="#提高命令输出的可读性" class="headerlink" title="提高命令输出的可读性"></a>提高命令输出的可读性</h3><p>将 <code>color.ui</code> 设置为 <code>auto</code> 可以让命令的输出拥有更高的可读性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global color.ui <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><code>~/.gitconfig</code> 中会增加下面一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[color]</span><br><span class="line">ui = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这样一来，各种命令的输出就会变得更容易分辨。</p>
<h3 id="文件名大小写问题"><a href="#文件名大小写问题" class="headerlink" title="文件名大小写问题"></a>文件名大小写问题</h3><p>git 默认对文件名大小写不敏感</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 git 大小写敏感</span></span><br><span class="line">git config core.ignorecase <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者先删除文件在添加进去</span></span><br></pre></td></tr></table></figure>

<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>通过 Gravatar 服务</p>
<h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 st 别名表示 status</span></span><br><span class="line">git config --global alias.st status</span><br><span class="line"></span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.unstage <span class="string">&#x27;reset HEAD&#x27;</span></span><br><span class="line">git config --global alias.last <span class="string">&#x27;log -1&#x27;</span></span><br><span class="line"></span><br><span class="line">git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="搭建-Git-服务器"><a href="#搭建-Git-服务器" class="headerlink" title="搭建 Git 服务器"></a>搭建 Git 服务器</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDAvMDAxMzc1ODM3NzAzNjA1NzliYzRiNDU4ZjA0NGNlN2FmZWQzZGY1NzkxMjNlY2EwMDA=">搭建 Git 服务器</span></p>
<h3 id="配置多用户"><a href="#配置多用户" class="headerlink" title="配置多用户"></a>配置多用户</h3><p>根据不同邮箱生成对应的私钥公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C email</span><br></pre></td></tr></table></figure>

<p>将公钥上传到对应的用户账号中</p>
<p>在 <code>.ssh</code> 目录创建 <code>config</code> 文件，配置私钥对应的服务器，每个账号单独配置一个 Host，每个 Host 要取一个别名，每个 Host 主要配置 HostName 和 IdentityFile 两个属性即可</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># 配置用户1</span><br><span class="line">Host github</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">User cuilongjin</span><br><span class="line"></span><br><span class="line"># 配置用户2</span><br><span class="line">Host gitlab</span><br><span class="line">HostName git.gitlab.net</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line">User cuilongjin</span><br></pre></td></tr></table></figure>

<p>Host 的名字可以任意，不过这个会影响 git 相关命令，例如：</p>
<p>Host mygithub 这样定义的话，命令如下</p>
<p><code>git clone git@mygithub:cuilongjin/cuilongjin.git</code></p>
<p>即 git@ 后面紧跟的名字改为 mygithub</p>
<p>执行 <code>ssh -T git@github</code>、<code>ssh -T git@gitlab</code> 测试是否成功</p>
<p>配置局部 git 用户名和邮箱，如果没有局部配置，默认用全局配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;Your name&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;your_email@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>或者直接找到 <code>.git/config</code> 文件，添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = Your name</span><br><span class="line">email = your_email@gmail.com</span><br></pre></td></tr></table></figure>

<h2 id="Git-基本操作"><a href="#Git-基本操作" class="headerlink" title="Git 基本操作"></a>Git 基本操作</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> project</span><br><span class="line"><span class="built_in">cd</span> project</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>如果初始化成功，执行了 <code>git init</code> 命令的目录下就会生成 <code>.git</code> 目录。这个 <code>.git</code> 目录里存储着管理当前目录内容所需的仓库数据</p>
<blockquote>
<p><code>mkdir project</code> 命令创建 project 空文件夹</p>
</blockquote>
<ul>
<li><code>pwd</code> 命令用于显示当前目录</li>
</ul>
<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将指定文件夹添加到暂存区（目录中的所有文件，包括新增/修改/删除的文件）--not-all 忽略删除的</span></span><br><span class="line">git add 目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 指定文件 添加到暂存区 （文件可以是新增/修改/删除的）</span></span><br><span class="line">git add README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下所有的js文件添加到暂存区（文件可以是新增/修改的，不包括删除的）</span></span><br><span class="line">git add *.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录及子目录下件 （文件可以是新增/修改/删除的）</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前仓库下所有的文件 （文件可以是新增/修改/删除的）</span></span><br><span class="line">git add -A</span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件从暂存区提交到仓库</span></span><br><span class="line">git commit -m <span class="string">&#x27;提交说明&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是一个已经暂存过的文件，可以快速提交，如果是未追踪的文件，那么命令将不生效。</span></span><br><span class="line">git commit -a -m <span class="string">&#x27;提交说明&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改最近的一次提交说明， 如果提交说明不小心输错了，可以使用这个命令</span></span><br><span class="line">git commit --amend -m <span class="string">&#x27;提交说明&#x27;</span></span><br></pre></td></tr></table></figure>

<p>-m 参数后的 <code>&#39;First commit&#39;</code> 称作提交信息，是对这个提交的概述,如果想要记述得更加详细，请不加 <code>-m</code> ，直接执行 <code>git commit</code> 命令，执行后编辑器就会启动。<br>在编辑器中记述提交信息的格式如下:<br>​ 第一行：用一行文字简述提交的更改内容<br>​ 第二行：空行<br>​ 第三行以后：记述更改的原因和详细内容</p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立 README.md 文件作为管理对象</span></span><br><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化日志输出格式</span></span><br><span class="line">git stauts -s (short)</span><br></pre></td></tr></table></figure>

<p><code>git status</code> 命令可以让我们时刻掌握仓库当前的状态，但不能看到具体修改了什么内容，需要用 <code>git diff</code> 这个命令来查看具体修改内容。</p>
<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前工作树和最新add之间（暂存区）的差别（difference）</span></span><br><span class="line">git diff</span><br><span class="line"><span class="comment"># 如果尚未用 `git add` 命令向暂存区添加任何东西，则程序只会显示工作树与最新提交状态之间的差别</span></span><br><span class="line"><span class="comment"># “+”号标出的是新添加的行，被删除的行则用“-”号标出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看README.md文件的修改</span></span><br><span class="line">git diff -- README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作树和最新提交的差别</span></span><br><span class="line">git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存区与仓库区的不同</span></span><br><span class="line">git diff --cached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个版本之间的不同</span></span><br><span class="line">git diff c265262 de4845b</span><br></pre></td></tr></table></figure>

<blockquote>
<p>HEAD 是指向当前分支中最新一次提交的指针</p>
</blockquote>
<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前版本之前的提交信息</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">commit 9f129bae19b2c82fb4e98cde5890e52a6c546922</span><br><span class="line">Author: cuilongjin &lt;cuilongjin@gmail.com&gt;</span><br><span class="line">Date: Sun Oct 8 22:08:39 2017 +0900</span><br><span class="line">    First commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示提交信息的第一行</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline <span class="comment"># 完整显示版本号</span></span><br><span class="line">git <span class="built_in">log</span> --oneline  <span class="comment"># 只显示前7位版本号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定目录、文件的日志</span></span><br><span class="line">git <span class="built_in">log</span> 目录名或文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件的改动（q键退出命令）</span></span><br><span class="line">git <span class="built_in">log</span> -p 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有曾经提交的版本（包括被删除的）</span></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图表形式显示</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=<span class="string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset -h		<span class="string">&#x27;查看帮助&#x27;</span></span><br><span class="line">--mixed				<span class="string">&#x27;reset HEAD and index&#x27;</span>(默认)</span><br><span class="line">--soft				<span class="string">&#x27;reset only HEAD&#x27;</span></span><br><span class="line">--hard  			<span class="string">&#x27;reset HEAD, index and working tree&#x27;</span></span><br><span class="line">--merge 			<span class="string">&#x27;reset HEAD, index and working tree&#x27;</span></span><br><span class="line">--keep 				<span class="string">&#x27;reset HEAD but keep local changes&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><code>HEAD</code> 表示当前版本，上一个版本就是 <code>HEAD^</code> ，上上一个版本就是 <code>HEAD^^</code> ，当然往上 100 个版本写 100 个^比较容易数不过来，所以写成 <code>HEAD~100</code></li>
<li>使用 <code>commit_id</code> 回退 , <code>git reflog</code> 用来记录你的每一次命令和 <code>commit_id</code></li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br><span class="line">git reset --hard commit_id</span><br><span class="line">git reset HEAD [file]</span><br></pre></td></tr></table></figure>

<h3 id="git-checkout-–file"><a href="#git-checkout-–file" class="headerlink" title="git checkout –file"></a>git checkout –file</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- README.md</span><br></pre></td></tr></table></figure>

<p>把 README.md 文件在 <code>工作区的修改全部撤销</code> ，<strong>用版本库里的版本替换工作区的版本</strong></p>
<p>这里有两种情况：</p>
<ol>
<li><p>一种是 README.md 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态</p>
</li>
<li><p>一种是 README.md 已经添加到暂存区后，又作了修改，现在撤销修改就回到添加到暂存区后的状态</p>
</li>
</ol>
<p>总之，就是让这个文件回到最近一次 git commit 或 git add 时的状态，可用于<strong>撤销文件修改或恢复误删文件</strong></p>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:cuilongjin/git_test.git</span><br></pre></td></tr></table></figure>

<p>添加后，远程库的名字就是 origin，这是 Git 默认的叫法，也可以改成别的，但是 origin 这个名字一看就知道是远程库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看远程库的信息</span></span><br><span class="line">git remote -v</span><br><span class="line">origin  git@github.com:cuilongjin/git_test.git (fetch)</span><br><span class="line">origin  git@github.com:cuilongjin/git_test.git (push)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定远程库的详细信息</span></span><br><span class="line">git remote show &lt;远程库&gt;</span><br></pre></td></tr></table></figure>

<p>上面显示了可以抓取和推送的 origin 的地址。如果没有推送权限，就看不到 push 的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除已有的 GitHub 远程库</span></span><br><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程库名称</span></span><br><span class="line">git remote rename &lt;原远程库名&gt; &lt;新远程库名&gt;</span><br></pre></td></tr></table></figure>

<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取远程仓库的更新，并且与本地的分支进行合并</span></span><br><span class="line">git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略</span></span><br><span class="line">git pull origin next 等同于 git fetch origin &amp;&amp; git merge origin/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支</span></span><br><span class="line"><span class="comment"># 加上参数 -p 就会在本地删除远程已经删除的分支</span></span><br><span class="line">$ git pull -p</span><br><span class="line"><span class="comment"># 等同于下面的命令</span></span><br><span class="line">$ git fetch --prune origin</span><br><span class="line">$ git fetch -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并 pull 两个不同的项目出现 fatal: refusing to merge unrelated histories</span></span><br><span class="line">git pull origin master ----allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;远程仓库名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次推送分支时，加上 -u 参数，git 会把本地分支和远程分支关联起来，在以后的推送或者拉取时就可以简化命令</span></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有本地分支，表示删除远程分支</span></span><br><span class="line">git push origin :master</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ git push origin --delete master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以强制覆盖的方式推送修改后的 repo （重新上传 repo）（不指定分支即所有分支）</span></span><br><span class="line">git push origin --force --all</span><br></pre></td></tr></table></figure>

<blockquote>
<p>remote: error: GH007: Your push would publish a private email address.<br>解决方法——<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vc2V0dGluZ3MvZW1haWxz">http://github.com/settings/emails</span> 把 Keep my email address private 这一项去掉勾选即可。</p>
</blockquote>
<p>如果推送失败，则因为远程分支比你的本地更新，需要先用 <code>git pull</code> 拉取远程的新提交</p>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:cuilongjin/仓库名.git [指定文件夹]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认远程主机为 origin ， -o 指定主机名</span></span><br><span class="line">git <span class="built_in">clone</span> --o origin1 git@github.com:cuilongjin/仓库名.git</span><br></pre></td></tr></table></figure>

<p>Git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快</p>
<p>从远程库 clone 时，默认情况下，只能看到本地的 master 分支<br>要在 dev 分支上开发，就必须创建远程 origin 的 dev 分支到本地，于是用这个命令创建本地 dev 分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地 dev 分支与远程 origin/dev 分支的链接</span></span><br><span class="line">git branch --set-upstream dev origin/dev</span><br></pre></td></tr></table></figure>

<p>克隆指定分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone -b|--branch 分支名或tag名 仓库地址</span></span><br></pre></td></tr></table></figure>

<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将某个远程仓库的更新，全部取回本地。默认取回所有分支（branch）的更新</span></span><br><span class="line">git fetch &lt;远程仓库&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回特定分支的更新</span></span><br><span class="line">git fetch &lt;远程仓库&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p>git fetch 和 git pull 区别</p>
<ul>
<li><p>git pull 获取远程仓库的更新，并且与本地的分支进行合并</p>
</li>
<li><p>git fetch 所取回的更新，在本地主机上要用 “远程仓库&#x2F;分支名” 的形式读取，即不会与本地分支合并</p>
</li>
</ul>
<h3 id="git-忽视文件"><a href="#git-忽视文件" class="headerlink" title="git 忽视文件"></a>git 忽视文件</h3><p>在仓库中，有些文件是不想被 git 管理的，比如数据的配置密码、写代码的一些思路等。git 可以通过配置从而达到忽视掉一些文件，这样这些文件就可以不用提交了</p>
<p>忽略文件的原则是：</p>
<ul>
<li>忽略操作系统自动生成的文件，比如缩略图等</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 .class 文件</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件</li>
</ul>
<p>在仓库的根目录创建一个 <code>.gitignore</code> 的文件，文件名是固定的</p>
<p>将不需要被 git 管理的文件路径添加到 <code>.gitignore</code> 中，把 <code>.gitignore</code> 也提交到 Git，Git 就会自动忽略这些文件</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># 忽视 index.txt 文件</span><br><span class="line">index.txt</span><br><span class="line"></span><br><span class="line"># 忽视 .gitignore 文件</span><br><span class="line">.gitignore</span><br><span class="line"></span><br><span class="line"># 忽视 css 下的 index.css 文件</span><br><span class="line">css/index.css</span><br><span class="line"></span><br><span class="line"># 忽视 css 下的所有的 css 文件</span><br><span class="line">css/*.css</span><br><span class="line"></span><br><span class="line"># 忽视 css 下的所有文件</span><br><span class="line">css/*.*</span><br><span class="line"></span><br><span class="line"># 忽视 css 文件夹</span><br><span class="line">css</span><br></pre></td></tr></table></figure>

<p>GitHub 已经为我们准备了各种配置文件 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=">https://github.com/github/gitignore</span></p>
<p>强制添加被 .gitignore 忽略的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制添加被.gitignore忽略的文件</span></span><br><span class="line">git add -f &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查哪个规则忽略了此文件，以便修订规则</span></span><br><span class="line">git check-ignore -v &lt;file&gt;</span><br><span class="line">.gitignore:x:xxx.xx    xxxxxx</span><br></pre></td></tr></table></figure>

<h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p>在 git 中，分支实质上仅仅是一个指针，每次代码提交后，这个分支指针就会向后移动，保证一直指向最后一次提交的的版本。git 中使用 HEAD 指向当前分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">* master</span><br><span class="line"></span><br><span class="line">-r 参数查看远程分支</span><br><span class="line">-a 查看所有分支(远程分支会用红色表示出来)</span><br></pre></td></tr></table></figure>

<p><code>*</code>（星号）表示当前所在的分支</p>
<ul>
<li>git checkout -b 创建、切换分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 branch 为基础创建名为 feature-A 的分支</span></span><br><span class="line">git checkout -b feature-A &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>连续执行下面两条命令也能收到同样效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 feature-A 分支</span></span><br><span class="line">git branch feature-A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前分支切换为 feature-A 分支</span></span><br><span class="line">git checkout feature-A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换回上一个分支</span></span><br><span class="line">git checkout -</span><br></pre></td></tr></table></figure>

<ul>
<li>git branch -d 删除分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地 feature-A 分支</span></span><br><span class="line">git branch -d feature-A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行删除本地 feature-A 分支</span></span><br><span class="line">git branch -D feature-A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程 feature-A 分支</span></span><br><span class="line">git push origin :feature-A</span><br><span class="line">或 git push origin --delete feature-A</span><br></pre></td></tr></table></figure>

<ul>
<li>git branch -m 重命名分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名本地分支</span></span><br><span class="line">git branch -m old_branch new_branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名远程分支</span></span><br><span class="line"><span class="comment"># 重命名本地分支 -&gt; 删除远程分支 -&gt; 推送到远程分支</span></span><br></pre></td></tr></table></figure>

<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>合并分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 feature-A 合并到 master 上</span></span><br><span class="line"><span class="comment"># 首先切换到 master 分支，然后执行</span></span><br><span class="line">git merge [--squash] [--no-ff] -m <span class="string">&quot;描述&quot;</span> feature-A</span><br><span class="line">--squash <span class="comment"># 只是将&lt;branch&gt;中的修改内容迁移过来，而不保留其中的commit历史</span></span><br><span class="line">--no-ff <span class="comment"># 创建合并提交，为了在历史记录中明确记录下本次分支合并</span></span><br></pre></td></tr></table></figure>

<h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把当前工作现场“储藏”起来</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看存储的工作现场</span></span><br><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<p>恢复工作现场</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复工作现场，stash 内容并不删除</span></span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 stash 内容</span></span><br><span class="line">git stash drop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复的同时把 stash 内容也删了</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p>恢复指定的 stash，用命令：<code>git stash apply stash@&#123;0&#125;</code></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDAvMDAxMzc1ODQwMDM4OTM5YzI5MTQ2N2NjN2M3NDdiMTgxMGFhYjJmYjg4NjM1MDgwMDA=">廖雪峰 Git 教程创建与合并分支</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDAvMDAxMzc1ODQxMDM2NDQ1N2I5ZTNkODIxZjQyNDRiZWIwZmQ2OWM2MWExODVhZTAwMDA=">廖雪峰 Git 教程分支管理策略</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDAvMDAxMzc2MDIzNTkxNzg3OTRkOTY2OTIzZTVjNDEzNGJjOGJmOThkZmIwM2FlYTMwMDA=">廖雪峰 Git 教程 Bug 分支</span></p>
<h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><ul>
<li>创建标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先切换到需要打标签的分支上</span></span><br><span class="line"><span class="comment"># 默认标签是打在最新提交的 commit 上的</span></span><br><span class="line">git tag v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对指定某一次提交打标签</span></span><br><span class="line">git tag v1.0 &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字</span></span><br><span class="line">git tag -a v1.0 -m <span class="string">&quot;version1.0 released&quot;</span> &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 -s 用私钥签名一个标签(需配置gpg密钥对)</span></span><br><span class="line">git tag -s v1.0 -m <span class="string">&quot;signed version1.0 released&quot;</span> &lt;commit <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有标签</span></span><br><span class="line">git tag</span><br><span class="line">v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有标签信息</span></span><br><span class="line">git show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 v1.0 标签信息</span></span><br><span class="line">git show v1.0</span><br><span class="line">commit <span class="built_in">id</span>:xxx</span><br><span class="line">Author:xxx</span><br><span class="line">Date:xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>推送标签到远程</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送 v1.0 标签到远程</span></span><br><span class="line">git push origin v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送全部尚未推送的本地标签到远程</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<ul>
<li>删除标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地标签 v1.0</span></span><br><span class="line">git tag -d v1.0</span><br><span class="line"><span class="comment"># 删除远程标签 v1.0</span></span><br><span class="line">git push origin :refs/tags/v1.0</span><br><span class="line">或 git push origin --delete tag v1.0</span><br></pre></td></tr></table></figure>

<h2 id="git-仓库分离"><a href="#git-仓库分离" class="headerlink" title="git 仓库分离"></a>git 仓库分离</h2><p>将一个 git 仓库里的一部分文件转出作为一个独立的仓库并保留提交记录 commit log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这就是那个大仓库 big-project</span><br><span class="line">git clone git@github.com:**/big-project.git</span><br><span class="line">cd big-project</span><br><span class="line"># 把所有 `source/page` 目录下的相关提交整理为一个新的分支 page</span><br><span class="line">git subtree split -P source/page -b page</span><br><span class="line"># 另建一个新目录并初始化为 git 仓库</span><br><span class="line">mkdir ../page</span><br><span class="line">cd ../page</span><br><span class="line">git init</span><br><span class="line"># 拉取旧仓库的 page 分支到当前的 master 分支</span><br><span class="line">git pull ../big-project page</span><br></pre></td></tr></table></figure>

<h2 id="快速克隆大项目"><a href="#快速克隆大项目" class="headerlink" title="快速克隆大项目"></a>快速克隆大项目</h2><p>克隆单个分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --branch &lt;branch_name&gt; &lt;remote-address&gt;</span><br></pre></td></tr></table></figure>

<p>只克隆最新的提交记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;remote-address&gt; --depth 1</span><br></pre></td></tr></table></figure>

<p>– depth 代表克隆的深度，–depth 1 代表只克隆最新一次提交记录以及这次提交之后的最新内容，不克隆历史提交，所造成的影响就是不能查看历史提交记录</p>
<p>克隆单个分支的最新一次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --branch &lt;branch_name&gt; &lt;remote-address&gt; --depth 1</span><br></pre></td></tr></table></figure>

<h2 id="git-修改提交历史"><a href="#git-修改提交历史" class="headerlink" title="git 修改提交历史"></a>git 修改提交历史</h2><p>修改最后一条 commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<p>修改多条 commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3 修改最近三次提交</span><br><span class="line">git rebase -i --root 修改所有提交</span><br><span class="line"></span><br><span class="line">git rebase -i  [startpoint]  [endpoint] 指定了一个编辑区间（不包含[startpoint]），如果不指定[endpoint]，则该区间的终点默认是当前分支 HEAD 所指向的 commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit 模式下</span></span><br><span class="line">git commit --amend --author=<span class="string">&quot;author &lt;email&gt;&quot;</span> <span class="comment"># 修改提交人信息</span></span><br><span class="line">git commit --amend  --<span class="built_in">date</span>=<span class="string">&quot;commit_time&quot;</span> <span class="comment"># 修改时间 时间格式 Sat, 24 Dec 2016 18:12:09 +0800</span></span><br></pre></td></tr></table></figure>

<p>Commands</p>
<p><strong>p</strong>, pick &#x3D; use commit: 直接使用 commit 不做任何修改，其中 p 是 pick 的缩写，以下雷同</p>
<p><strong>r</strong>, reword &#x3D; use commit, but edit the commit message: 使用 commit，修改 commit 注释</p>
<p><strong>e</strong>, edit &#x3D; use commit, but stop for amending :使用 commit，但是遇到此命令时会停止合并，可以修改提交信息</p>
<p><strong>s</strong>, squash &#x3D; use commit, but meld into previous commit: 使用 commit，但是会合并到前一个 commit 中，默认保留所有的 commit 注释，并变为可以修改状态</p>
<p><strong>f</strong>, fixup &#x3D; like “squash”, but discard this commit’s log message：和 squash 类似，但是会抛弃 commit 的 log 信息</p>
<p><strong>x</strong>, exec &#x3D; run command (the rest of the line) using shell：使用 shell 运行命令</p>
<p><strong>d</strong>, drop &#x3D; remove commit：丢弃 commit，（并删除该提交所做的修改）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82N2YyMGQxOTYwNWE=">https://www.jianshu.com/p/67f20d19605a</span></p>
<h2 id="git-bisect"><a href="#git-bisect" class="headerlink" title="git-bisect"></a>git-bisect</h2><p>git 有一个以二分法帮助定位问题的命令——bisect。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开始二分查找问题</span></span><br><span class="line">git bisect start</span><br><span class="line"><span class="comment"># 标记当前有问题</span></span><br><span class="line">git bisect bad</span><br><span class="line"><span class="comment"># 标记哪个 commit 或 tag 时是没问题的</span></span><br><span class="line">git bisect good v1.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 git 会 checkout 两个点之间的某个 commit，</span></span><br><span class="line"><span class="comment"># 如果此时还是有问题：</span></span><br><span class="line">git bisect bad</span><br><span class="line"><span class="comment"># 如果此时没有问题：</span></span><br><span class="line">git bisect good</span><br><span class="line"><span class="comment"># 接着 git 会 checkout 下一个「有问题」和「没问题」之间的 commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直到定位到问题，git 会提示：xxxxxxx is first bad commit</span></span><br></pre></td></tr></table></figure>

<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlQjclQTUlRTUlODUlQjctJUU0JUJEJUJGJUU3JTk0JUE4LUdpdC0lRTglQjAlODMlRTglQUYlOTU=">https://git-scm.com/book/zh/v2/Git-工具-使用-Git-调试</span></p>
<h2 id="git-filter-branch"><a href="#git-filter-branch" class="headerlink" title="git filter-branch"></a>git filter-branch</h2><p>彻底删除不需要的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 ./node_modules 目录</span></span><br><span class="line">git filter-branch -f --prune-empty --index-filter <span class="string">&quot;git rm --cached --ignore-unmatch -fr ./node_modules&quot;</span> -- --all</span><br></pre></td></tr></table></figure>

<p>修改提交用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-branch -f --env-filter <span class="string">&quot;GIT_AUTHOR_NAME=your new author name&quot;</span> -- --all</span><br></pre></td></tr></table></figure>

<p>修改提交邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-branch -f --env-filter <span class="string">&quot;GIT_AUTHOR_EMAIL=your new author email&quot;</span> -- --all</span><br></pre></td></tr></table></figure>

<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="git-add-的时候遇到warning-LF-will-be-replaced-by-CRLF-in-……-96"><a href="#git-add-的时候遇到warning-LF-will-be-replaced-by-CRLF-in-……-96" class="headerlink" title="git add .的时候遇到warning: LF will be replaced by CRLF in ……&#96;"></a>git add .<code>的时候遇到</code>warning: LF will be replaced by CRLF in ……&#96;</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config core.autocrlf</span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true：添加文件到git仓库时，git将其视为文本文件。他将把crlf变成lf</span></span><br><span class="line"><span class="comment"># false：line-endings将不做转换操作。文本文件保持原来的样子</span></span><br><span class="line"><span class="comment"># input：把crlf转成lf，当有人Check代码时还是lf方式。因此在window操作系统下，不要使用这个设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CRLF (carriagereturnlinefeed)：表示句尾使用回车换行两个字符(即Windows编程时使用&quot;\r\n&quot;换行)</span></span><br><span class="line"><span class="comment"># LF(line feed)：表示句尾只使用换行(Unix Style)</span></span><br><span class="line"><span class="comment"># CR：表示只使用回车</span></span><br></pre></td></tr></table></figure>

<h3 id="Git-永久删除文件-包括历史记录"><a href="#Git-永久删除文件-包括历史记录" class="headerlink" title="Git 永久删除文件(包括历史记录)"></a>Git 永久删除文件(包括历史记录)</h3><p><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvcmVtb3Zpbmctc2Vuc2l0aXZlLWRhdGEtZnJvbS1hLXJlcG9zaXRvcnkv">https://help.github.com/articles/removing-sensitive-data-from-a-repository/</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在仓库的根目录执行</span></span><br><span class="line">git filter-branch --force --index-filter <span class="string">&#x27;git rm --cached --ignore-unmatch 文件路径&#x27;</span> --prune-empty --tag-name-filter <span class="built_in">cat</span> -- --all</span><br><span class="line"><span class="comment"># 文件路径相对于git仓库根目录</span></span><br><span class="line"><span class="comment"># 删除文件夹 添加 -r 命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以强制覆盖的方式推送修改后的 repo （不指定分支即所有分支）（重新上传 repo）</span></span><br><span class="line">git push origin --force --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制推送 tags</span></span><br><span class="line">git push origin --force --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理和回收空间</span></span><br><span class="line"><span class="built_in">rm</span> -rf .git/refs/original/</span><br><span class="line">git reflog expire --expire=now --all</span><br><span class="line">git gc --prune=now</span><br><span class="line">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure>

<p>重新<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL0dpdC1CcmFuY2hpbmctUmViYXNpbmc=">绑定</span>，而不是合并创建的旧（受污染）存储库历史记录中的任何分支</p>
<ul>
<li>git 修改已提交的某一次的邮箱和用户信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-branch -f --env-filter \</span><br><span class="line"><span class="string">&quot;GIT_AUTHOR_NAME=&#x27;Newname&#x27;; GIT_AUTHOR_EMAIL=&#x27;newemail&#x27;; \</span></span><br><span class="line"><span class="string">GIT_COMMITTER_NAME=&#x27;committed-name&#x27;; GIT_COMMITTER_EMAIL=&#x27;committed-email&#x27;;&quot;</span> HEAD</span><br></pre></td></tr></table></figure>

<h3 id="fork-的项目-A-与原项目-B-保持同步"><a href="#fork-的项目-A-与原项目-B-保持同步" class="headerlink" title="fork 的项目( A )与原项目 (B) 保持同步"></a>fork 的项目( A )与原项目 (B) 保持同步</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 A 克隆到本地做中转</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 B 远程仓库地址并拉取</span></span><br><span class="line">git remote add update &lt;B 远程仓库地址&gt;</span><br><span class="line">git fetch update master:updated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并并解决冲突</span></span><br><span class="line">git merge updated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接合并远程分支</span></span><br><span class="line">git merge update/master</span><br></pre></td></tr></table></figure>

<h3 id="远程分支删除以后，本地显示仍然存在的解决办法"><a href="#远程分支删除以后，本地显示仍然存在的解决办法" class="headerlink" title="远程分支删除以后，本地显示仍然存在的解决办法"></a>远程分支删除以后，本地显示仍然存在的解决办法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有分支：</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令查看远程分支和本地分支的对应关系</span></span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会看到</span></span><br><span class="line">refs/remotes/origin/&lt;branch&gt; stale (use <span class="string">&#x27;git remote prune&#x27;</span> to remove)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行下面命令同步删除</span></span><br><span class="line">git remote prune origin</span><br><span class="line">或者</span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>github 下载加速--解决克隆 github 仓库时速度慢的问题</title>
    <url>/890.html</url>
    <content><![CDATA[<h2 id="修改-host-方式"><a href="#修改-host-方式" class="headerlink" title="修改 host 方式"></a>修改 host 方式</h2><p>访问 <span class="exturl" data-url="aHR0cDovL3Rvb2wuY2hpbmF6LmNvbS9kbnM=">http://tool.chinaz.com/dns</span> 或 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBhZGRyZXNzLmNvbS8=">https://www.ipaddress.com/</span></p>
<p>查询以下三个链接的 DNS 解析地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github.com</span><br><span class="line">assets-cdn.github.com</span><br><span class="line">github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>

<p>找到 TTL 值最小的 IP，修改系统 Hosts 文件</p>
<p>之后刷新系统 DNS 缓存</p>
<p>Windows+X 打开系统命令行（管理员身份）或 powershell</p>
<p>运行 ipconfig &#x2F;flushdns 手动刷新系统 DNS 缓存。</p>
<h2 id="利用国内代码管理平台中转"><a href="#利用国内代码管理平台中转" class="headerlink" title="利用国内代码管理平台中转"></a>利用国内代码管理平台中转</h2><p>利用码云(gitee)</p>
<p>新建仓库-导入已有仓库 将 github 仓库 clone 到 gitee 中</p>
<p>如果项目中有子模块，同理也需要 clone 到 gitee 中，同时修改主仓库中的 .gitmodules 文件，将子模块的地址修改为 gitee 地址</p>
<h2 id="使用-GitHubDesktop-客户端"><a href="#使用-GitHubDesktop-客户端" class="headerlink" title="使用 GitHubDesktop 客户端"></a>使用 GitHubDesktop 客户端</h2><h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><p>仅仅开代理是不行的，需要单独配置</p>
<p>如果使用 HTTPS 协议克隆需要如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment">#取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<p>使用 SSH 协议克隆需要如下配置</p>
<p>修改.ssh&#x2F;config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname github.com</span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>

<p>1080 端口换成你本地代理客户端的 socks 端口</p>
<h2 id="github-com-cnpmjs-org-镜像站"><a href="#github-com-cnpmjs-org-镜像站" class="headerlink" title="github.com.cnpmjs.org 镜像站"></a>github.com.cnpmjs.org 镜像站</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vuejs/vue.git</span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/vuejs/vue.git</span><br></pre></td></tr></table></figure>

<h2 id="https-github-com-521xueweihan-GitHub520"><a href="#https-github-com-521xueweihan-GitHub520" class="headerlink" title="https://github.com/521xueweihan/GitHub520"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzUyMXh1ZXdlaWhhbi9HaXRIdWI1MjA=">https://github.com/521xueweihan/GitHub520</span></h2><p>SwitchHosts v4.0.2<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29sZGovU3dpdGNoSG9zdHMvcmVsZWFzZXMvdGFnL3Y0LjAuMg==">https://github.com/oldj/SwitchHosts/releases/tag/v4.0.2</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github 搭建博客教程及进阶设置</title>
    <url>/423.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvaW5kZXguaHRtbA==">Hexo 文档</span></p>
<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h2><p>作用：用来生成静态页面的 到<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnLw==">Node.js 官网</span>下载相应平台的最新版本，一路安装即可。</p>
<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>作用：把本地的 hexo 内容提交到 github 上去。<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git 官网下载</span></p>
<h2 id="申请-GitHub"><a href="#申请-GitHub" class="headerlink" title="申请 GitHub"></a>申请 GitHub</h2><p>作用：是用来做博客的远程创库、域名、服务器之类的。 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">github 账号注册</span>，<span class="exturl" data-url="aHR0cHM6Ly9jdWlsb25namluLmdpdGh1Yi5pby8yMDE3LzEwLzA4L0dpdEh1YiVFNCVCRCVCRiVFNyU5NCVBOC8=">github 配置</span></p>
<h2 id="安装-HEXO"><a href="#安装-HEXO" class="headerlink" title="安装 HEXO"></a>安装 HEXO</h2><p>执行如下命令安装 hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>初始化命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>文件夹的目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p><code>_config.yml</code> 网站配置文件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>网站标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>author</td>
<td>您的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言</td>
</tr>
<tr>
<td>timezone</td>
<td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America&#x2F;New_York, Japan, 和 UTC</td>
</tr>
</tbody></table>
<blockquote>
<p>其中，description 主要用于 SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author 参数用于主题显示文章的作者</p>
</blockquote>
<p>生成静态页面</p>
<p>将 md 文件放到 <code>source/_posts</code> 文件夹下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g/generate <span class="comment"># 生成静态页面至 public 目录</span></span><br><span class="line"><span class="comment"># -w/--watch 参数监视文件变动</span></span><br></pre></td></tr></table></figure>

<p>安装本地服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure>

<p>启动本地服务，进行文章预览调试，命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server <span class="comment"># 开启预览访问端口(默认端口4000，&#x27;ctrl + c&#x27;关闭server)</span></span><br><span class="line"><span class="comment"># --debug 参数开启调试模式 -p/--port 参数重设端口</span></span><br></pre></td></tr></table></figure>

<p>浏览器输入<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==">http://localhost:4000</span> 预览</p>
<p>自定义 IP</p>
<p>服务器默认运行在 0.0.0.0，您可以覆盖默认的 IP 设置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure>

<h1 id="配置-Github"><a href="#配置-Github" class="headerlink" title="配置 Github"></a>配置 Github</h1><h2 id="建立-Repository"><a href="#建立-Repository" class="headerlink" title="建立 Repository"></a>建立 Repository</h2><p>建立与你用户名对应的仓库，仓库名必须为<code>your_user_name.github.io</code>，固定写法</p>
<h2 id="建立关联"><a href="#建立关联" class="headerlink" title="建立关联"></a>建立关联</h2><blockquote>
<p>打开站点配置文件<code>_config.yml</code> 翻到最下面，改成我这样子的，注意 <code>:</code> 后面要有空格</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   <span class="built_in">type</span>: git</span><br><span class="line">   repository: ssh://git@github.com/cuilongjin/cuilongjin.github.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了便于以后管理，可以创建备份分支，<code>$ git checkout -b hexo</code>创建 hexo 分支用于备份原始文件 所有的修改添加均在此分支下进行，并 push 到远程 hexo 分支</p>
</blockquote>
<p>执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后，执行配置命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy <span class="comment"># 将 .deploy 目录部署到 GitHub</span></span><br></pre></td></tr></table></figure>

<p>然后再浏览器中输入<code>http://your_user_name.github.io/</code>就行了</p>
<h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>每次部署的步骤，可按以下三步来进行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>执行下列命令来创建一篇新文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>在文章中插入指定大小的图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure>

<p>Bootstrap Callout</p>
<p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<code>class_name</code> 可以是以下列表中的一个值：</p>
<p><code>default</code>、<code>primary</code>、<code>success</code>、<code>info</code>、<code>warning</code>、<code>danger</code></p>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20v">NexT v5.1.x</span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">NexT v6.0.0</span> <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTU0NDkyNC8=">next 主题个性化配置</span></p>
<h2 id="下载-NexT-主题"><a href="#下载-NexT-主题" class="headerlink" title="下载 NexT 主题"></a>下载 NexT 主题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-hexo-site</span><br><span class="line">git submodule add git@github.com:cuilongjin/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>

<h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>打开站点配置文件 <code>_config.yml</code> ， 找到 theme 字段，并将其值更改为 next</p>
<p>NexT 主题的目录架构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── .github                #github信息</span><br><span class="line">├── languages              #多语言</span><br><span class="line">|   ├── _en.yml            #默认语言</span><br><span class="line">|   └── zh-CN.yml          #简体中文</span><br><span class="line">|   └── zh-TW.yml          #繁体中文</span><br><span class="line">├── layout                 #布局，根目录下的*.swig文件是对主页，分页，存档等的控制</span><br><span class="line">|   ├── _custom            #可以自定义的模板，覆盖原有模板</span><br><span class="line">|   |   ├── head.swig      #文首样式</span><br><span class="line">|   |   ├── header.swig    #头部样式</span><br><span class="line">|   |   ├── sidebar.swig   #侧边栏样式</span><br><span class="line">|   ├── _macro             #可以自定义的模板，覆盖原有模板</span><br><span class="line">|   |   ├── post.swig      #文章模板</span><br><span class="line">|   |   ├── reward.swig    #打赏模板</span><br><span class="line">|   |   ├── sidebar.swig   #侧边栏模板</span><br><span class="line">|   ├── _partial           #局部的布局</span><br><span class="line">|   |   ├── head           #头部模板</span><br><span class="line">|   |   ├── search         #搜索模板</span><br><span class="line">|   |   ├── share          #分享模板</span><br><span class="line">|   ├── _script            #局部的布局</span><br><span class="line">|   ├── _third-party       #第三方模板</span><br><span class="line">|   ├── _layout.swig       #主页面模板</span><br><span class="line">|   ├── index.swig         #主页面模板</span><br><span class="line">|   ├── page               #页面模板</span><br><span class="line">|   └── tag.swig           #tag模板</span><br><span class="line">├── scripts                #script源码</span><br><span class="line">|   ├── tags               #tags的script源码</span><br><span class="line">|   ├── marge.js           #页面模板</span><br><span class="line">├── source                 #源码</span><br><span class="line">|   ├── css                #css源码</span><br><span class="line">|   |   ├── _common        #*.styl基础css</span><br><span class="line">|   |   ├── _custom        #*.styl自定义局部css</span><br><span class="line">|   |   └── _mixins        #mixins的css</span><br><span class="line">|   ├── fonts              #字体</span><br><span class="line">|   ├── images             #图片</span><br><span class="line">|   ├── js                 #javascript源代码</span><br><span class="line">|   └── lib                #引用库</span><br><span class="line">├── _config.yml            #主题配置文件</span><br><span class="line">└── README.md              #说明文件</span><br></pre></td></tr></table></figure>

<h2 id="在菜单上添加页面"><a href="#在菜单上添加页面" class="headerlink" title="在菜单上添加页面"></a>在菜单上添加页面</h2><p>以添加 about 页面为例，在 hexo 目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后你会发现 source 里面多了个目录 about，里面有个 index.md。其实你也可以手动建立。 然后在主题配置文件 <code>_config.yml</code> 中找到 menu 一项，添加一行 About: &#x2F;about</p>
<h2 id="设置「阅读全文」"><a href="#设置「阅读全文」" class="headerlink" title="设置「阅读全文」"></a>设置「阅读全文」</h2><p>在首页显示文章的摘录并显示 <strong>阅读全文</strong> 按钮，可以通过以下方法：</p>
<ol>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式 <strong>推荐</strong></li>
<li>在文章的 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZnJvbnQtbWF0dGVyLmh0bWw=">front-matter</span> 中添加 <code>description</code>，并提供文章摘录</li>
<li>自动形成摘要，在主题配置文件 <code>_config.yml</code> ，启用<code>auto_excerpt</code></li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>

<p>默认截取的长度为 <code>150</code> 字符，可以根据需要自行设定</p>
<p>建议使用 <code>&lt;!-- more --&gt;</code>（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p>
<h2 id="添加-RSS"><a href="#添加-RSS" class="headerlink" title="添加 RSS"></a>添加 RSS</h2><p>在博客根目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure>

<p>打开站点配置文件 <code>_config.yml</code> ，添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure>

<p>打开主题配置文件 <code>_config.yml</code> ，添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rss:</span> <span class="string">/atom.yml</span></span><br></pre></td></tr></table></figure>

<h2 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h2><p>安装 hexo-generator-search，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件 <code>_config.yml</code> ，添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p><code>themes\next\source\css\_custom\custom.styl</code> 文件中添加自定义样式</p>
<h3 id="修改头像样式"><a href="#修改头像样式" class="headerlink" title="修改头像样式"></a>修改头像样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更改主题背景"><a href="#更改主题背景" class="headerlink" title="更改主题背景"></a>更改主题背景</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 背景图片相关</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/background.jpg</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片放入 <code>themes\next\source\images</code> 中即可</p>
<p>改变背景色和透明度，添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 文章内容的透明度</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 侧边框的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 菜单栏的透明度设置</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>);</span><br><span class="line">&#125;</span><br><span class="line">// 搜索框的透明度设置</span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改-local-search-加载图标"><a href="#修改-local-search-加载图标" class="headerlink" title="修改 local-search 加载图标"></a>修改 local-search 加载图标</h3><p>在<code>blog/themes/next/layout/_third-party/search/localsearch.swig</code>中寻找：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;fa fa-spinner fa-pulse fa-5x fa-fw&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>

<p>将其修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;fa fa-circle-o-notch fa-spin fa-5x fa-fw margin-bottom&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义代码块样式"><a href="#自定义代码块样式" class="headerlink" title="自定义代码块样式"></a>自定义代码块样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7600</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line"><span class="selector-class">.highlight</span>,</span><br><span class="line">pre &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带 # 号的标签"></a>修改文章底部的那个带 # 号的标签</h3><p>编辑主题配置文件 <code>_config.yml</code> ，修改</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="string">tag</span></span><br></pre></td></tr></table></figure>

<h3 id="在每篇文章末尾统一添加”本文结束”标记"><a href="#在每篇文章末尾统一添加”本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加”本文结束”标记"></a>在每篇文章末尾统一添加”本文结束”标记</h3><p>打开 <code>\themes\next\layout\_macro\post.swig</code> 文件，在 <code>post-body</code> 之后， <code>post-footer</code> 之前添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index and theme.passage_end_tag.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;margin-top: 20px;&quot;</span>&gt;</span>-------------本文结束-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后打开主题配置文件 <code>_config.yml</code> ，在末尾添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>

<p>修改主题配置文件 <code>_config.yml</code> 将 pace: false 改为 pace: true</p>
<p>自定义颜色</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 自定义进度条颜色 */</span></span><br><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">  <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#1e92fb</span>; <span class="comment">// 进度条颜色</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.pace-progress-inner</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#1e92fb</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1e92fb</span>; <span class="comment">// 阴影颜色</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.pace-activity</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#1e92fb</span>; <span class="comment">// 上边框颜色</span></span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#1e92fb</span>; <span class="comment">// 左边框颜色</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器切换标签离开当前页面时改变-title-提示"><a href="#浏览器切换标签离开当前页面时改变-title-提示" class="headerlink" title="浏览器切换标签离开当前页面时改变 title 提示"></a>浏览器切换标签离开当前页面时改变 title 提示</h3><p><code>themes/next/lauout/_script/vendors.swig</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> a = <span class="string">&#x27;? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ☕️ ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ☘️ ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ☺️ ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ☹️ ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> == <span class="string">&#x27;hidden&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      normal_title = <span class="variable language_">document</span>.<span class="property">title</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">title</span> = a.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">235</span>)]</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> <span class="variable language_">document</span>.<span class="property">title</span> = normal_title</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置首页隐藏指定文章"><a href="#设置首页隐藏指定文章" class="headerlink" title="设置首页隐藏指定文章"></a>设置首页隐藏指定文章</h3><p>自定义 front-matter 的参数<br>例如，自定义添加一个 notshow 参数，值为 true 表示隐藏</p>
<p>修改主题的 <code>\themes\next\layout\index.swig</code> 文件</p>
<p>将</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">      &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#x27;_partials/pagination.swig&#x27; %&#125;</span><br><span class="line">&#123;% endblock %</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">      &#123;% if post.notshow != true %&#125;</span><br><span class="line">        &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#x27;_partials/pagination.swig&#x27; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><h3 id="Gitmen-评论"><a href="#Gitmen-评论" class="headerlink" title="Gitmen 评论"></a>Gitmen 评论</h3><h4 id="GitHub-授权接入"><a href="#GitHub-授权接入" class="headerlink" title="GitHub 授权接入"></a>GitHub 授权接入</h4><p>Gitment 是使用的 GitHub Issues 作为评论系统，在接入 Gitment 前，需要获得 GitHub 的授权，获得相应的客户端 id 和客户端私钥，以备站点使用。 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FwcGxpY2F0aW9ucy9uZXcv">OAuth application 注册接入</span></p>
<h4 id="添加-Gitment"><a href="#添加-Gitment" class="headerlink" title="添加 Gitment"></a>添加 Gitment</h4><blockquote>
<p>如果您使用的是 Hexo 框架的 Next 主题博客，想要添加 Gitment 的时候，记得将自己的 Next 主 题更新到最新版。</p>
</blockquote>
<p>打开主题配置文件 <code>_config.yml</code> 修改如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_user:</span> <span class="comment"># MUST HAVE, Your Github ID</span></span><br><span class="line">  <span class="attr">github_repo:</span> <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="comment"># EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br></pre></td></tr></table></figure>

<p>其中 lazy 的含义，是否懒加载相应评论框，如果为 true，文章底部评论是收起状态，提示显示 Gitment 评论按钮，单击展开评论框</p>
<h3 id="LiveRe-评论"><a href="#LiveRe-评论" class="headerlink" title="LiveRe 评论"></a>LiveRe 评论</h3><p>注册<span class="exturl" data-url="aHR0cHM6Ly9saXZlcmUuY29tLw==">LiveRe</span></p>
<p>打开主题配置文件 <code>_config.yml</code> 添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Support for LiveRe comments system.</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">your</span> <span class="string">uid</span></span><br></pre></td></tr></table></figure>

<h3 id="Hypercomments-超级评论"><a href="#Hypercomments-超级评论" class="headerlink" title="Hypercomments 超级评论"></a>Hypercomments 超级评论</h3><p>注册<span class="exturl" data-url="aHR0cHM6Ly93d3cuaHlwZXJjb21tZW50cy5jb20v">Hypercomments</span></p>
<p>打开主题配置文件 <code>_config.yml</code> 添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hypercomments</span></span><br><span class="line"><span class="comment"># hypercomments_id: your id</span></span><br></pre></td></tr></table></figure>

<h3 id="valine-评论系统"><a href="#valine-评论系统" class="headerlink" title="valine 评论系统"></a>valine 评论系统</h3><h2 id="添加分享"><a href="#添加分享" class="headerlink" title="添加分享"></a>添加分享</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-needmoreshare2 <span class="built_in">source</span>/lib/needsharebutton</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件 <code>_config.yml</code> ，加入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postbottom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">float:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h2><h3 id="添加站点地图（sitemap-xml）"><a href="#添加站点地图（sitemap-xml）" class="headerlink" title="添加站点地图（sitemap.xml）"></a>添加站点地图（sitemap.xml）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap hexo-generator-baidu-sitemap</span><br><span class="line">npm install hexo-generator-baidu-sitemap</span><br></pre></td></tr></table></figure>

<p>在<strong>站点配置文件</strong>中添加如下代码:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>配置成功后，会生成<code>sitemap.xml</code>和<code>baidusitemap.xml</code>，前者适合提交给谷歌搜素引擎，后者适合提交百度搜索引擎。</p>
<h3 id="提交博客地址到搜索引擎"><a href="#提交博客地址到搜索引擎" class="headerlink" title="提交博客地址到搜索引擎"></a>提交博客地址到搜索引擎</h3><p>如果你不主动提交你的博客地址给各大搜索引擎，那么即使你站内优化做得再好，搜索引擎根本都不知道你的博客的存在。 所以别忘记在你创建完博客的那一刻就去提交。如果你此刻还没有提交，现在就去吧。</p>
<ul>
<li>Google <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL3Rvb2xzL3N1Ym1pdC11cmw=">https://www.google.com/webmasters/tools/submit-url</span></li>
<li>必应 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vdG9vbGJveC93ZWJtYXN0ZXIv">https://www.bing.com/toolbox/webmaster/</span></li>
<li>Baidu <span class="exturl" data-url="aHR0cHM6Ly96aXl1YW4uYmFpZHUuY29tL2xpbmtzdWJtaXQvaW5kZXg=">https://ziyuan.baidu.com/linksubmit/index</span></li>
</ul>
<h3 id="Google-站长工具-和-Google-Analysis"><a href="#Google-站长工具-和-Google-Analysis" class="headerlink" title="Google 站长工具 和 Google Analysis"></a>Google 站长工具 和 Google Analysis</h3><p>GA 是用来统计访问信息的，站长工具是用来查看网站的查询和搜索数据</p>
<p>注册<span class="exturl" data-url="aHR0cHM6Ly9hbmFseXRpY3MuZ29vZ2xlLmNvbS8=">Google Analysis</span></p>
<p>编辑主题配置文件 <code>_config.yml</code> ， 修改字段 <code>google_analytics</code>， 值设置成你的 Google 跟踪 ID。跟踪 ID 通常是以 UA- 开头</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS9zZWFyY2gtY29uc29sZS8=">Google 站长工具</span> 提交 sitemap</p>
<h3 id="添加蜘蛛协议-robots-txt"><a href="#添加蜘蛛协议-robots-txt" class="headerlink" title="添加蜘蛛协议 robots.txt"></a>添加蜘蛛协议 robots.txt</h3><p>robots.txt，代码如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://cuilongjin.top/sitemap.xml</span><br><span class="line">Sitemap: https://cuilongjin.top/baidusitemap.xml</span><br></pre></td></tr></table></figure>

<p>把<code>robots.txt</code>放在你的<code>hexo</code>站点的<code>source</code>文件下即可</p>
<h3 id="给出站链接添加-nofollow-标签"><a href="#给出站链接添加-nofollow-标签" class="headerlink" title="给出站链接添加 nofollow 标签"></a>给出站链接添加 <code>nofollow</code> 标签</h3><h2 id="设置忽略文件渲染"><a href="#设置忽略文件渲染" class="headerlink" title="设置忽略文件渲染"></a>设置忽略文件渲染</h2><p>打开站点配置文件 <code>_config.yml</code> ，修改 <code>skip_render</code> 参数的值</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 路径是相对source目录的</span></span><br><span class="line"><span class="comment"># 不对文件进行渲染，保持文件原有内容</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;*.html&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;demo/**&quot;</span> <span class="string">//</span> <span class="string">排除</span> <span class="string">demo</span> <span class="string">整个目录</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure>

<p>再次使用 hexo d 命令部署博客的时候就不会在渲染这些文件了</p>
<h2 id="添加-google-adsense"><a href="#添加-google-adsense" class="headerlink" title="添加 google adsense"></a>添加 google adsense</h2><p>注册账号 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9hZHNlbnNlL3N0YXJ0Lw==">https://www.google.com/adsense/start/</span></p>
<p>获取代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  ;(adsbygoogle = <span class="variable language_">window</span>.<span class="property">adsbygoogle</span> || []).<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">google_ad_client</span>: <span class="string">&#x27;ca-pub-9068539038073295&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">enable_page_level_ads</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将网站关联到 AdSense</p>
<p>在主题配置文件中添加广告控制开关</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 Google AdSense</span></span><br><span class="line"><span class="attr">google_adsense:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>主题文件夹下找到 &#x2F;layout&#x2F;_partial&#x2F;head.swig 里添加代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.google_adsense %&#125;</span><br><span class="line">  &lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    (adsbygoogle = window.adsbygoogle || []).push(&#123;</span><br><span class="line">      google_ad_client: &quot;ca-pub-9068539038073295&quot;,</span><br><span class="line">      enable_page_level_ads: true</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>重新部署网站</p>
<p>等待审核，审核成功会向你发送邮件</p>
<h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pa2VDb2Rlci9oZXhvLWJsb2ctZW5jcnlwdA==">https://github.com/MikeCoder/hexo-blog-encrypt</span></p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>在 <strong>站点配置文件</strong> 中启用该插件:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章加密 https://github.com/MikeCoder/hexo-blog-encrypt</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认的提示和摘要内容</span></span><br><span class="line">  <span class="attr">default_abstract:</span> <span class="string">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系</span></span><br><span class="line">  <span class="attr">default_message:</span> <span class="string">输入密码，查看文章</span></span><br></pre></td></tr></table></figure>

<p>在需要加密的文章的头部添加上对应的字段，如 password, abstract, message</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">password:</span> <span class="string">该博客加密使用的密码</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">该博客的摘要，会显示在博客的列表页</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">博客查看时，密码输入框上面的描述性文字</span></span><br></pre></td></tr></table></figure>

<p>存在问题</p>
<ul>
<li>字数统计功能字数会显得比实际值大</li>
<li>加密文章内代码复制失效</li>
</ul>
<h2 id="添加评分系统"><a href="#添加评分系统" class="headerlink" title="添加评分系统"></a>添加评分系统</h2><p><span class="exturl" data-url="aHR0cHM6Ly93aWRnZXRwYWNrLmNvbS8=">https://widgetpack.com</span> 注册</p>
<p>获得 id，即为左上角的数字：</p>
<p>主题配置文件中修改</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rating:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span></span><br></pre></td></tr></table></figure>

<p>在侧栏找到 rating 的 setting：推荐将投票方式改为 ip 投票，因为这个平台提供的账号投票基本不面向国内。</p>
<h2 id="添加萌萌哒看板娘"><a href="#添加萌萌哒看板娘" class="headerlink" title="添加萌萌哒看板娘"></a>添加萌萌哒看板娘</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmJpbGwubW9lL2hleG8tbGl2ZTJkLXBvc3Rlci1naXJsLw==">https://blog.bill.moe/hexo-live2d-poster-girl/</span></p>
<h2 id="添加-Hitokoto-一言功能"><a href="#添加-Hitokoto-一言功能" class="headerlink" title="添加 Hitokoto 一言功能"></a>添加 Hitokoto 一言功能</h2><p><span class="exturl" data-url="aHR0cHM6Ly9oaXRva290by5jbi9hcGk=">https://hitokoto.cn/api</span></p>
<h2 id="安装-Hexo-Admin"><a href="#安装-Hexo-Admin" class="headerlink" title="安装 Hexo Admin"></a>安装 Hexo Admin</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-admin</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>然后打开 localhost:4000&#x2F;admin&#x2F;</p>
<p>设置登陆 admin 的用户名和密码，打开<strong><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwL2FkbWluLyMvYXV0aC1zZXR1cA==">http://localhost:4000/admin/#/auth-setup</span></strong></p>
<p>可以直接输入你想要的用户名和密码，把生成的文本复制到 hexo 根目录配置文件中<strong>_config.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-admin authentification</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">  <span class="attr">password_hash:</span> <span class="string">$2a$10$L.XAIqIWgTc5S1zpvV3MEu7/rH34p4Is/nq824smv8EZ3lIPCp1su</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">my</span> <span class="string">super</span> <span class="string">secret</span> <span class="string">phrase</span></span><br></pre></td></tr></table></figure>

<h2 id="主题更新"><a href="#主题更新" class="headerlink" title="主题更新"></a>主题更新</h2><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>

<p>推荐你使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvY24vREFUQS1GSUxFUy5tZA==">Hexo 数据文件</span>特性进行主题配置</p>
<p>目前，通过 pull 或下载新的 release 版本来更新 NexT 主题的体验并不平滑。当用户使用 git pull 更新 NexT 主题时经常需要解决冲突问题，而在手动下载 release 版本时也经常需要手动合并配置</p>
<p>现在来说，NexT 推荐用户存储部分配置在站点的 <code>_config.yml</code> 中，而另一部分在主题的 <code>_config.yml</code> 中。这一方式固然可用，但也有一些缺点</p>
<ul>
<li>配置项被分裂为两部分</li>
<li>用户难以弄清何处存放配置选项</li>
</ul>
<p>为了解决这一问题，NexT 将利用 Hexo 的数据文件特性。因为数据文件是在 Hexo 3 中被引入，所以你需要更新至 Hexo 3.0 以后的版本来使用这一特性。</p>
<p>如果你仍然希望使用 Hexo 2.x，你依旧可以按老的方式进行配置。NexT 仍然兼容 Hexo 2.x（但可能会出现错误）。</p>
<p><strong>带来的好处</strong> 使用这一特性，你现在可以将你的全部配置置于同一位置 <code>(source/_data/next.yml）</code>，并且不需要修改 <code>next/_config.yml</code>。如果在新的 release 中出现了任何新的选项，那么你只需要从 <code>next/_config.yml</code> 中将他们复制到 <code>source/_data/next.yml</code> 中并设置它们的值为你想要的选项。</p>
<p><strong>如何使用这一特性</strong> 请确认你的 Hexo 版本为 3.0 或更高。 在你站点的 <code>hexo/source/_data</code> 目录创建一个 <code>next.yml</code> 文件（如果 <code>_data</code> 目录不存在，请创建之）。 复制你站点的 <code>_config.yml</code> 和主题的 <code>_config.yml</code> 中的 NexT 配置项到 <code>hexo/source/_data/next.yml</code> 中。 使用 <code>--config source/_data/next.yml</code> 参数来启动服务器，生成或部署。 例如：<code>hexo clean --config source/_data/next.yml</code> &amp;&amp; <code>hexo g --config source/_data/next.yml</code> 。</p>
<h3 id="从-NexT-v5-1-x-更新"><a href="#从-NexT-v5-1-x-更新" class="headerlink" title="从 NexT v5.1.x 更新"></a>从 NexT v5.1.x 更新</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvY24vVVBEQVRFLUZST00tNS4xLlgubWQ=">https://github.com/theme-next/hexo-theme-next/blob/master/docs/cn/UPDATE-FROM-5.1.X.md</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 语法</title>
    <url>/426.html</url>
    <content><![CDATA[<h2 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h2><p>待…</p>
<h2 id="Markdown-使用技巧"><a href="#Markdown-使用技巧" class="headerlink" title="Markdown 使用技巧"></a>Markdown 使用技巧</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ul>
<li>方法 1：连续两个以上空格+回车</li>
<li>方法 2：使用 html 语言换行标签：<code>&lt;br&gt;</code></li>
</ul>
<h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><ul>
<li>使用 align 属性</li>
<li>使用<code>&lt;center&gt;</code>标签（HTML5 不支持）</li>
</ul>
<h3 id="首行缩进两个字符"><a href="#首行缩进两个字符" class="headerlink" title="首行缩进两个字符"></a>首行缩进两个字符</h3><ul>
<li><code>&amp;nbsp;</code> 不换行空格，全称 No-Break Space</li>
<li><code>&amp;ensp;</code> 半角的空格，全称是 En Space</li>
<li><code>&amp;emsp;</code> 全角的空格，全称是 Em Space，占据的宽度正好是 1 个中文宽度</li>
</ul>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul>
<li><code>*斜体*或_斜体_</code></li>
<li><code>**粗体**</code></li>
<li><code>***加粗斜体***</code></li>
<li><code>~~删除线~~</code></li>
<li>字号与颜色：使用内嵌 HTML</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0099ff&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>color=#0099ff size=3 face=&quot;黑体&quot;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：<font color=#0099ff size=3 face="黑体">color&#x3D;#0099ff size&#x3D;3 face&#x3D;”黑体”</font></p>
<h3 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h3><p>使用内嵌 HTML 借助 table，tr，td 等表格标签的 bgcolor 属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>背景色是：orange<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：<table><tr><td bgcolor=orange>背景色是：orange</td></tr></table></p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在一行中用三个以上的星号 <code>*</code> 、减号 <code>-</code> 、底线 <code>_</code> 来建立一个分隔线，中间用空格隔开，行内不能有其他东西。（除第一个符号的左侧最多添加三个空格外三个相同符号两侧可以添加任意多个空格）</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><ul>
<li>行内式：<code>[文字](url &quot;title&quot;)</code></li>
<li>参考式：<code>[文字][1]</code> <code>[1]:url &quot;title&quot;</code></li>
<li>自动链接：<code>&lt;url&gt;</code>，将链接用&lt;&gt;包起来，Markdown 会自动把它转成链接。</li>
</ul>
<h3 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h3><ul>
<li>行内式：<code>![alt_text](url &quot;title&quot;)</code></li>
</ul>
<blockquote>
<p><code>alt_text</code>：图片的 alt 标签，用来描述图片的关键词，可以不写。最初的本意是当图片因为某种原因不能被显示时而出现的替代文字，后来又被用于 SEO，可以方便搜索引擎根据 <code>alt_text</code> 里面的关键词搜索到图片。 url：可以是图片的本地地址或者是网址。”title”：鼠标悬置于图片上会出现的标题文字，可以不写。</p>
</blockquote>
<ul>
<li><p>参考式：同上</p>
</li>
<li><p>使用 img 标签：<code>&lt;img src=&quot;&quot; width=&quot;&quot; height=&quot;&quot;&gt;</code>，<code>&lt;div align=center&gt;&lt;/div&gt;</code> 实现居中</p>
</li>
</ul>
<h3 id="折叠按钮"><a href="#折叠按钮" class="headerlink" title="折叠按钮"></a>折叠按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">    点击展开</span><br><span class="line">  <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内部展示内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>

<details>
  <summary>
    点击展开
  </summary>

<p>设置小三角样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">summary</span>::-webkit-details-marker &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#42b983</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwb3JhLmlvLw==">typora</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime 插件、快捷键</title>
    <url>/428.html</url>
    <content><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9wYWNrYWdlY29udHJvbC5pby9wYWNrYWdlcy9TdWJsaW1lJTIwVHV0b3I=">Sublime Tutor</span> ：键盘快捷方式教程<br>Help &gt; Sublime Tutor</p>
</li>
<li><p>AlignTab ：自定义快捷键</p>
</li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li><code>Ctrl + X</code> 如果已经选中文本，则剪切该文本。如果未选中任何文本，则剪切光标所在行</li>
<li><code>Ctrl + Z</code> 撤消</li>
<li><code>Ctrl + Shift + V</code> 缩进粘贴</li>
<li><code>Ctrl + Shift + Z</code> 或 <code>Ctrl + Y</code> 恢复</li>
<li><code>Ctrl + L</code> Select line - Repeat to select next lines</li>
<li><code>Ctrl + D</code> Select word - Repeat select others occurrences</li>
<li><code>Ctrl + Shift + D</code> 如果已经选中文本，则复制该文本。如果未选中任何文本，则复制光标所在行</li>
<li><code>Ctrl + Enter</code> Insert line after</li>
<li><code>Ctrl + Shift + Enter</code> Insert line before</li>
<li><code>Alt + F3</code> 选择所有相同单词的实例</li>
<li><code>Tab</code> 或 <code>Ctrl + ]</code> 缩进</li>
<li><code>Shift + Tab</code> 或 <code>Ctrl + [</code> 取消缩进</li>
<li><code>Ctrl + Shift + K</code> Delete Line</li>
<li><code>Ctrl + KK</code> Delete from cursor to end of line</li>
<li><code>Ctrl + K + Backspace</code> Delete from cursor to start of line</li>
<li><code>Alt + Shift + W</code> 使用标签包裹选中部分</li>
<li><code>Ctrl + ←</code> 移动光标至上一个词</li>
<li><code>Ctrl + →</code> 移动光标至下一个词</li>
<li><code>Ctrl + Shift + ↓</code> Move line&#x2F;selection down</li>
<li><code>Ctrl + Shift + ↑</code> Move line&#x2F;selection up</li>
<li><code>Home</code> 移动光标至行首</li>
<li><code>End</code> 移动光标至行尾</li>
<li><code>Ctrl + Home</code> 移动光标至文档开头</li>
<li><code>Ctrl + End</code> 移动光标至文档结尾</li>
<li><code>Ctrl + M</code> 跳转到左&#x2F;右圆括号、方括号、大括号</li>
<li><code>Ctrl + Shift + M</code> 选择括号内的内容</li>
<li><code>Ctrl + R</code> 跳转到定义</li>
<li><code>Ctrl + /</code> Comment&#x2F;un-comment current line</li>
<li><code>Ctrl + Shift + /</code> Block comment current selection</li>
<li><code>Ctrl + N</code> 新建标签</li>
<li><code>Ctrl + PgUp</code> 向左切换标签</li>
<li><code>Ctrl + PgDn</code> 向右切换标签</li>
<li><code>Ctrl + W</code> 关闭标签</li>
<li><code>Ctrl + Shift + T</code> 重新打开标签</li>
<li><code>Shift + 鼠标右键</code> 竖向选择</li>
<li><code>Ctrl + Shift + &#39;</code> 选择与光标关联的开始和结束标签</li>
<li><code>Ctrl + Shift + A</code> 选择容器内内容</li>
<li><code>Ctrl + Shift + ;</code> 移除与你的光标相关的父标签(清除标记)</li>
<li><code>Ctrl + Shift + Y</code> 计算数学表达式</li>
<li><code>Alt + ↓&amp;↑</code> 以 0.1 的步长改变数字</li>
<li><code>Alt + Shift + ↓&amp;↑</code> 以 10 的步长改变数字</li>
<li><code>Ctrl + ↓&amp;↑</code> 以 1 的步长改变数字</li>
<li><code>Ctrl+K+U</code> <code>Ctrl+K+L</code> 改变大小写</li>
</ul>
<p><span class="exturl" data-url="aHR0cDovL3N1YmxpbWUuZW1wdHlzdGFjay5uZXQv">http://sublime.emptystack.net/</span></p>
<h2 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h2><ol>
<li></li>
</ol>
<blockquote>
<p>“Error: 404 Not Found<br>Sorry, the requested URL ‘<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo1MTAwNC92aWV3LzI5Jw==">http://127.0.0.1:51004/view/29&#39;</span> caused an error:<br>‘buffer_id(29) is not valid (closed or unsupported file format)’<br>NOTE: If you run multiple instances of Sublime Text, you may want to adjust the server_port option in order to get this plugin work again.”</p>
</blockquote>
<p>Quick Fix 1: Remove Strikethrough Extension</p>
<p><code>Sublime Text &gt; Preferences &gt; Package Settings &gt; OmniMarkupPreviewer &gt; Settings - User</code><br>paste the following to remove the strikeout package.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  &#x27;renderer_options-markdownrenderer&#x27;: &#123;</span><br><span class="line">    &quot;extensions&quot;:[<span class="string">&quot;tables&quot;</span>,<span class="string">&quot;fenced_code&quot;</span>,<span class="string">&quot;codehilite&quot;</span>] ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Quick Fix 2: Fix the Strikethrough Extension (if you need it)</p>
<p>Find the python-markdown sublime package.</p>
<p><code>/Packages/OmniMarkupPreviewer/OmniMarkupLib/Renderers/libs/mdx_strikeout.py</code></p>
<p>Replace the makeExtension() method with the following:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeExtension</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> StrikeoutExtension(*args, **kwargs)</span><br><span class="line">Save, quit <span class="keyword">and</span> reload Sublime Text.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 下关于 Transmission daemon 的安装与配置</title>
    <url>/1449.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Transmission 是一个强大的 BitTorrent 开源客户端，<span class="exturl" data-url="aHR0cHM6Ly93d3cudHJhbnNtaXNzaW9uYnQuY29tLw==">官方网站</span>上提供了多个版本可以下载，包括：Mac、GTK+、QT、web 版本。</p>
<p>Transmission 支持 DHT、Magnet Link、uTP 以及 PEX 等特性。尤其是支持 Magnet Link 磁力链接下载十分重要，因为目前网上很多资源都是采用这种方式来分享的，而不是传统的.torrent 文件</p>
<p>在 Ubuntu 的发行版中，Transmission 软件包下面包含多个套件，这些套件的名字很容易搞混淆，它们分别是：</p>
<ul>
<li>transmission-gtk: GTK+界面的 Transmission BT 客户端。</li>
<li>transmission-qt: QT 界面的 Transmission BT 客户端。</li>
<li>transmission-cli: 命令行界面的 Transmission BT 客户端，与 QT、GTK+版本功能一样，是命令行下一个完备的 BT 客户端。</li>
<li>transmission-daemon: 是一个 Transmission 的后台守护程序，本身不具备操作指令，只能通过 Web 客户端或者 transmission-remote-cli 来进行控制。这个程序特别适合安装在服务器上或者嵌入式系统中，以及一些没有显示器的设备上。</li>
<li>transmission-remote-cli: 用来控制 transmission-daemon 的命令套件，本身不具备下载 BT 的功能，只能够配合 daemon 使用。</li>
</ul>
<p>这些套件不必都安装上，根据我的需求，只需要安装 transmission-daemon 即可</p>
<h3 id="Transmission-的安装"><a href="#Transmission-的安装" class="headerlink" title="Transmission 的安装"></a>Transmission 的安装</h3><p>打开终端，输入以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install transmission-daemon</span><br></pre></td></tr></table></figure>

<p>安装过程中会顺带把 transmission-cli 也安装上，安装完毕后系统会多出如下一些命令行工具</p>
<ul>
<li>transmission-cli： 独立的命令行客户端。</li>
<li>transmission-create： 用来建立.torrent 种子文件的命令行工具。</li>
<li>transmission-daemon： 后台守护程序。</li>
<li>transmission-edit： 用来修改.torrent 种子文件的 announce URL。</li>
<li>transmission-remote： 控制 daemon 的程序。</li>
<li>transmission-show：查看.torrent 文件的信息。</li>
</ul>
<p>安装好后，Transmission-daemon 有一些默认设置(<span class="exturl" data-url="aHR0cHM6Ly90cmFjLnRyYW5zbWlzc2lvbmJ0LmNvbS93aWtpL1VuaXhTZXJ2ZXIvRGViaWFu">参考链接</span>)。</p>
<p>默认配置目录清单</p>
<p>启动初始化脚本 &#x2F;etc&#x2F;init.d&#x2F;transmission-daemon<br>基本配置文件 &#x2F;etc&#x2F;default&#x2F;transmission-daemon<br>详细配置文件目录 &#x2F;var&#x2F;lib&#x2F;transmsision-daemon&#x2F;info&#x2F;settings.json<br>下载存储目录 &#x2F;var&#x2F;lib&#x2F;transmission-daemon&#x2F;downloads</p>
<p>settings.json： 主要的配置文件，设置 daemon 的各项参数，包括 RPC 的用户名密码配置。它实际上是一个符号链接，指向的原始文件是&#x2F;etc&#x2F;transmission-daemon&#x2F;settings.json。里面的参数解释可以参考官网的配置说明。<br>torrents&#x2F;： 用户存放.torrent 种子文件的目录,凡是添加到下载任务的种子，都存放在这里。.torrent 的命名包含,种子文件本身的名字和种子的 SHA1 HASH 值。<br>resume&#x2F;： 存放了.resume 文件，.resume 文件包含了一个种子的信息，例如该文件哪些部分被下载了，下载的数据存储的位置等等。<br>blocklists&#x2F;： 存储被屏蔽的 peer 的地址。<br>dht.dat： 存储 DHT 节点信息。</p>
<p>如果使用另外一个用户来运行 transmission-daemon 的话，会在该用户的目录下，创建一个.config&#x2F;transmission-daemon 的文件夹，配置目录 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RyYW5zbWlzc2lvbi90cmFuc21pc3Npb24vd2lraS9Db25maWd1cmF0aW9uLUZpbGVz">https://github.com/transmission/transmission/wiki/Configuration-Files</span></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo service transmission-daemon start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">sudo service transmission-daemon stop</span><br></pre></td></tr></table></figure>

<h3 id="Transmission-的配置"><a href="#Transmission-的配置" class="headerlink" title="Transmission 的配置"></a>Transmission 的配置</h3><p>配置主要是通过修改&#x2F;var&#x2F;lib&#x2F;transmission-daemon&#x2F;info&#x2F;settings.json 文件中的参数来实现的。<br>注意：在编辑 Transmission 的配置文件的时候，需要先关闭 daemon 进程，否则编辑的参数将会被恢复到原来的状态。</p>
<h4 id="配置-RPC"><a href="#配置-RPC" class="headerlink" title="配置 RPC"></a>配置 RPC</h4><p>最关键的就是要配置 RPC，因为无论是 Web 界面还是 CLI 都是通过 RPC 协议和 daemon 来进行交互的。</p>
<p>打开文件&#x2F;var&#x2F;lib&#x2F;transmission-daemon&#x2F;info&#x2F;settings.json，修改配置参数如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rpc-authentication-required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rpc-bind-address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rpc-enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rpc-host-whitelist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// rpc 主机白名单</span></span><br><span class="line">  <span class="attr">&quot;rpc-host-whitelist-enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//rpc 主机白名单是否开启，若需要任意主机都能访问，建议false</span></span><br><span class="line">  <span class="attr">&quot;rpc-password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rpc-port&quot;</span><span class="punctuation">:</span> <span class="number">9091</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rpc-url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/transmission/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rpc-username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;transmission&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rpc-whitelist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span> <span class="comment">// rpc 主机白名单</span></span><br><span class="line">  <span class="attr">&quot;rpc-whitelist-enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">//rpc 主机白名单是否开启，若需要任意主机都能访问，建议false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我将用户名设置为了 transmission，密码设置为了 123456，whitelist 设置成了”*”，表示任何 IP 都可以通过 RPC 协议访问这个 daemon。需要注意的是 password 设置成了明文。当启动 daemon 之后，daemon 会自动检测密码设置。如果发现密码配置被修改了，daemon 会自动计算修改后的密码的 HASH 值，并用这个 HASH 值替换掉配置文件中的明文密码，这样会更安全。</p>
<p>输入<code>service transmission-daemon start</code>启动程序后，打开 settings.json，会看到 rpc-password 一项被改为了 HASH 值。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rpc-password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;5f4bd5498bddd9aa2ad8f4d475dcebe23e9d8c8bsorspnUE&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>settings.json 里面还有很多参数可以配置，包括上传&#x2F;下载速度的限制、DHT 的配置、端口设置等等，详细的参数解释可以参考<span class="exturl" data-url="aHR0cHM6Ly90cmFjLnRyYW5zbWlzc2lvbmJ0LmNvbS93aWtpL0VkaXRDb25maWdGaWxlcw==">官网的配置说明</span></p>
<h3 id="使用-Web-界面控制-Transmission-daemon"><a href="#使用-Web-界面控制-Transmission-daemon" class="headerlink" title="使用 Web 界面控制 Transmission daemon"></a>使用 Web 界面控制 Transmission daemon</h3><p>经过上述配置后，我们就可以通过 Web 界面来访问和控制 Transmission daemon 了。在浏览器里面输入以下地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:9091/transmission/web/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>浏览器提示你输入刚才配置的用户名和密码，就可以成功登陆 Web 管理界面。界面和桌面版的 GUI 程序有点像，操作起来很方便。</p>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>在本机使用 <code>http://&lt;your.server.ip.addr&gt;:9091/transmission/web/</code> 访问出现 403:Forbidden 解决<br>修改配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rpc-whitelist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rpc-whitelist-enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>将 <code>rpc-whitelist</code>设置为 <code>&quot;*&quot;</code>或将 <code>rpc-whitelist-enabled</code> 设置为 <code>false</code></p>
<p>在局域网其他机器上使用 <code>http://&lt;your.server.ip.addr&gt;:9091/transmission/web/</code> 访问时无法访问解决<br>修改配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rpc-host-whitelist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// rpc 主机白名单</span></span><br><span class="line">  <span class="attr">&quot;rpc-host-whitelist-enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">//rpc 主机白名单是否开启，若需要任意主机都能访问，建议false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>将 <code>rpc-host-whitelist</code>设置为 <code>&quot;*&quot;</code>或将 <code>rpc-host-whitelist-enabled</code> 设置为 <code>false</code></p>
<p>原始界面，没有汉化，也比较简单，可以使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbmdnYW5nL3RyYW5zbWlzc2lvbi13ZWItY29udHJvbA==">transmission-web-control</span> 加强 Transmission Web 的操作能力</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -N  https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh</span><br><span class="line">bash install-tr-control-cn.sh</span><br></pre></td></tr></table></figure>

<p>安装完成之后刷新浏览器即可看到新的 ui，如果没有看到可能是浏览器缓存，ctrl + f5 强制刷新一下，如果还是没有看到，<br>可以尝试使用 root 用户运行</p>
<p>或尝试使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash install-tr-control-cn.sh /usr/share/transmission</span><br></pre></td></tr></table></figure>

<p>&#x2F;usr&#x2F;share&#x2F;transmission 为 Transmission Web 所在目录</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>UsbEAm Hosts Editor [多平台 hosts 修改] V3.50</title>
    <url>/1853.html</url>
    <content><![CDATA[<p>UsbEAm Hosts Editor 是一款能够提升 origin、steam、uplay 等游戏平台下载速度的工具，同时也可以有效的解决一些游戏或者平台出现的各种网络错误，帮玩家能够顺利的登录平台，顺利进行游戏。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203606.png"></p>
<p>UsbEAm Hosts Editor 还可以为 github 加速，提高网页浏览的速度和代码下载的速度</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203624.png"></p>
<p>使用方法：</p>
<ul>
<li><p>点击左下角的游戏手柄（或者点击鼠标右键），弹出菜单</p>
</li>
<li><p>在弹出的菜单上选择要检测的项目。里面包含了多个流行的游戏平台，每个平台还有下载、浏览等子菜单</p>
</li>
<li><p>接着会出现一大堆 IP，先别急着去用，先点击 <code>检测延迟</code>，然后选择延迟最低的地址，点击应用选中即可</p>
</li>
<li><p>也可以点击 <code>编辑Hosts</code>，手工对 Hosts 进行编辑</p>
</li>
</ul>
<p>如果某些安全软件弹出阻止情况，请忽略放过，不然无法修改</p>
<p>软件下载</p>
<p>百度云：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUNZTkVicXhrSC04dnpkeFdET09FMmc=">https://pan.baidu.com/s/1CYNEbqxkH-8vzdxWDOOE2g</span> 提取码：p1ee</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>hosts</tag>
      </tags>
  </entry>
  <entry>
    <title>Window 10 下终端配置与美化</title>
    <url>/2017.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC13aW4xMA==">WSL</span> &#x2F; <span class="exturl" data-url="aHR0cHM6Ly93d3cubXN5czIub3JnLw==">MSYS2</span> &#x2F; <span class="exturl" data-url="aHR0cDovL3d3dy5jeWd3aW4uY29tLw==">Cygwin</span> &#x2F; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbC9yZWxlYXNlcw==">PowerShell7</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZlbGl4c2UvRmx1ZW50VGVybWluYWwvcmVsZWFzZXM=">Fluent Terminal</span> &#x2F; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC90ZXJtaW5hbC9yZWxlYXNlcw==">Windows Terminal</span></p>
<h2 id="WSL-配置-zsh"><a href="#WSL-配置-zsh" class="headerlink" title="WSL 配置 zsh"></a>WSL 配置 zsh</h2><p>wsl 下 git clone 报错：GnuTLS recv error (-110): The TLS connection was non-properly terminated.</p>
<h3 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install -y zsh</span><br></pre></td></tr></table></figure>

<h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果无法安装，使用下面这种方式</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh@master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>插件列表 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvb2hteXpzaC93aWtpL1BsdWdpbnM=">https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtc3ludGF4LWhpZ2hsaWdodGluZw==">zsh-syntax-highlighting</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z">zsh-autosuggestions</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N1a2thVy96c2gtcHJveHk=">zsh-proxy</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 zsh-syntax-highlighting 插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 zsh-autosuggestions 插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/sukkaw/zsh-proxy.git ~/.oh-my-zsh/custom/plugins/zsh-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 zsh-proxy 插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/sukkaw/zsh-proxy.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-proxy</span><br></pre></td></tr></table></figure>

<p>修改 ~&#x2F;.zshrc，在 plugins 中添加 zsh-syntax-highlighting</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 ~/.zshrc</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 plugins 后括号里添加安装的插件名字</span></span><br><span class="line">plugins=(git zsh-syntax-highlighting zsh-autosuggestions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新下配置</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N1a2thVy96c2gtcHJveHk=">zsh-proxy</span></p>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvb2hteXpzaC93aWtpL3RoZW1lcw==">主题列表</span></p>
<p>推荐两款主题</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9wdXJlLw==">pure主题</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Fnbm9zdGVyL2Fnbm9zdGVyLXpzaC10aGVtZQ==">agnoster</span></p>
<h2 id="PowerShell-7-配置-oh-my-posh-amp-posh-git"><a href="#PowerShell-7-配置-oh-my-posh-amp-posh-git" class="headerlink" title="PowerShell 7+ 配置 oh-my-posh &amp; posh-git"></a>PowerShell 7+ 配置 oh-my-posh &amp; posh-git</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzc1OTU5NDE=">https://zhuanlan.zhihu.com/p/137595941</span><br><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzcyNTE3MTY=">https://zhuanlan.zhihu.com/p/137251716</span></p>
<h4 id="安装-Fira-Code-字体"><a href="#安装-Fira-Code-字体" class="headerlink" title="安装 Fira Code 字体"></a>安装 Fira Code 字体</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvbnNreS9GaXJhQ29kZS9yZWxlYXNlcw==">Fira Code</span></p>
]]></content>
      <tags>
        <tag>zsh</tag>
        <tag>oh-my-zsh</tag>
        <tag>Fluent Terminal</tag>
        <tag>Windows Terminal</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>临时邮箱手机号</title>
    <url>/232.html</url>
    <content><![CDATA[<p>用于注册临时账号，保护隐私</p>
<p>临时邮箱</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iY2N0by5tZS8=">https://bccto.me/</span><br><span class="exturl" data-url="aHR0cHM6Ly8xMG1pbnV0ZW1haWwubmV0Lw==">https://10minutemail.net/</span><br><span class="exturl" data-url="aHR0cDovLzI0bWFpbC5jaGFjdW8ubmV0Lw==">http://24mail.chacuo.net/</span><br><span class="exturl" data-url="aHR0cDovL3d3dy55b3BtYWlsLmNvbS96aC8=">http://www.yopmail.com/zh/</span><br><span class="exturl" data-url="aHR0cHM6Ly9zaG9ydHRpbWVtYWlsLmNvbS96aC1IYW5zLw==">https://shorttimemail.com/zh-Hans/</span><br><span class="exturl" data-url="aHR0cHM6Ly90ZW1wLW1haWwub3JnL3poLw==">https://temp-mail.org/zh/</span><br><span class="exturl" data-url="aHR0cHM6Ly90Lm9kbWFpbC5jbi8=">https://t.odmail.cn/</span><br><span class="exturl" data-url="aHR0cHM6Ly85ZW0ub3JnLw==">https://9em.org/</span><br><span class="exturl" data-url="aHR0cHM6Ly9tYWlsZHJvcC5jYy8=">https://maildrop.cc</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9lc2tpaW1vLmNvbS8=">https://eskiimo.com</span> 匿名发送邮件</p>
<p>短信验证码平台</p>
<p>国内平台<br><span class="exturl" data-url="aHR0cHM6Ly93d3cucGRmbGlici5jb20v">https://www.pdflibr.com</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cudmlzaXRvcnNtcy5jb20vY24=">https://www.visitorsms.com/cn</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmVjbWQuY29tLw==">https://www.becmd.com</span><br><span class="exturl" data-url="aHR0cDovL3d3dy4xMTRzaW0uY29tLw==">http://www.114sim.com</span><br><span class="exturl" data-url="aHR0cHM6Ly95dW5kdWFueGluLm5ldC8=">https://yunduanxin.net</span><br><span class="exturl" data-url="aHR0cDovL3d3dy5zbXN6ay5jb20v">http://www.smszk.com</span><br><span class="exturl" data-url="aHR0cDovL3otc21zLmNvbS8=">http://z-sms.com</span><br><span class="exturl" data-url="aHR0cDovL3d3dy5zaGVqaWlubi5jb20v">http://www.shejiinn.com</span><br><span class="exturl" data-url="aHR0cHM6Ly9zbXMuY25ncm9rLmNvbS8=">https://sms.cngrok.com</span></p>
<p>国外平台</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jaC5mcmVlcGhvbmVudW0uY29tLw==">https://ch.freephonenum.com</span><br><span class="exturl" data-url="aHR0cHM6Ly9zbXNyZWNlaXZlZnJlZS5jb20v">https://smsreceivefree.com</span><br><span class="exturl" data-url="aHR0cHM6Ly96aC5teXRyYXNobW9iaWxlLmNvbS8=">https://zh.mytrashmobile.com</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVjZWl2ZS1zbXMtb25saW5lLmluZm8v">https://www.receive-sms-online.info</span><br><span class="exturl" data-url="aHR0cHM6Ly9yZWNlaXZlYXNtcy5jb20v">https://receiveasms.com</span><br><span class="exturl" data-url="aHR0cHM6Ly9zbXMtb25saW5lLmNvL3JlY2VpdmUtZnJlZS1zbXM=">https://sms-online.co/receive-free-sms</span><br><span class="exturl" data-url="aHR0cHM6Ly9yZWNlaXZlLXNtcy5jb20v">https://receive-sms.com</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>优秀的命令行工具</title>
    <url>/2012.html</url>
    <content><![CDATA[<p>tldr<br>快速查看命令的使用示例</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g tldr</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看git的使用示例</span></span><br><span class="line">tldr git</span><br></pre></td></tr></table></figure>

<p>thefuck<br>快速修正命令行手误</p>
]]></content>
  </entry>
  <entry>
    <title>使用 github actions 将 github 项目自动同步到 gitee 并自动部署 Gitee Pages</title>
    <url>/2023.html</url>
    <content><![CDATA[<p>由于 github Pages 和 netlify 的访问速度慢，所以现在将博客部署到 Gitee Pages</p>
<p>先使用 wearerequired&#x2F;git-mirror-action 将 GitHub 仓库同步到 Gitee 仓库，再使用 yanglbme&#x2F;gitee-pages-action 实现 Gitee Pages 的自动部署。</p>
<h3 id="配置秘钥"><a href="#配置秘钥" class="headerlink" title="配置秘钥"></a>配置秘钥</h3><ul>
<li><p>使用命令 <code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 生成 SSH Key(⚠️注意此处不要设置密码)</p>
</li>
<li><p>在 GitHub 项目的「​Settings -&gt; Secrets」路径下配置好命名为 <code>GITEE_RSA_PRIVATE_KEY</code> 和 <code>GITEE_PASSWORD</code> 的两个密钥。其中：<code>GITEE_RSA_PRIVATE_KEY</code> 存放 <code>id_rsa</code> 私钥；<code>GITEE_PASSWORD</code> 存放 <code>Gitee</code> 帐号的密码</p>
</li>
<li><p>在 GitHub 的个人设置页面「Settings -&gt; SSH and GPG keys」​ 配置 SSH 公钥（即：id_rsa.pub），命名随意</p>
</li>
<li><p>在 Gitee 的个人设置页面「安全设置 -&gt; SSH 公钥」​ 配置 SSH 公钥（即：id_rsa.pub），命名随意</p>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">main</span>, <span class="string">gh-pages</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">git@github.com:cuilongjin/hexo-blog.git</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">git@gitee.com:cuilongjin/hexo-blog.git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">cuilongjin</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">cuilongjin/hexo-blog</span></span><br><span class="line">          <span class="comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>github actions</tag>
        <tag>github pages</tag>
        <tag>gitee pages</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 github 仓库作为图床，并用 jsDelivr 加速</title>
    <url>/2007.html</url>
    <content><![CDATA[<h2 id="github-JSDelivr"><a href="#github-JSDelivr" class="headerlink" title="github+JSDelivr"></a>github+JSDelivr</h2><ol>
<li><p>创建一个仓库来存储需要存放的静态资源</p>
</li>
<li><p>使用JSDelivr加速加载Github资源</p>
</li>
</ol>
<p>形式为 <code>https://cdn.jsdelivr.net/gh/&#123;Github用户名&#125;/&#123;Github仓库名&#125;@&#123;版本名&#125;/&#123;仓库下资源路径&#125;</code></p>
<p>其中版本名可以是当前仓库的 Release 或分支名</p>
<p>例如 github 链接为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/cuilongjin/static/blob/main/test.txt</span><br></pre></td></tr></table></figure>

<p>则使用JSDelivr加速链接为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/cuilongjin/static@img/test.txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用 picgo 进行图片上传</li>
</ol>
<blockquote>
<p>picgo 一款图片上传的工具，目前支持SM.MS图床，七牛图床，腾讯云COS，阿里云OSS，Imgur，又拍云，GitHub等图床<br>github地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dv">https://github.com/Molunerfinn/PicGo</span><br>配置手册：<span class="exturl" data-url="aHR0cHM6Ly9waWNnby5naXRodWIuaW8vUGljR28tRG9jL3poL2d1aWRlLw==">https://picgo.github.io/PicGo-Doc/zh/guide/</span><br>插件：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BpY0dvL0F3ZXNvbWUtUGljR28=">https://github.com/PicGo/Awesome-PicGo</span></p>
</blockquote>
<p>配置 github图床</p>
<p>仓库名为第一步创建的仓库，分支名随意，我的为 main<br>token 获取地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2VucyVFRiVCQyU4QyVFNyU4MiVCOSVFNSU4NyVCQg==">https://github.com/settings/tokens，点击</span> <code>Generate new token</code> ,复选框为你这个 token 的权限，勾选 <code>repo</code> 即可<br>存储路径为仓库目录，可以随意<br>自定义域名根据需要设置，这里我们设置为 jsdelivr 加速域名，形式为 <code>https://cdn.jsdelivr.net/gh/&#123;Github用户名&#125;/&#123;Github仓库名&#125;@&#123;版本名&#125;</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210101223210.png"></p>
<h2 id="使用-npm-JSDelivr"><a href="#使用-npm-JSDelivr" class="headerlink" title="使用 npm+JSDelivr"></a>使用 npm+JSDelivr</h2><p>需要将当前仓库发布为npm包</p>
<p>去 npm 官网注册个账号去,然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<p>如果你的包名为 <code>@your-name/your-package</code> 时需要 <code>--access public</code> 参数，原因是当包名以 <code>@your-name</code> 开头时，<code>npm publish</code> 会默认发布为私有包，但是 npm 的私有包需要付费</p>
<p>请注意，如果你之前用过淘宝镜像，那么请先手动切回官方源 <code>npm config set registry https://registry.npmjs.org</code></p>
<p>发布成功之后，可以通过以下方式访问文件</p>
<p><code>https://cdn.jsdelivr.net/npm/(yourpackagename)@(version)/(file)</code></p>
<blockquote>
<p>其他一些镜像</p>
<p>unpkg <span class="exturl" data-url="aHR0cHM6Ly93d3cudW5wa2cuY29tLw==">https://www.unpkg.com</span><br>知乎出品 <span class="exturl" data-url="aHR0cHM6Ly91bnBrZy56aGltZy5jb20v">https://unpkg.zhimg.com/</span><br>百度 <span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmJkc3RhdGljLmNvbS9ucG0v">https://code.bdstatic.com/npm/</span><br>饿了么 <span class="exturl" data-url="aHR0cHM6Ly9zaGFkb3cuZWxlbWVjZG4uY29tL25wbS8=">https://shadow.elemecdn.com/npm/</span></p>
</blockquote>
<p>当文件有更新时，需要更新发布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除指定的版本</span></span><br><span class="line">npm unpublish 包名@版本号</span><br><span class="line"><span class="comment"># 重新发布</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<p>配置 github action 自动发布</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">npm</span> <span class="string">Package</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish-npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2.1.2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">unpublish</span> <span class="string">@cuilongjin/static@1.0.0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;secrets.npm_token&#125;&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>图床</tag>
        <tag>jsDelivr</tag>
      </tags>
  </entry>
  <entry>
    <title>全网视频万能解析工具、视频下载工具 -- youtube-dl，CR TubeGet，Allavsoft</title>
    <url>/1802.html</url>
    <content><![CDATA[<h3 id="youtube-dl-–-一款犀利的全网视频下载利器"><a href="#youtube-dl-–-一款犀利的全网视频下载利器" class="headerlink" title="youtube-dl – 一款犀利的全网视频下载利器"></a>youtube-dl – 一款犀利的全网视频下载利器</h3><p>github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3l0ZGwtb3JnL3lvdXR1YmUtZGw=">https://github.com/ytdl-org/youtube-dl</span></p>
<p>下载：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3l0ZGwtb3JnL3lvdXR1YmUtZGwvcmVsZWFzZXM=">https://github.com/ytdl-org/youtube-dl/releases</span></p>
<h3 id="CR-TubeGet-基于-youtube-dl-封装并做功能扩展的一款视频下载软件"><a href="#CR-TubeGet-基于-youtube-dl-封装并做功能扩展的一款视频下载软件" class="headerlink" title="CR TubeGet 基于 youtube-dl 封装并做功能扩展的一款视频下载软件"></a>CR TubeGet 基于 youtube-dl 封装并做功能扩展的一款视频下载软件</h3><p>CR TubeGet 功能：<br>1、支持 2000+站点视频下载，支持 YouTube、BiliBili 等主流视频站点<br>2、支持下载脚本扩展，加入 youtube-dl 不支持的站点下载<br>3、支持 200+播放列表，甚至搜索引擎(google、bing、baidu、yahoo、yandex、ask)之视频搜索列表，支持自定义视频列表<br>4、支持 YouTube 8k 分辨率，支持 Mp3 等音频下载，支持批量下载<br>5、支持视频 URL、文本文件拖放下载，支持剪切板视频 URL 监测功能<br>7、内置视频页面支持快捷下载<br>8、支持 aria2 下载器加速下载，支持 annie、you-get 下载组件<br>9、支持视频格式无损转换、字幕烧录</p>
<p>下载地址</p>
<p>v0.9.2.4 版起，未注册版本只能下载 99 个视频<br>如果希望继续使用免费版本，请下载 v0.9.2.3 版，该没有任何功能上的限制，有着视频下载的基本功能，若您下载油管及 B 站，相信其功能可以满</p>
<p>软件发布官网：<span class="exturl" data-url="aHR0cDovL3d3dy5jci1zb2Z0Lm5ldC8=">http://www.cr-soft.net/</span></p>
<p>百度云：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUVfZkdESGhHS243c1dDRXQ3Zk10R1E=">https://pan.baidu.com/s/1E_fGDHhGKn7sWCEt7fMtGQ</span> 提取码：m3fk</p>
<h3 id="Allavsoft"><a href="#Allavsoft" class="headerlink" title="Allavsoft"></a>Allavsoft</h3><p>Allavsoft 视频下载器，是一个流行的快速在线视频下载和转换器，可将下载的视频转换为几乎所有流行的视频和音频格式。作为一款国外的软件，支持非常多的国内视频网站下载，包括但不限于优酷、土豆、爱奇艺等，更多支持网站请点击 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxsYXZzb2Z0LmNvbS9ob3ctdG8vaW5kZXguaHRtbA==">这里</span> 进行查看。</p>
<p>破解教程 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2ODU2MzE2MTEv">https://www.bilibili.com/video/av85631611/</span></p>
<p>下载地址</p>
<p>百度云：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVZ3R0Njc3N4T3ZuLVU0R1dGZWM5S1E=">https://pan.baidu.com/s/1VwGCcssxOvn-U4GWFec9KQ</span> 提取码：5r2x</p>
<h3 id="硕鼠下载"><a href="#硕鼠下载" class="headerlink" title="硕鼠下载"></a>硕鼠下载</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5mbHZjZC5jb20v">http://www.flvcd.com/</span></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>如何注册美区 PayPal 并绑定美区 Apple ID，以及风控的解决方案</title>
    <url>/234.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cDovL2pvbHNvbi54eXovMjAxOC8xMS8yMi9yZWctdXMtcHAv">原文</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>开启 windows 下 Ubuntu 子系统的 SSH 服务</title>
    <url>/1503.html</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载openssh-client</span></span><br><span class="line">sudo apt-get remove openssh-client <span class="comment"># 卸载openssh-client并重新安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ssh服务</span></span><br><span class="line">sudo apt-get install ssh</span><br><span class="line"><span class="comment"># 理论上包含了 openssh-server 和客户端 openssh-client，如果安装出现异常，请独立安装这两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">Port = 22 <span class="comment"># 默认是22端口，如果和windows端口冲突或你想换成其他的否则不用动</span></span><br><span class="line"><span class="comment">#ListenAddress 0.0.0.0 # 如果需要指定监听的IP则去除最左侧的井号，并配置对应IP，默认即监听PC所有IP</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span> <span class="comment"># 如果你需要用 root 直接登录系统则此处改为 yes</span></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span> <span class="comment"># 将 no 改为 yes 表示使用帐号密码方式登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 ssh 服务</span></span><br><span class="line">service ssh start</span><br><span class="line"><span class="comment"># sudo /etc/init.d/ssh start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 ssh 状态</span></span><br><span class="line">service ssh status</span><br></pre></td></tr></table></figure>

<blockquote>
<p>局域网内的其他终端无法连接: 不要忘了，还要配置防火墙开启端口才能被其他 PC 访问</p>
</blockquote>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>ubuntu</tag>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>斐讯K2P、K2路由器刷机</title>
    <url>/478.html</url>
    <content><![CDATA[<h3 id="PADAVAN（老毛子）固件"><a href="#PADAVAN（老毛子）固件" class="headerlink" title="PADAVAN（老毛子）固件"></a>PADAVAN（老毛子）固件</h3><p><strong>H大固件地址</strong>：<span class="exturl" data-url="aHR0cDovL29wdC5jbjJxcS5jb20vcGFkYXZhbi8=">http://opt.cn2qq.com/padavan/</span></p>
<p>k2路由器下载 <code>RT-AC54U-GPIO-1-PSG1218-64M**.trx</code> 文件</p>
<p>K2P各固件的区别，供大家参考：<br>K2P_V5_3.4.3.9-099.trx        这是K2P的MTK平台原版未改版最新v5.0无线驱动固件<br>K2P_DRV_V5_3.4.3.9-099.trx    这是K2P的MTK平台硬改USB最新v5.0无线驱动固件<br>K2P_DRV_512M_3.4.3.9-099.trx  这是K2P的MTK平台硬改512MB内存(RAM)和USB稳定v4.0无线驱动固件<br>K2P_DRV_256M_3.4.3.9-099.trx  这是K2P的MTK平台硬改256MB内存(RAM)和USB稳定v4.0无线驱动固件<br>K2P_DRV_3.4.3.9-099.trx       这是K2P的MTK平台硬改USB稳定v4.0无线驱动固件<br>K2P_3.4.3.9-099.trx           这是K2P的MTK平台原版未改版稳定v4.0无线驱动固件</p>
<p>管理地址：192.168.123.1<br>管理账号：admin<br>管理密码：admin</p>
<p><strong>HANWCKF固件地址</strong> <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWtVOFlxckg=">https://pan.baidu.com/s/1kU8YqrH</span>  提取码: hmdn</p>
<p>k2p 源码 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhbndja2YvcnQtbjU2dQ==">https://github.com/hanwckf/rt-n56u</span></p>
<p><strong>灯大固件</strong>：<span class="exturl" data-url="aHR0cDovL3JvbS5uYW5vZG0ubmV0Lw==">http://rom.nanodm.net/</span></p>
<p><strong>waynezwd的固件地址</strong>：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUt2bFdsNEhyMUR3WTJOME54Z3plQkE=">https://pan.baidu.com/s/1KvlWl4Hr1DwY2N0NxgzeBA</span> 提取码: w5e8</p>
<h3 id="高恪免费路由固件"><a href="#高恪免费路由固件" class="headerlink" title="高恪免费路由固件"></a>高恪免费路由固件</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5nb2Nsb3VkLmNuL2Jicy9mb3J1bS01MS0xLmh0bWw=">http://www.gocloud.cn/bbs/forum-51-1.html</span></p>
<h3 id="lede"><a href="#lede" class="headerlink" title="lede"></a>lede</h3><p>OpenWrt 固件 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nvb2xzbm93d29sZi9sZWRl">https://github.com/coolsnowwolf/lede</span></p>
<p>魔改固件下载 <span class="exturl" data-url="aHR0cDovL2xlYW4ueXMxNjguY29tLw==">http://lean.ys168.com/</span></p>
<h3 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmlnaHQuY29tLmNuL2ZvcnVtL2ZvcnVtLnBocA==">https://www.right.com.cn/forum/forum.php</span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5nb2Nsb3VkLmNuL2Jicy9mb3J1bS5waHA=">http://www.gocloud.cn/bbs/forum.php</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>斐讯</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器中图片另存为时默认保存为jfif格式问题</title>
    <url>/660.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9qZmlm">jfif（JPEG File Interchange Format，JPEG 档案交换格式）</span>格式是一种图片存储格式之一，由 JPEG 格式衍生而来</p>
<p>win10 中，在浏览器中通过图片另存为时发现默认保存为该格式时，说明系统把 JPEG 格式默认为了该格式，可以通过修改注册表还原，具体操作步骤如下：</p>
<ul>
<li><code>WIN</code> + <code>R</code> 打开运行窗口，输入 <code>regedit</code> 回车</li>
<li>找到路径 <code>HKEY_CLASSES_ROOT\MIME\Database\Content Type\image/jpeg</code>，把 <code>extension</code> 的值改成 .jpg，关闭注册表即可</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>用 tMM 刮削影片信息，让 KODI、Jellyfin、PLEX、使用本地媒体电影墙！</title>
    <url>/1469.html</url>
    <content><![CDATA[<p>当使用 pt 或者各种 bt 网站，下载了很多电影以后，使用 NAS 上的 plex 或者 jellyfin 刮削不出来海报怎么办？</p>
<p>而今天就将推荐大家使用这款 tinyMediaManager 软件，该软件功能非常强大，可以刮削电影、电影系列、电视剧等，还可以重建nfo文件和批量重名文件、文件夹。支持Win&#x2F;Mac&#x2F;Linux。通过他自动匹配家里的电影资源库，让自己的，不论 KODI，还是 jellyfin，还是 emby、plex 都能用上完美的电影墙！</p>
<h2 id="windows-下使用"><a href="#windows-下使用" class="headerlink" title="windows 下使用"></a>windows 下使用</h2><h3 id="下载和安装-tinyMediaManager"><a href="#下载和安装-tinyMediaManager" class="headerlink" title="下载和安装 tinyMediaManager"></a>下载和安装 tinyMediaManager</h3><p>下载地址 <span class="exturl" data-url="aHR0cHM6Ly93d3cudGlueW1lZGlhbWFuYWdlci5vcmcvZG93bmxvYWQv">https://www.tinymediamanager.org/download/</span></p>
<p>如果提示需要 java 环境，下载安装即可</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>打开软件</p>
<p>当提示设置影片档案文件夹时，可以先不添加，直接下一步</p>
<p>当提示元数据刮削的时候，选择 <code>themoviedb.org</code>，不管是电影和电视剧都选他即可</p>
<p>打开设置，添加电影和电视剧目录，其他默认</p>
<p>设置好了以后，点击更新</p>
<p>全选已添加的影片信息，点击右键，搜索并刮削所选电影 - 自动匹配：会自动下载封面和影片信息</p>
<p>其中有可能遇到需要您手动搜索的影片，手动搜索一下中文名字即可</p>
<p>当影片完全搜索不出来的时候，也可以到豆瓣电影里面搜索一下这个影片，记住它的 imdb 链接的后面一串数字，比如：tt7286456</p>
<p>直接搜索这个序列号，也是可以获取影片资料的</p>
<p>电视剧的搜索方式和电影的搜索方式是一模一样的，而且电视剧会将每一集都进行信息整理和分类</p>
<p>全部更新完毕后，可以看到影片的文件夹里观看，下载了 nfo 影片信息，海报封面图，logo 等</p>
<h2 id="linux-下使用"><a href="#linux-下使用" class="headerlink" title="linux 下使用"></a>linux 下使用</h2><p>使用docker安装</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL3JvbWFuY2luL3RpbnltZWRpYW1hbmFnZXI=">https://hub.docker.com/r/romancin/tinymediamanager</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull romancin/tinymediamanager</span><br><span class="line"></span><br><span class="line">docker run -d --name=tinymediamanager \</span><br><span class="line">-v /share/Container/tinymediamanager/config:/config \</span><br><span class="line">-v /home/gdrive:/media \</span><br><span class="line">-e GROUP_ID=0 -e USER_ID=0 -e TZ=Europe/Madrid \</span><br><span class="line">-p 5800:5800 \</span><br><span class="line">-p 5900:5900 \</span><br><span class="line">romancin/tinymediamanager:latest</span><br></pre></td></tr></table></figure>

<p>浏览以 <code>http://your-host-ip:5800</code> 即可访问 TinyMediaManager GUI</p>
<p>解决中文无法正常显示的问题</p>
<p>添加 ENABLE_CJK_FONT&#x3D;1 环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=tinymediamanager \</span><br><span class="line">-v /share/Container/tinymediamanager/config:/config \</span><br><span class="line">-v /home/gdrive:/media \</span><br><span class="line">-e GROUP_ID=0 -e USER_ID=0 -e TZ=Europe/Madrid -e ENABLE_CJK_FONT=1 \</span><br><span class="line">-p 5800:5800 \</span><br><span class="line">-p 5900:5900 \</span><br><span class="line">romancin/tinymediamanager:latest</span><br></pre></td></tr></table></figure>

<h3 id="使用-Jellyfin-加载-tinyMediaManager-整理的影片"><a href="#使用-Jellyfin-加载-tinyMediaManager-整理的影片" class="headerlink" title="使用 Jellyfin 加载 tinyMediaManager 整理的影片"></a>使用 Jellyfin 加载 tinyMediaManager 整理的影片</h3><p>只需要设置 Jellyfin 媒体库，取消掉所有的刮削器即可（一定要取消掉，否则依然会无法显示影片信息，甚至连影片都可能不会出现在影视墙上）</p>
]]></content>
      <categories>
        <category>NAS</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>jellyfin</tag>
        <tag>plex</tag>
      </tags>
  </entry>
  <entry>
    <title>神级代码注释</title>
    <url>/2008.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cDovL3d3dy5hc2NpaXdvcmxkLmNvbS8=">http://www.asciiworld.com/</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JsYW5rai9hd2Vzb21lLWNvbW1lbnQ=">https://github.com/Blankj/awesome-comment</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> -------------------------</span><br><span class="line">&lt; Just have fun with gist &gt;</span><br><span class="line"> -------------------------</span><br><span class="line">        \   ^__^</span><br><span class="line">         \  (oo)\_______</span><br><span class="line">            (__)\       )\/\</span><br><span class="line">                ||----w |</span><br><span class="line">                ||     ||</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">//When I wrote this, only God and I understood what I was doing</span><br><span class="line">//Now, God only knows</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>终端命令行下使用代理</title>
    <url>/1404.html</url>
    <content><![CDATA[<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>注意</p>
<ul>
<li>一定要加 <code>http://</code>，直接写域名或者 IP 不行</li>
<li>http 和 https 都要设置</li>
<li>cmd，Bash，PowerShell 设置的方式不同</li>
<li>设置的代理只在当前 cmd 窗口下有效，窗口关闭后会失效，新建的窗口也不生效</li>
</ul>
<h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set http_proxy=http://IP:PORT</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="built_in">set</span> https_proxy=http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有用户名密码需要设置，否则不需要设置</span></span><br><span class="line"><span class="built_in">set</span> http_proxy_user=user</span><br><span class="line"><span class="built_in">set</span> http_proxy_pass=pass</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> https_proxy_user=user</span><br><span class="line"><span class="built_in">set</span> https_proxy_pass=pass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=</span><br><span class="line"><span class="built_in">set</span> https_proxy=</span><br></pre></td></tr></table></figure>

<h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Ubuntu 下命令为 export</span><br><span class="line">export http_proxy=http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$env:HTTP_PROXY=&quot;http://127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul>
<li>如果想验证是否成功配置了代理的话，用 ping 命令是不可以的（ping的协议不是http，也不是https，是ICMP协议）</li>
</ul>
<p><code>curl -vv http://www.google.com</code>，用这条命令来验证，如果返回如下结果表示代理设置成功。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203731.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzLXdpbmRvd3MvaXNzdWVzLzE0ODk=">https://github.com/shadowsocks/shadowsocks-windows/issues/1489</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZmFtb3VzZ2Fya2luL2M1MTM4YjFlMTNhYzQxOTIwZDIy">https://gist.github.com/famousgarkin/c5138b1e13ac41920d22</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>编码规范及配置 ESLint</title>
    <url>/416.html</url>
    <content><![CDATA[<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0">Airbnb JavaScript Style Guide</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL3N0eWxlZ3VpZGUvanNndWlkZQ==">Google JavaScript Style Guide</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0YW5kYXJkL3N0YW5kYXJk">JavaScript Standard Style Guide</span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi5lc2xpbnQub3JnLw==">ESLint</span></p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwMjk4MzQ1L2Fuc3dlci80OTU1MTE0Mg==">JavaScript 语句后应该加分号么？</span></p>
<h2 id="Vue-ESLint-Prettier"><a href="#Vue-ESLint-Prettier" class="headerlink" title="Vue + ESLint + Prettier"></a><code>Vue + ESLint + Prettier</code></h2><p>[vue 官方风格指南(<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvc3R5bGUtZ3VpZGUvKV0=">https://cn.vuejs.org/v2/style-guide/)]</span></p>
<h3 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 <code>node</code></h3><p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==">https://nodejs.org/zh-cn/</span></p>
<h3 id="配置-ESlint"><a href="#配置-ESlint" class="headerlink" title="配置 ESlint"></a>配置 <code>ESlint</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install eslint -g</span><br><span class="line">$ npm install eslint-plugin-html -g</span><br><span class="line"></span><br><span class="line">$ eslint -v</span><br><span class="line">$ eslint --init</span><br><span class="line"></span><br><span class="line"><span class="comment"># google 标准</span></span><br><span class="line"><span class="comment"># $ npm install eslint-config-google -g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># airbnb 标准</span></span><br><span class="line"><span class="comment"># $ npm install eslint-config-airbnb eslint-plugin-jsx-a11y eslint-plugin-import eslint-plugin-react -g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># standard 标准</span></span><br><span class="line">$ npm install eslint-plugin-standard eslint-config-standard eslint-plugin-node eslint-plugin-promise -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># vue</span></span><br><span class="line">$ npm install eslint-plugin-vue -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># es6 语法支持</span></span><br><span class="line">$ npm install babel-eslint vue-eslint-parser -g</span><br></pre></td></tr></table></figure>

<p><code>.eslintrc.json</code> 文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// plugin与extend的区别：extend提供的是eslint现有规则的一系列预设</span></span><br><span class="line">  <span class="comment">// 而plugin则提供了除预设之外的自定义规则，当你在eslint的规则里找不到合适的的时候</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;google&quot;</span><span class="punctuation">,</span> <span class="string">&quot;plugin: vue/essential&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;html&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;valid-jsdoc&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;require-jsdoc&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-var&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vars-on-top&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eqeqeq&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;space-before-function-paren&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comma-dangle&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linebreak-style&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;unix&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-invalid-this&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max-len&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prefer-const&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arrow-parens&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;standard&quot;</span><span class="punctuation">,</span> <span class="string">&quot;plugin:vue/essential&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// &quot;extends&quot;: [&quot;standard&quot;, &quot;plugin:vue/recommended&quot;],</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;html&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-eslint-parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;no-new&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-undef&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-unused-vars&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;space-before-function-paren&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eqeqeq&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;handle-callback-err&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-useless-escape&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;new-cap&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue/name-property-casing&quot;</span><span class="punctuation">:</span> <span class="number">0</span> <span class="comment">// vue</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>vscode 插件安装 <code>ESLint</code></p>
<p>vscode 配置 <code>User Settings</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;javascript.validate.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typescript.validate.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.nodePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\nodejs\\node.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/Users/C/.vscode/.eslintrc.json&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.autoFixOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;javascript&quot;</span><span class="punctuation">,</span> <span class="string">&quot;javascriptreact&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoFix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoFix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-prettier"><a href="#配置-prettier" class="headerlink" title="配置 prettier"></a>配置 prettier</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install prettier -g</span><br><span class="line">$ npm install eslint-plugin-prettier -g</span><br></pre></td></tr></table></figure>

<p>vscode 插件安装 <code>prettier</code></p>
<p>vscode 配置 <code>User Settings</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 禁用默认html格式化</span></span><br><span class="line">  <span class="attr">&quot;html.format.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.jsxSingleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.eslintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.htmlWhitespaceSensitivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 标签换行长度</span></span><br><span class="line">  <span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">800</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>vuter</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;vetur.format.defaultFormatter.js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// HTML Default Formatter</span></span><br><span class="line">  <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettyhtml&quot;</span></span><br><span class="line">  <span class="attr">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prettyhtml&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;wrapAttributes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sortAttributes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-eslint-校验-typescript"><a href="#配置-eslint-校验-typescript" class="headerlink" title="配置 eslint 校验 typescript"></a>配置 eslint 校验 typescript</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-alloy -g</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FsbG95VGVhbS9lc2xpbnQtY29uZmlnLWFsbG95Lw==">https://github.com/AlloyTeam/eslint-config-alloy/</span></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;standard&quot;</span><span class="punctuation">,</span> <span class="string">&quot;alloy&quot;</span><span class="punctuation">,</span> <span class="string">&quot;alloy/typescript&quot;</span><span class="punctuation">,</span> <span class="string">&quot;plugin:vue/essential&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;html&quot;</span><span class="punctuation">,</span> <span class="string">&quot;typescript&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span></span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// &quot;parser&quot;: &quot;babel-eslint&quot;,</span></span><br><span class="line">    <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commonjs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;no-new&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-undef&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-unused-vars&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-var&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;space-before-function-paren&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript/class-name-casing&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="ESLint-规则列表"><a href="#ESLint-规则列表" class="headerlink" title="ESLint 规则列表"></a>ESLint 规则列表</h2><p><code>.eslintrc.json</code> 规则值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;off&quot;或者0    // 关闭规则关闭</span><br><span class="line">&quot;warn&quot;或者1   // 在打开的规则作为警告（不影响退出代码）</span><br><span class="line">&quot;error&quot;或者2  // 把规则作为一个错误（退出代码触发时为1</span><br></pre></td></tr></table></figure>

<p>忽略检测警告</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 忽略检测下一行</span></span><br><span class="line"><span class="comment">/* eslint-disable-next-line */</span></span><br><span class="line"><span class="comment">// 忽略当前整个文件</span></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="comment">// 忽略 no-new 规则</span></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9lc2xpbnQub3JnL2RvY3MvcnVsZXMv">规则列表 https://eslint.org/docs/rules/</span></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;no-alert&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line">  <span class="attr">&quot;no-array-constructor&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用数组构造器</span></span><br><span class="line">  <span class="attr">&quot;no-bitwise&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用按位运算符</span></span><br><span class="line">  <span class="attr">&quot;no-caller&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line">  <span class="attr">&quot;no-catch-shadow&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line">  <span class="attr">&quot;no-class-assign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止给类赋值</span></span><br><span class="line">  <span class="attr">&quot;no-cond-assign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line">  <span class="attr">&quot;no-console&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用console</span></span><br><span class="line">  <span class="attr">&quot;no-const-assign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止修改const声明的变量</span></span><br><span class="line">  <span class="attr">&quot;no-constant-condition&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line">  <span class="attr">&quot;no-continue&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用continue</span></span><br><span class="line">  <span class="attr">&quot;no-control-regex&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line">  <span class="attr">&quot;no-debugger&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用debugger</span></span><br><span class="line">  <span class="attr">&quot;no-delete-var&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line">  <span class="attr">&quot;no-div-regex&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line">  <span class="attr">&quot;no-dupe-keys&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line">  <span class="attr">&quot;no-dupe-args&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//函数参数不能重复</span></span><br><span class="line">  <span class="attr">&quot;no-duplicate-case&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//switch中的case标签不能重复</span></span><br><span class="line">  <span class="attr">&quot;no-else-return&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line">  <span class="attr">&quot;no-empty&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//块语句中的内容不能为空</span></span><br><span class="line">  <span class="attr">&quot;no-empty-character-class&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line">  <span class="attr">&quot;no-empty-label&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用空label</span></span><br><span class="line">  <span class="attr">&quot;no-eq-null&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line">  <span class="attr">&quot;no-eval&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//禁止使用eval</span></span><br><span class="line">  <span class="attr">&quot;no-ex-assign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line">  <span class="attr">&quot;no-extend-native&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止扩展native对象</span></span><br><span class="line">  <span class="attr">&quot;no-extra-bind&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line">  <span class="attr">&quot;no-extra-boolean-cast&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止不必要的bool转换</span></span><br><span class="line">  <span class="attr">&quot;no-extra-parens&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止非必要的括号</span></span><br><span class="line">  <span class="attr">&quot;no-extra-semi&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止多余的冒号</span></span><br><span class="line">  <span class="attr">&quot;no-fallthrough&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//禁止switch穿透</span></span><br><span class="line">  <span class="attr">&quot;no-floating-decimal&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line">  <span class="attr">&quot;no-func-assign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止重复的函数声明</span></span><br><span class="line">  <span class="attr">&quot;no-implicit-coercion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//禁止隐式转换</span></span><br><span class="line">  <span class="attr">&quot;no-implied-eval&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用隐式eval</span></span><br><span class="line">  <span class="attr">&quot;no-inline-comments&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止行内备注</span></span><br><span class="line">  <span class="attr">&quot;no-inner-declarations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;functions&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line">  <span class="attr">&quot;no-invalid-regexp&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止无效的正则表达式</span></span><br><span class="line">  <span class="attr">&quot;no-invalid-this&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line">  <span class="attr">&quot;no-irregular-whitespace&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//不能有不规则的空格</span></span><br><span class="line">  <span class="attr">&quot;no-iterator&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line">  <span class="attr">&quot;no-label-var&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line">  <span class="attr">&quot;no-labels&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止标签声明</span></span><br><span class="line">  <span class="attr">&quot;no-lone-blocks&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line">  <span class="attr">&quot;no-lonely-if&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line">  <span class="attr">&quot;no-loop-func&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line">  <span class="attr">&quot;no-mixed-requires&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//声明时不能混用声明类型</span></span><br><span class="line">  <span class="attr">&quot;no-mixed-spaces-and-tabs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//禁止混用tab和空格</span></span><br><span class="line">  <span class="attr">&quot;linebreak-style&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;windows&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//换行风格</span></span><br><span class="line">  <span class="attr">&quot;no-multi-spaces&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//不能用多余的空格</span></span><br><span class="line">  <span class="attr">&quot;no-multi-str&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//字符串不能用\换行</span></span><br><span class="line">  <span class="attr">&quot;no-multiple-empty-lines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="attr">&quot;max&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//空行最多不能超过2行</span></span><br><span class="line">  <span class="attr">&quot;no-native-reassign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//不能重写native对象</span></span><br><span class="line">  <span class="attr">&quot;no-negated-in-lhs&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line">  <span class="attr">&quot;no-nested-ternary&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line">  <span class="attr">&quot;no-new&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line">  <span class="attr">&quot;no-new-func&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//禁止使用new Function</span></span><br><span class="line">  <span class="attr">&quot;no-new-object&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用new Object()</span></span><br><span class="line">  <span class="attr">&quot;no-new-require&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用new require</span></span><br><span class="line">  <span class="attr">&quot;no-new-wrappers&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line">  <span class="attr">&quot;no-obj-calls&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line">  <span class="attr">&quot;no-octal&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用八进制数字</span></span><br><span class="line">  <span class="attr">&quot;no-octal-escape&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line">  <span class="attr">&quot;no-param-reassign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止给参数重新赋值</span></span><br><span class="line">  <span class="attr">&quot;no-path-concat&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line">  <span class="attr">&quot;no-plusplus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用++，--</span></span><br><span class="line">  <span class="attr">&quot;no-process-env&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用process.env</span></span><br><span class="line">  <span class="attr">&quot;no-process-exit&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用process.exit()</span></span><br><span class="line">  <span class="attr">&quot;no-proto&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止使用__proto__属性</span></span><br><span class="line">  <span class="attr">&quot;no-redeclare&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止重复声明变量</span></span><br><span class="line">  <span class="attr">&quot;no-regex-spaces&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line">  <span class="attr">&quot;no-restricted-modules&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line">  <span class="attr">&quot;no-return-assign&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line">  <span class="attr">&quot;no-script-url&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line">  <span class="attr">&quot;no-self-compare&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//不能比较自身</span></span><br><span class="line">  <span class="attr">&quot;no-sequences&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用逗号运算符</span></span><br><span class="line">  <span class="attr">&quot;no-shadow&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line">  <span class="attr">&quot;no-shadow-restricted-names&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line">  <span class="attr">&quot;no-spaced-func&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line">  <span class="attr">&quot;no-sparse-arrays&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line">  <span class="attr">&quot;no-sync&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line">  <span class="attr">&quot;no-ternary&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁止使用三目运算符</span></span><br><span class="line">  <span class="attr">&quot;no-trailing-spaces&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//一行结束后面不要有空格</span></span><br><span class="line">  <span class="attr">&quot;no-this-before-super&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line">  <span class="attr">&quot;no-throw-literal&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line">  <span class="attr">&quot;no-undef&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//不能有未定义的变量</span></span><br><span class="line">  <span class="attr">&quot;no-undef-init&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line">  <span class="attr">&quot;no-undefined&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//不能使用undefined</span></span><br><span class="line">  <span class="attr">&quot;no-unexpected-multiline&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//避免多行表达式</span></span><br><span class="line">  <span class="attr">&quot;no-underscore-dangle&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line">  <span class="attr">&quot;no-unneeded-ternary&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line">  <span class="attr">&quot;no-unreachable&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//不能有无法执行的代码</span></span><br><span class="line">  <span class="attr">&quot;no-unused-expressions&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止无用的表达式</span></span><br><span class="line">  <span class="attr">&quot;no-unused-vars&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="attr">&quot;vars&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="string">&quot;after-used&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line">  <span class="attr">&quot;no-use-before-define&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//未定义前不能使用</span></span><br><span class="line">  <span class="attr">&quot;no-useless-call&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止不必要的call和apply</span></span><br><span class="line">  <span class="attr">&quot;no-void&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁用void操作符</span></span><br><span class="line">  <span class="attr">&quot;no-var&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//禁用var，用let和const代替</span></span><br><span class="line">  <span class="attr">&quot;no-warning-comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;todo&quot;</span><span class="punctuation">,</span> <span class="string">&quot;fixme&quot;</span><span class="punctuation">,</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//不能有警告备注</span></span><br><span class="line">  <span class="attr">&quot;no-with&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁用with</span></span><br><span class="line">  <span class="attr">&quot;array-bracket-spacing&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line">  <span class="attr">&quot;arrow-parens&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line">  <span class="attr">&quot;arrow-spacing&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//=&gt;的前/后括号</span></span><br><span class="line">  <span class="attr">&quot;accessor-pairs&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//在对象中使用getter/setter</span></span><br><span class="line">  <span class="attr">&quot;block-scoped-var&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//块语句中使用var</span></span><br><span class="line">  <span class="attr">&quot;brace-style&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;1tbs&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//大括号风格</span></span><br><span class="line">  <span class="attr">&quot;callback-return&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//避免多次调用回调什么的</span></span><br><span class="line">  <span class="attr">&quot;camelcase&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//强制驼峰法命名</span></span><br><span class="line">  <span class="attr">&quot;comma-dangle&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line">  <span class="attr">&quot;comma-spacing&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//逗号前后的空格</span></span><br><span class="line">  <span class="attr">&quot;comma-style&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;last&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line">  <span class="attr">&quot;complexity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//循环复杂度</span></span><br><span class="line">  <span class="attr">&quot;computed-property-spacing&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line">  <span class="attr">&quot;consistent-return&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//return 后面是否允许省略</span></span><br><span class="line">  <span class="attr">&quot;consistent-this&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;that&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//this别名</span></span><br><span class="line">  <span class="attr">&quot;constructor-super&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line">  <span class="attr">&quot;curly&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;all&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line">  <span class="attr">&quot;default-case&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//switch语句最后必须有default</span></span><br><span class="line">  <span class="attr">&quot;dot-location&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line">  <span class="attr">&quot;dot-notation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;allowKeywords&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//避免不必要的方括号</span></span><br><span class="line">  <span class="attr">&quot;eol-last&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//文件以单一的换行符结束</span></span><br><span class="line">  <span class="attr">&quot;eqeqeq&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//必须使用全等</span></span><br><span class="line">  <span class="attr">&quot;func-names&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//函数表达式必须有名字</span></span><br><span class="line">  <span class="attr">&quot;func-style&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;declaration&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line">  <span class="attr">&quot;generator-star-spacing&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//生成器函数*的前后空格</span></span><br><span class="line">  <span class="attr">&quot;guard-for-in&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line">  <span class="attr">&quot;handle-callback-err&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//nodejs 处理错误</span></span><br><span class="line">  <span class="attr">&quot;id-length&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//变量名长度</span></span><br><span class="line">  <span class="attr">&quot;indent&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//缩进风格</span></span><br><span class="line">  <span class="attr">&quot;init-declarations&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//声明时必须赋初值</span></span><br><span class="line">  <span class="attr">&quot;key-spacing&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;beforeColon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="attr">&quot;afterColon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line">  <span class="attr">&quot;lines-around-comment&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//行前/行后备注</span></span><br><span class="line">  <span class="attr">&quot;max-depth&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//嵌套块深度</span></span><br><span class="line">  <span class="attr">&quot;max-len&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">80</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//字符串最大长度</span></span><br><span class="line">  <span class="attr">&quot;max-nested-callbacks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//回调嵌套深度</span></span><br><span class="line">  <span class="attr">&quot;max-params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//函数最多只能有3个参数</span></span><br><span class="line">  <span class="attr">&quot;max-statements&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">10</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//函数内最多有几个声明</span></span><br><span class="line">  <span class="attr">&quot;new-cap&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line">  <span class="attr">&quot;new-parens&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//new时必须加小括号</span></span><br><span class="line">  <span class="attr">&quot;newline-after-var&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line">  <span class="attr">&quot;object-curly-spacing&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line">  <span class="attr">&quot;object-shorthand&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line">  <span class="attr">&quot;one-var&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//连续声明</span></span><br><span class="line">  <span class="attr">&quot;operator-assignment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line">  <span class="attr">&quot;operator-linebreak&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;after&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line">  <span class="attr">&quot;padded-blocks&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line">  <span class="attr">&quot;prefer-const&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//首选const</span></span><br><span class="line">  <span class="attr">&quot;prefer-spread&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//首选展开运算</span></span><br><span class="line">  <span class="attr">&quot;prefer-reflect&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//首选Reflect的方法</span></span><br><span class="line">  <span class="attr">&quot;quotes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;single&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line">  <span class="attr">&quot;quote-props&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line">  <span class="attr">&quot;radix&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line">  <span class="attr">&quot;id-match&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//命名检测</span></span><br><span class="line">  <span class="attr">&quot;require-yield&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//生成器函数必须有yield</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//语句强制分号结尾</span></span><br><span class="line">  <span class="attr">&quot;semi-spacing&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//分号前后空格</span></span><br><span class="line">  <span class="attr">&quot;sort-vars&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//变量声明时排序</span></span><br><span class="line">  <span class="attr">&quot;space-after-keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//关键字后面是否要空一格</span></span><br><span class="line">  <span class="attr">&quot;space-before-blocks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line">  <span class="attr">&quot;space-before-function-paren&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line">  <span class="attr">&quot;space-in-parens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//小括号里面要不要有空格</span></span><br><span class="line">  <span class="attr">&quot;space-infix-ops&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line">  <span class="attr">&quot;space-return-throw-case&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line">  <span class="attr">&quot;space-unary-ops&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;words&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;nonwords&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line">  <span class="attr">&quot;spaced-comment&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line">  <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//使用严格模式</span></span><br><span class="line">  <span class="attr">&quot;use-isnan&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line">  <span class="attr">&quot;valid-jsdoc&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//jsdoc规则</span></span><br><span class="line">  <span class="attr">&quot;valid-typeof&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line">  <span class="attr">&quot;vars-on-top&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">//var必须放在作用域顶部</span></span><br><span class="line">  <span class="attr">&quot;wrap-iife&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;inside&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line">  <span class="attr">&quot;wrap-regex&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line">  <span class="attr">&quot;yoda&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span><span class="comment">//禁止尤达条件</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果应用共享</title>
    <url>/1334.html</url>
    <content><![CDATA[<h4 id="胖森微信公众号-（共享-AppleId（免费））"><a href="#胖森微信公众号-（共享-AppleId（免费））" class="headerlink" title="胖森微信公众号 （共享 AppleId（免费））"></a>胖森微信公众号 （共享 AppleId（免费））</h4><p>Procreate<br>GoodNotes5<br>P 站助手<br>Shu<br>Quantumult<br>Quantumult X<br>Shadowrocket</p>
<h4 id="aneeo-com-（AppleId）"><a href="#aneeo-com-（AppleId）" class="headerlink" title="aneeo.com （AppleId）"></a>aneeo.com （AppleId）</h4><p>旧版应用<br>AppleId 租用（收费）<br>应用代购</p>
<h4 id="app-ignition-fun-打火机，广告太多不推荐-（在线安装）"><a href="#app-ignition-fun-打火机，广告太多不推荐-（在线安装）" class="headerlink" title="app.ignition.fun 打火机，广告太多不推荐 （在线安装）"></a>app.ignition.fun 打火机，广告太多不推荐 （在线安装）</h4><p>越狱应用</p>
<h4 id="野心玩家-app-ambier-cn-（在线安装）"><a href="#野心玩家-app-ambier-cn-（在线安装）" class="headerlink" title="野心玩家 app.ambier.cn （在线安装）"></a>野心玩家 app.ambier.cn （在线安装）</h4><p>越狱应用 Uncover checkra1n<br>福利应用</p>
<h4 id="bc-工具-id-cydias-top-（在线安装）"><a href="#bc-工具-id-cydias-top-（在线安装）" class="headerlink" title="bc 工具 id.cydias.top （在线安装）"></a>bc 工具 id.cydias.top （在线安装）</h4><p>越狱应用 Uncover checkra1n</p>
<h4 id="有趣工具箱微信小程序-（在线安装）"><a href="#有趣工具箱微信小程序-（在线安装）" class="headerlink" title="有趣工具箱微信小程序 （在线安装）"></a>有趣工具箱微信小程序 （在线安装）</h4><p>越狱应用</p>
<h4 id="宅哥玩机-（在线安装）"><a href="#宅哥玩机-（在线安装）" class="headerlink" title="宅哥玩机 （在线安装）"></a>宅哥玩机 （在线安装）</h4><p>越狱应用<br>福利应用</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>苹果手机越狱相关资源</title>
    <url>/2022.html</url>
    <content><![CDATA[<h3 id="越狱工具"><a href="#越狱工具" class="headerlink" title="越狱工具"></a>越狱工具</h3><p><span class="exturl" data-url="aHR0cHM6Ly9jaGVja3JhLmluLw==">checkra1n</span>  iPhone 5s -iPhone X, iOS 12.0 and up<br><span class="exturl" data-url="aHR0cHM6Ly91bmMwdmVyLmRldi8=">unc0ver</span>  iOS 11.0 - 13.5</p>
<h3 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h3><p>Ai-小苹果：<span class="exturl" data-url="aHR0cDovL2FwdC5jeWRpYWJjLnRvcC8=">http://apt.cydiabc.top</span><br>雷锋源：<span class="exturl" data-url="aHR0cDovL2FwdC5hYmN5ZGlhLmNvbS8=">http://apt.abcydia.com</span><br>reprovision 作者源：<span class="exturl" data-url="aHR0cHM6Ly9yZXBvLmluY2VuZG8ud3Mv">https://repo.incendo.ws</span><br>Flex3官方源：<span class="exturl" data-url="aHR0cDovL2dldGRlbHRhLmNvLw==">http://getdelta.co</span><br>Filza官方源：<span class="exturl" data-url="aHR0cDovL3RpZ2lzb2Z0d2FyZS5jb20vY3lkaWE=">http://tigisoftware.com/cydia</span><br>AudioRecorder XS 通话录音官方源：<span class="exturl" data-url="aHR0cDovL2xpbW5lb3MubmV0L3JlcG8=">http://limneos.net/repo</span><br>Liberty Lire官方屏蔽越狱源：<span class="exturl" data-url="aHR0cDovL3J5bGV5YW5ndXMuY29tL3JlcG8=">http://ryleyangus.com/repo</span><br>多⽶米诺⻣骨牌：<span class="exturl" data-url="aHR0cDovL2FwdC53eGhidHMuY29tLw==">http://apt.wxhbts.com</span><br>Appsync官方源：<span class="exturl" data-url="aHR0cHM6Ly9jeWRpYS5ha2VtaS5haS8=">https://cydia.akemi.ai</span><br>snowboard官⽅方源：<span class="exturl" data-url="aHR0cDovL3NwYXJrZGV2Lm1lLw==">http://sparkdev.me</span><br>贴吧源：<span class="exturl" data-url="aHR0cHM6Ly9hcHQuY3lkaWFiYS5jbi8=">https://apt.cydiaba.cn</span><br>App Admin官⽅方源：<span class="exturl" data-url="aHR0cDovL2JldGEudW5saW1hcHBzLmNvbS8=">http://beta.unlimapps.com</span></p>
]]></content>
      <tags>
        <tag>越狱</tag>
      </tags>
  </entry>
  <entry>
    <title>解决VPS通过SS访问谷歌学术受限</title>
    <url>/222.html</url>
    <content><![CDATA[<p>在网上搜索后发现有可能有以下原因：</p>
<p>1.你的 VPS 被人用来做爬虫爬 Google，IP 被封</p>
<p>2.你的 IPv4 网段有人做爬虫，网段被封</p>
<p>3.你的 IPv6 网段有人做爬虫，网段被封</p>
<p>IPv6 网段被封</p>
<p>强制你的 VPS 用 IPv4 来访问，具体方法在 <code>/etc/sysctl.conf</code> 后追加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># disable ipv6</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6=1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6=1</span><br></pre></td></tr></table></figure>

<p>IPv4 网段被封</p>
<p>强制 VPS 使用 IPv6 访问，确认打开 VPS 上的 IPv6 功能，更改 VPS 的 hosts 中指定 Google Schoolar 的 IPv6 地址，编辑<code>/etc/hosts</code>后追加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Scholar</span><br><span class="line">## type &#x27;host google.com&#x27; to get the correct ipv6 address or</span><br><span class="line">## visit https://github.com/lennylxx/ipv6-hosts</span><br><span class="line">2404:6800:4004:81a::200e scholar.google.cn</span><br><span class="line">2404:6800:4004:81a::200e scholar.google.com.hk</span><br><span class="line">2404:6800:4004:81a::200e scholar.google.com</span><br><span class="line">2404:6800:4004:81a::200e scholar.l.google.com</span><br></pre></td></tr></table></figure>

<p>更改配置后，重启 SS</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ss</tag>
      </tags>
  </entry>
  <entry>
    <title>解锁网易云音乐客户端变灰歌曲</title>
    <url>/1339.html</url>
    <content><![CDATA[<p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25vbmRhbmVlL1VuYmxvY2tOZXRlYXNlTXVzaWM=">https://github.com/nondanee/UnblockNeteaseMusic</span><br>食用指南：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25vbmRhbmVlL1VuYmxvY2tOZXRlYXNlTXVzaWMvaXNzdWVzLzIy">https://github.com/nondanee/UnblockNeteaseMusic/issues/22</span></p>
<p>特性：</p>
<ul>
<li>使用 QQ &#x2F; 虾米 &#x2F; 百度 &#x2F; 酷狗 &#x2F; 酷我 &#x2F; 咪咕 &#x2F; JOOX 音源替换变灰歌曲链接 (默认仅启用一、五、六)</li>
<li>为请求增加 X-Real-IP 参数解锁海外限制，支持指定网易云服务器 IP，支持设置上游 HTTP &#x2F; HTTPS 代理</li>
<li>完整的流量代理功能 (HTTP &#x2F; HTTPS)，可直接作为系统代理 (同时支持 PAC)</li>
</ul>
<h3 id="在-windows-本地使用"><a href="#在-windows-本地使用" class="headerlink" title="在 windows 本地使用"></a>在 windows 本地使用</h3><h4 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h4><p>去 node.js 官网下载安装即可</p>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nondanee/UnblockNeteaseMusic.git <span class="comment">#克隆项目仓库</span></span><br><span class="line"><span class="built_in">cd</span> UnblockNeteaseMusic</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx @nondanee/unblockneteasemusic</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g @nondanee/unblockneteasemusic</span><br><span class="line">$ unblockneteasemusic</span><br></pre></td></tr></table></figure>

<h3 id="网易云客户端连接使用"><a href="#网易云客户端连接使用" class="headerlink" title="网易云客户端连接使用"></a>网易云客户端连接使用</h3><p>在网易云客户端内设置代理：<br>右上角设置 &gt; 自定义代理 &gt; 地址 127.0.0.1 端口 8080<br>确定重启客户端后，即可开始使用</p>
<p>PAC 自动代理脚本地址 <code>http://127.0.0.1:8080/proxy.pac</code></p>
<p>以上是在本地 window 上使用的方法，如果想给手机稳定使用，可以参考如下方式</p>
<h3 id="全端解决方案"><a href="#全端解决方案" class="headerlink" title="全端解决方案"></a>全端解决方案</h3><p>需要一台服务器</p>
<h4 id="安卓等其它设备"><a href="#安卓等其它设备" class="headerlink" title="安卓等其它设备"></a>安卓等其它设备</h4><p>安装 pm2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -g install pm2</span><br></pre></td></tr></table></figure>

<p>pm2 部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js --name UnblockNeteaseMusic -- -s -p 8080</span><br></pre></td></tr></table></figure>

<h4 id="ios-设备"><a href="#ios-设备" class="headerlink" title="ios 设备"></a>ios 设备</h4><p>ios 配置经验分享：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25vbmRhbmVlL1VuYmxvY2tOZXRlYXNlTXVzaWMvaXNzdWVzLzM2OA==">https://github.com/nondanee/UnblockNeteaseMusic/issues/368</span></p>
<p>ios 需要一个域名，并配置反代</p>
<p>nginx 配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	  listen 443 ssl http2;</span><br><span class="line">	  server_name your_domain; # 改为你自己的域名</span><br><span class="line">	  ssl_certificate 1_your_domain_bundle.crt; # 改为自己申请得到的 crt 文件的名称</span><br><span class="line">	  ssl_certificate_key 2_your_domain.key; # 改为自己申请得到的 key 文件的名称</span><br><span class="line">	  ssl_session_timeout 5m;</span><br><span class="line">	  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">	  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">	  ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">	  location / &#123;</span><br><span class="line">	    proxy_pass http://localhost:8080; # 代理到 Unblock 服务地址</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pm2 部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js --name UnblockNeteaseMusic -- -s -p 8080 -e https://unblockneteasemusic.ayyy.club</span><br></pre></td></tr></table></figure>

<p>iOS 搭配 Shadowrocket 连接代理</p>
<p>Shadowrocket 右上角加号添加节点 -&gt; 类型选择 HTTP -&gt; 服务器填写你的服务器公网 IP -&gt; 端口填写你启动服务的端口号（默认为 8080） -&gt; 点击配置 -&gt; 点击本地文件 -&gt; default.conf -&gt; 编辑配置</p>
<p>添加三条规则 选项选择你刚刚添加的节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER-AGENT: NeteaseMusic*</span><br><span class="line">DOMAIN-SUFFIX: 163.com</span><br><span class="line">DOMAIN-SUFFIX: 126.net</span><br></pre></td></tr></table></figure>

<h3 id="pm2-常用命令"><a href="#pm2-常用命令" class="headerlink" title="pm2 常用命令"></a>pm2 常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 stop UnblockNeteaseMusic <span class="comment"># 停止服务</span></span><br><span class="line">pm2 restart UnblockNeteaseMusic <span class="comment"># 重启服务</span></span><br><span class="line">pm2 pull UnblockNeteaseMusic <span class="comment"># 更新服务到最新代码</span></span><br><span class="line">pm2 show UnblockNeteaseMusic <span class="comment"># 查看服务的参数信息</span></span><br><span class="line">pm2 <span class="built_in">log</span> UnblockNeteaseMusic <span class="comment"># 查看服务日志</span></span><br><span class="line">pm2 <span class="built_in">ls</span> <span class="comment"># 查看已部署的服务列表</span></span><br><span class="line">pm2 monit <span class="comment"># 监控服务状态</span></span><br><span class="line">pm2 flush <span class="comment"># 清理所有日志文件</span></span><br><span class="line">pm2 update <span class="comment"># 更新 pm2 状态</span></span><br></pre></td></tr></table></figure>

<h3 id="一键打卡刷满-300-听歌量"><a href="#一键打卡刷满-300-听歌量" class="headerlink" title="一键打卡刷满 300 听歌量"></a>一键打卡刷满 300 听歌量</h3><p><span class="exturl" data-url="aHR0cHM6Ly90b2RheS5uYW5nZS5jbi8=">https://today.nange.cn/</span></p>
<div style="display: none;">
使用方法参考

<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubmFuZ2UuY24vdW5sb2NrLW5ldGVhc2UtbXVzaWMuaHRtbA==">https://www.nange.cn/unlock-netease-music.html</span></p>
</div>
</div>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>网易云音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌账号无法注册解决方式</title>
    <url>/206.html</url>
    <content><![CDATA[<h4 id="无法注册原因"><a href="#无法注册原因" class="headerlink" title="无法注册原因"></a>无法注册原因</h4><ul>
<li>此电话号码无法用于进行验证</li>
</ul>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><ul>
<li><p>通过其他页面或方式进入谷歌注册入口，如通过 Google Voice 或 Google Analysis 等进入</p>
</li>
<li><p>用安卓手机自带的电子邮件客户端申请</p>
</li>
<li><p>在选择邮箱时，切换 “改用我目前的邮件地址” 为 “注册新的 Gmail 邮箱”</p>
</li>
<li><p>选择适当的语言以及模式（页面左下角语言设置）</p>
</li>
<li><p>Chrome 语言设置为 English-United States</p>
</li>
</ul>
<h4 id="成功案例"><a href="#成功案例" class="headerlink" title="成功案例"></a>成功案例</h4><ul>
<li><p>2019&#x2F;08&#x2F;06 小米手机-使用自带的电子邮件客户端-用国内手机号-QQ 邮箱-注册成功</p>
</li>
<li><p>2020&#x2F;01&#x2F;05 小米手机-使用自带的电子邮件客户端-用国内手机号-注册新的 Gmail 邮箱-注册成功</p>
</li>
<li><p>2020&#x2F;01&#x2F;19 苹果手机-使用自带的邮件客户端-国内手机号-注册新的 Gmail 邮箱-注册成功</p>
</li>
<li><p>2020&#x2F;12&#x2F;29 苹果手机-使用自带的邮件客户端-国内手机号(已被使用过)-注册新的 Gmail 邮箱-注册成功</p>
</li>
<li><p>2021&#x2F;04&#x2F;06 w10-谷歌浏览器 + WebRTC Leak Prevent插件（在无痕模式下启用 + IP handling policy:Disabled non-proxied UDp(froce proxy) ）-国内手机号(已被使用过)-注册新的 Gmail 邮箱-注册成功</p>
</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>element-ui 实现向下滚动加载</title>
    <url>/1114.html</url>
    <content><![CDATA[<h3 id="自定义封装-vue-指令，实现-select-下拉框滚动加载"><a href="#自定义封装-vue-指令，实现-select-下拉框滚动加载" class="headerlink" title="自定义封装 vue 指令，实现 select 下拉框滚动加载"></a>自定义封装 vue 指令，实现 select 下拉框滚动加载</h3><p>封装 v-loadmore 指令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;loadmore&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 element-ui 定义好的 scroll 盒子</span></span><br><span class="line">    <span class="keyword">const</span> target = el.<span class="title function_">querySelector</span>(<span class="string">&#x27;.el-select-dropdown .el-select-dropdown__wrap&#x27;</span>)</span><br><span class="line">    target.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// scrollHeight 获取元素内容高度(只读)</span></span><br><span class="line">      <span class="comment">// scrollTop 获取或者设置元素的滚动高度</span></span><br><span class="line">      <span class="comment">// clientHeight 读取元素的可见高度(只读)</span></span><br><span class="line">      <span class="keyword">const</span> flag = <span class="variable language_">this</span>.<span class="property">scrollHeight</span> - <span class="variable language_">this</span>.<span class="property">scrollTop</span> &lt;= <span class="variable language_">this</span>.<span class="property">clientHeight</span></span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        binding.<span class="title function_">value</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-loadmore</span>=<span class="string">&quot;loadMore&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-option</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    loadMore () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loadingMore</span> == <span class="literal">false</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">loadingMore</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentPage</span> &gt; <span class="variable language_">this</span>.<span class="property">totlaPage</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">getData</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-vue-infinite-scroll"><a href="#使用-vue-infinite-scroll" class="headerlink" title="使用 vue-infinite-scroll"></a>使用 vue-infinite-scroll</h3><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvdnVlLWluZmluaXRlLXNjcm9sbA==">https://github.com/ElemeFE/vue-infinite-scroll</span></p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-infinite-scroll</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// # main.js</span></span><br><span class="line"><span class="keyword">import</span> infiniteScroll <span class="keyword">from</span> <span class="string">&#x27;vue-infinite-scroll&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(infiniteScroll)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-infinite-scroll</span>=<span class="string">&quot;loadMore&quot;</span> <span class="attr">infinite-scroll-disabled</span>=<span class="string">&quot;busy&quot;</span> <span class="attr">infinite-scroll-distance</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in moveRecord&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    loadMore () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">busy</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">10</span>; i &lt; j; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: count++ &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">busy</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="element-ui-el-scrollbar-组件"><a href="#element-ui-el-scrollbar-组件" class="headerlink" title="element-ui el-scrollbar 组件"></a>element-ui el-scrollbar 组件</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvZWxlbWVudC9ibG9iL2Rldi9wYWNrYWdlcy9zY3JvbGxiYXIvc3JjL21haW4uanM=">https://github.com/ElemeFE/element/blob/dev/packages/scrollbar/src/main.js</span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">style</span>=<span class="string">&quot;height: 200px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>zs<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.el-scrollbar__wrap</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>awesome-project</title>
    <url>/356.html</url>
    <content><![CDATA[<h1 id="awesome-project"><a href="#awesome-project" class="headerlink" title="awesome-project"></a>awesome-project</h1><h2 id="知识库-x2F-教程"><a href="#知识库-x2F-教程" class="headerlink" title="知识库&#x2F;教程"></a>知识库&#x2F;教程</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FkdmFuY2VkLUZyb250ZW5kL0RhaWx5LUludGVydmlldy1RdWVzdGlvbg==">Daily-Interview-Question</span> - 每天一道大厂前端面试题</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0N5QzIwMTgvQ1MtTm90ZXM=">CS-Notes</span> - 技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hjYXRsaXUvdHlwZXNjcmlwdC10dXRvcmlhbA==">typescript-tutorial</span> - TypeScript 入门教程</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vc3RseUFkZXF1YXRlL21vc3RseS1hZGVxdWF0ZS1ndWlkZQ==">mostly-adequate-guide</span> - 函数式编程(英文)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sbGg5MTEwMDEuZ2l0Ym9va3MuaW8vbW9zdGx5LWFkZXF1YXRlLWd1aWRlLWNoaW5lc2UvY29udGVudC8=">mostly-adequate-guide-chinese</span> - mostly-adequate-guide 中文翻译</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Jhc2FyYXQvdHlwZXNjcmlwdC1ib29r">typescript-book</span> - (英文) TypeScript 的权威指南，可能是最好的 TypeScript 书籍</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2prY2hhby90eXBlc2NyaXB0LWJvb2stY2hpbmVzZQ==">typescript-book-chinese</span> - typescript-book 中文翻译</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pob25nc3AvVHlwZVNjcmlwdA==">TypeScript</span> - TypeScript 手册(官方手册中文翻译版)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ludGVydmlld01hcC9DUy1JbnRlcnZpZXctS25vd2xlZGdlLU1hcA==">CS-Interview-Knowledge-Map</span> - 面试地图。内容包括JS、网络、浏览器相关、性能优化、安全、框架、- Git、数据结构、算法等。<span class="exturl" data-url="aHR0cHM6Ly95dWNoZW5na2FpLmNuL2RvY3MvZnJvbnRlbmQv">在线阅读</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly91c3RiaHVhbmd5aS5naXRodWIuaW8vdnVlLWFuYWx5c2lzLw==">Vue.js 技术揭秘</span></li>
</ul>
<h2 id="js库-Browser-x2F-Nodejs"><a href="#js库-Browser-x2F-Nodejs" class="headerlink" title="js库(Browser&#x2F;Nodejs)"></a>js库(Browser&#x2F;Nodejs)</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25vZGUtZm9ybWlkYWJsZS9mb3JtaWRhYmxl">formidable</span> - 用于解析 form data 的 Node.js 模块，尤其是文件上传（Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXVsdGVy">multer</span> - 用于处理 multipart&#x2F;form-data 的 node.js 中间件，主要用于上传文件（Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGE=">form-data</span> - 创建可读的 ‘multipart&#x2F;form-data’ 流的 Node.js 模块，可以用来向其他web应用程序提交表单和文件上传（Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9maWxlLXR5cGU=">file-type</span> - 检测 Buffer&#x2F;Uint8Array&#x2F;ArrayBuffer 的文件类型（Browser&#x2F;Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoZWVyaW9qcy9jaGVlcmlv">cheerio</span> - 服务器端解析任何HTML或XML文档，与jQuery有相似的语法（Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9t">jsdom</span> - 各种 Web 标准的 JavaScript 实现，用于Node.js中模拟web浏览器（Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcmtlZGpzL21hcmtlZA==">marked</span> - markdown 解析器（Browser）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nob3dkb3duanMvc2hvd2Rvd24=">showdown</span> - markdown 解析器（Browser&#x2F;Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvbm9kZS1lbW9qaQ==">node-emoji</span> - 对 node.js 项目的简单表情符号支持 在node.js 项目中使用emoji，如在CLI项目中（Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25wbS9ub2RlLXNlbXZlcg==">node-semver</span> - npm 包版本比较（Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9sZXZlbg==">leven</span> - 测量两个字符串之间的差异</li>
<li><a href="github.com/mikaelbr/node-notifier">node-notifier</a> - 使用 Node.js 发送跨平台原生通知，适用于 macOS、Linux、Windows（Node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RzYXllbi9kb20tdG8taW1hZ2U=">dom-to-image</span> - 使用 canvas 从 DOM 节点生成图像</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Frcnl1bS9mbG9hdGluZy12dWU=">floating-vue</span> - 用于 Vue 的简单工具提示、弹出框、下拉菜单、菜单..</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hdHRlb0dhYnJpZWxlL3Z1ZS1hbmFseXRpY3M=">vue-analytics</span> - 适用于 Vue 的 Google Analytics 插件</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RleGllL0RleGllLmpz">Dexie.js</span> - indexedDB 库</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Nhbm9weVRheC9zaW5nbGUtc3Bh">single-spa</span> - 微前端</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhw">path-to-regexp</span> - 将 <code>/user/:name</code> 等路径字符串转换为正则表达式（node.js）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RyYWZ0LWpz">Draft.js</span> - 富文本编辑器（React）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvbGRiZXJneW9uaS9ub2RlYmVzdHByYWN0aWNlcw==">nodebestpractices</span> - Node.js 最佳实践列表</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R5cGljb2RlL2pzb24tc2VydmVy">json-server</span> - 根据 JSON 文件提供数据接口</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvZGVjaW1hbC5qcw==">decimal.js</span> - 解决js运算精度问题</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nhb2xhbi9hc3luYw==">async</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9vcmE=">ora</span></li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29obXl6c2gvb2hteXpzaA==">ohmyzsh</span> - Oh My Zsh 是一个社区驱动的开源框架，用于管理 Zsh 配置</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=">gitignore</span> -  提供很多 .gitignore 模板</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NhcmJvbi1hcHAvY2FyYm9u">carbon</span> - 将源码转化为漂亮的图片</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RpZ2l0YWxvY2Vhbi9uZ2lueGNvbmZpZy5pbw==">nginxconfig</span> - Nginx 可视化配置神器</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhaWtlOW0vQ3liZXJicmFpbg==">Cyberbrain</span> - python代码调试神器</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VuYnVnL2NvZGVsZg==">codelf</span> -  一个帮助开发者解决变量命名烦恼的工具</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NvaW1vcnQveW91LWdldA==">you-get</span> - 一行命令下载全网视频</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3l0ZGwtb3JnL3lvdXR1YmUtZGw=">youtube-dl</span> - 下载全网视频</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lhd2lhMDAyL2x1eA==">lux</span> - 视频下载神器（支持爱优腾等）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdmxvYnUvZGVza3JlZW4=">deskreen</span> - 将任何设备转换为电脑的辅助屏幕</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9hd2Vzb21lLW5vZGVqcw==">awesome-nodejs</span></li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B1cHBldGVlci9wdXBwZXRlZXI=">Puppeteer</span> - 无头chrome</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9wbGF5d3JpZ2h0">Playwright</span> - 无头Chromium, WebKit, and Firefox</li>
</ul>
<h2 id="沙雕项目"><a href="#沙雕项目" class="headerlink" title="沙雕项目"></a>沙雕项目</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3poYW9vbGVlL0NoaW5lc2VCUUI=">ChineseBQB</span> - 中国表情包大集合</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N2ZW5zdGFyby9nZW5hY3Q=">genact</span> - 该神器会显示一些多任务场景，让看到你电脑屏幕的人都误以为你在 Coding</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25pdWRhaS9WU0NvZGUtWmhpaHU=">VSCode-Zhihu</span> - 用 VSCode 看知乎的摸鱼神器</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p5NDQ1NTY2L3ZzY29kZS1wbHVnaW4tc3dpbW1pbmc=">vscode-plugin-swimming</span> - 写完代码之后可以重新把代码写一遍，摸鱼神器</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NreXdpbmQzMDAwL3ByZXNlcnZlLWNk">preserve-cd</span> - 绝版游戏保护计划：把一些经典小游戏刻录永久保存</li>
</ul>
<h2 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbnduZXQvZ2l0aHViMXM=">github1s</span> - 网页版VS Code查看github项目代码</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3YydGVjL3dhdGNodG93ZXI=">watchtower</span> - 自动更新 Docker 容器</li>
</ul>
<h2 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hbW9lL21pcmFp">mirai</span> - 高效率QQ机器人支持库</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yczRzL2dvLWNxaHR0cA==">go-cqhttp</span>  - cqhttp的golang实现，轻量、原生跨平台</li>
</ul>
<h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1J5dWppbngvUnl1amlueA==">Ryujinx</span> - PC 上 Switch 模拟器</li>
</ul>
<h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B1YmxpYy1hcGlzL3B1YmxpYy1hcGlz">public-apis</span> - 一套公开 API，可以用于软件和 Web 开发</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvZGVyMmd3eS9jb2RlcjJnd3k=">coder2gwy</span> - 程序员考公指南</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zvcm11bGFoZW5kcnkvOTU1LldMQg==">955.WLB</span> - 955 不加班的公司名单</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoZW5neGluamluZy9wcm9ncmFtbWVyLWpvYi1ibGFja2xpc3Q=">programmer-job-blacklist</span> - 程序员找工作黑名单，换工作和当技术合伙人需谨慎</li>
</ul>
<p>高仿项目<br>命令行工具</p>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>less 使用 - mixin 混合</title>
    <url>/424.html</url>
    <content><![CDATA[<h3 id="mixin-混合"><a href="#mixin-混合" class="headerlink" title="mixin 混合"></a>mixin 混合</h3><p>可以在 mixin 中使用类选择器和 id 选择器</p>
<p>.bgc 定义了一个属性集，在任何需要使用 .bgc 属性集的选择器中，只需像下面这样调用：(小括号是可选的)</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bgc</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">  <span class="selector-class">.bgc</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译后的 CSS 代码为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bgc</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：mixin 其实就是一种嵌套，简单的讲，mixin 就是规则级别的复用</p>
<p>mixin 的定义也会被原封不动的输出到编译生成的 CSS 代码中</p>
<p>如果希望编译生成的 CSS 代码中不包含 mixin 的定义，在定义 mixin 时，只需在 class、id 的后面添加一对小括号即可。如：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bgc</span>() &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.bgc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译后的 CSS 代码为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mixin 可以包含选择器</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hover</span>() &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.hover</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译后的 CSS 代码为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命令空间-Namespaces"><a href="#命令空间-Namespaces" class="headerlink" title="命令空间 Namespaces"></a>命令空间 Namespaces</h3><p>如果想要在一个更复杂的选择器中混合属性，可以堆叠多个 id 或类</p>
<p>可以将 mixin 置于 id 选择器之下，这样可以确保它不会和另一个库冲突</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#bgc</span> &#123;</span><br><span class="line">  <span class="selector-class">.inner</span>() &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-id">#bgc</span><span class="selector-class">.inner</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="important-关键字"><a href="#important-关键字" class="headerlink" title="!important 关键字"></a>!important 关键字</h3><p>在 mixin 后使用 !important 关键字，将会标记调用所有继承的属性为!important</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bgc</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.bgc</span> !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后 css 为</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>带参数的 Mixin</p>
<p>mixin 还可以接受参数，这些参数在混合时传递给选择器块</p>
<p>从上面的代码可以看出：mixin 其实就是一种嵌套，简单的讲，mixin 就是规则级别的复用。除了类选择器外，你也可以使用 id 选择器来定义 mixin。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title>LESS 基本使用</title>
    <url>/425.html</url>
    <content><![CDATA[<h2 id="Less-简介"><a href="#Less-简介" class="headerlink" title="Less 简介"></a>Less 简介</h2><blockquote>
<p><strong><em>Less</em>  是一门 CSS 预处理语言（预先处理）,它扩展了 CSS 语言，增加了变量、Mixin、函数等特性</strong></p>
<p>浏览器不直接识别 less 文件，浏览器只识别 css 文件，所以我们写了 less 文件之后，我们需要预先把 less 文件转换成 css 文件。</p>
</blockquote>
<p>本质上，LESS 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。LESS 并没有裁剪 CSS 原有的特性，更不是用来取代 CSS 的，而是在现有 CSS 语法的基础上，为 CSS 加入程序式语言的特性。</p>
<p><strong>less 仅仅是写 css 的另一种方式，写出来的 less 文件浏览器也不识别，所以啊，我们写完了 less 文件，还需要通过 less 解析器解析成 css，最终浏览器引入的还是 css 文件。</strong></p>
<p>学习网站：</p>
<p><span class="exturl" data-url="aHR0cDovL2xlc3Njc3Mub3JnLw==">官网 http://lesscss.org/</span><br><span class="exturl" data-url="aHR0cDovL2xlc3Njc3MuY24v">中文网 http://lesscss.cn/</span></p>
<h2 id="less-的编译"><a href="#less-的编译" class="headerlink" title="less 的编译"></a>less 的编译</h2><blockquote>
<p>如何把 less 文件变成 css 文件</p>
</blockquote>
<h3 id="使用打包工具"><a href="#使用打包工具" class="headerlink" title="使用打包工具"></a>使用打包工具</h3><p><code>gulp</code></p>
<p><code>webpack</code></p>
<h3 id="使用考拉"><a href="#使用考拉" class="headerlink" title="使用考拉"></a>使用考拉</h3><blockquote>
<p>koala 是一个前端预处理器语言（less&#x2F;sass）图形编译工具，支持 Less、Sass、Compass、CoffeeScript，帮助 web 开发者更高效地使用它们进行开发。跨平台运行，完美兼容 windows、linux、mac。</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cDovL2tvYWxhLWFwcC5jb20vaW5kZXgtemguaHRtbA==">考拉官网</span></p>
<p>使用步骤：</p>
<ol>
<li>把<code>less</code>文件夹拖进去</li>
<li>会在当前目录生成一个<code>css</code>目录</li>
</ol>
<p>优点：不用 node 环境，不用 less 环境，koala 内置了</p>
<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>easy less</p>
<h2 id="Less-语法"><a href="#Less-语法" class="headerlink" title="Less 语法"></a>Less 语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>注释</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这是CSS中的注释，因此会编译到css中 */</span></span><br><span class="line"><span class="comment">// 这是less的注释，css不能识别这个注释， 最后不会编译到css文件</span></span><br></pre></td></tr></table></figure>

<p><strong>变量</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @变量名: 变量值;</span></span><br><span class="line"><span class="variable">@color:</span> <span class="number">#ccc</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mixin-函数"><a href="#mixin-函数" class="headerlink" title="mixin 函数"></a>mixin 函数</h3><p><strong>混入函数</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数：不带参数</span></span><br><span class="line"><span class="selector-class">.btn</span>() &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="selector-class">.my_btn</span> &#123;</span><br><span class="line">  <span class="selector-class">.btn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数：带参数</span></span><br><span class="line"><span class="selector-class">.btn_border</span>(<span class="variable">@width</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_btn</span> &#123;</span><br><span class="line">  <span class="comment">// 如果函数定义了参数，调用的时候必须传入参数，否则会报错</span></span><br><span class="line">  <span class="selector-class">.btn_border</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数：带参数默认值</span></span><br><span class="line"><span class="selector-class">.btn_border</span>(<span class="variable">@width</span>: <span class="number">1px</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_btn</span> &#123;</span><br><span class="line">  <span class="comment">// 因为有默认值，所以不会报错</span></span><br><span class="line">  <span class="selector-class">.btn_border</span>();</span><br><span class="line">  <span class="selector-class">.btn_border</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应用：定义兼容多浏览器的圆角</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border_radius</span>(<span class="variable">@value</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="variable">@value</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="variable">@value</span>;</span><br><span class="line">  -ms-<span class="attribute">border-radius</span>: <span class="variable">@value</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">@value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border_radius</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><blockquote>
<p>我们可以在一个选择器中嵌套另一个选择器来实现继承，这样很大程度减少了代码量，并且代码看起来更加的清晰。</p>
</blockquote>
<ul>
<li>使用伪类的时候 可以使用<code>&amp;</code> 表示自己</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">// 子代</span></span><br><span class="line">  <span class="selector-class">.son1</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 后代</span></span><br><span class="line">  &gt; <span class="selector-class">.son2</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 交集： &amp; 表示本身</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.now</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以省略后缀名</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;variable&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;maxin&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>模块化的思想，分模块进行管理这些 less 文件，最终只需要使用 import 将 less 引入到一起即可</p>
<h3 id="函数（运算）"><a href="#函数（运算）" class="headerlink" title="函数（运算）"></a>函数（运算）</h3><blockquote>
<p>在我们的 CSS 中充斥着大量的数值型的 value，less 可以直接支持运算，也提供了一系列的函数提供给我们使用。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: round(100%/6, 2);</span><br><span class="line">  height: 100px + 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cDovL3d3dy4xMDI0aS5jb20vZGVtby9sZXNzL3JlZmVyZW5jZS5odG1s">http://www.1024i.com/demo/less/reference.html</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs 版本管理工具</title>
    <url>/439.html</url>
    <content><![CDATA[<h2 id="n"><a href="#n" class="headerlink" title="n"></a>n</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RqL24=">github地址</span></p>
<p>支持 macOS, Linux</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n --latest               <span class="comment"># Output the latest node version available</span></span><br><span class="line">n --lts                  <span class="comment">#  Output the latest LTS node version available</span></span><br><span class="line">n <span class="built_in">ls</span>                     <span class="comment"># Output downloaded versions</span></span><br><span class="line">n ls-remote [version]    <span class="comment"># Output matching versions available for download</span></span><br><span class="line">n uninstall              <span class="comment"># Remove the installed node and npm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版</span></span><br><span class="line">n latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装长期支持版本</span></span><br><span class="line">n lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">n 12.4.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换nodejs版本</span></span><br><span class="line">n</span><br><span class="line"><span class="comment"># 上下键选择已安装的版本，回车切换</span></span><br><span class="line">ο node/13.6.0</span><br><span class="line">  node/10.4.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前版本 node -v</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL252bS1zaC9udm0=">github地址</span></p>
<p>支持 macOS, Linux</p>
<h2 id="NodeSource"><a href="#NodeSource" class="headerlink" title="NodeSource"></a>NodeSource</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25vZGVzb3VyY2UvZGlzdHJpYnV0aW9ucw==">github地址</span></p>
<p>支持 Linux</p>
<h2 id="nvm-windows"><a href="#nvm-windows" class="headerlink" title="nvm-windows"></a>nvm-windows</h2><p>支持 Windows</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dz">github地址</span></p>
<p>安装</p>
<p>注意：1. 需要卸载已经安装的 nodejs 版本，并删除残留的 nodejs 程序目录（例如：”C:\Program Files\nodejs”）</p>
<ol>
<li>删除 npm 全局安装的包（”C:\Users&lt;user&gt;\AppData\Roaming\npm”</li>
</ol>
<ul>
<li><p>安装 nvm-windows <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz">下载</span></p>
</li>
<li><p>重新安装全局包<br>  安装完成后，必须为每个安装版本的node重新安装全局工具</p>
</li>
</ul>
<p>使用</p>
<p>nvm-windows runs in an Admin shell. You’ll need to start powershell or Command Prompt as Administrator to use nvm-windows</p>
<p>NVM for Windows is a command line tool. Simply type nvm in the console for help. The basic commands are:</p>
<ul>
<li><code>nvm arch [32|64]</code>: Show if node is running in 32 or 64 bit mode. Specify 32 or 64 to override the default architecture.</li>
<li><code>nvm install &lt;version&gt; [arch]</code>: The version can be a node.js version or “latest” for the latest stable version. Optionally specify whether to install the 32 or 64 bit version (defaults to system arch). Set [arch] to “all” to install 32 AND 64 bit versions.</li>
<li><code>nvm list [available]</code>: List the node.js installations. Type available at the end to show a list of versions available for download.</li>
<li><code>nvm on</code>: Enable node.js version management.</li>
<li><code>nvm off</code>: Disable node.js version management (does not uninstall anything).</li>
<li><code>nvm proxy [url]</code>: Set a proxy to use for downloads. Leave [url] blank to see the current proxy. Set [url] to “none” to remove the proxy.</li>
<li><code>nvm uninstall &lt;version&gt;</code>: Uninstall a specific version.</li>
<li><code>nvm use &lt;version&gt; [arch]</code>: Switch to use the specified version. Optionally specify 32&#x2F;64bit architecture. nvm use <arch> will continue using the selected version, but switch to 32&#x2F;64 bit mode based on the value supplied to <arch>. For information about using use in a specific directory (or using .nvmrc), please refer to issue #16.</li>
<li><code>nvm root &lt;path&gt;</code>: Set the directory where nvm should store different versions of node.js. If <path> is not set, the current root will be displayed.</li>
<li><code>nvm version</code>: Displays the current running version of NVM for Windows.</li>
<li><code>nvm node_mirror &lt;node_mirror_url&gt;</code>: Set the node mirror.People in China can use <span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy9taXJyb3JzL25vZGUv">https://npm.taobao.org/mirrors/node/</span></li>
<li><code>nvm npm_mirror &lt;npm_mirror_url&gt;</code>: Set the npm mirror.People in China can use <span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy9taXJyb3JzL25wbS8=">https://npm.taobao.org/mirrors/npm/</span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs 基本使用</title>
    <url>/409.html</url>
    <content><![CDATA[<h1 id="nodejs-基本介绍"><a href="#nodejs-基本介绍" class="headerlink" title="nodejs 基本介绍"></a>nodejs 基本介绍</h1><h2 id="为什么要学习-nodejs"><a href="#为什么要学习-nodejs" class="headerlink" title="为什么要学习 nodejs"></a>为什么要学习 nodejs</h2><ol>
<li>降低编程语言切换的成本(nodejs 实质上用的还是 javascript)</li>
<li>NodeJS 是前端项目的基础设施，前端项目中用到的大量工具 (大前端)</li>
<li>nodejs 在处理高并发上有得天独厚的优势(利用 nodejs 做中间层)</li>
<li>对于前端工程师，面试时对于 nodejs 有一定的要求</li>
</ol>
<h2 id="node-js-是什么？"><a href="#node-js-是什么？" class="headerlink" title="node.js 是什么？"></a>node.js 是什么？</h2><p>node.js，也叫作 node，或者 nodejs，指的都是一个平台</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnLw==">node.js 官方网站</span></li>
<li><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi8=">node.js 中文网</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbm9kZWpzLm9yZy8=">node.js 中文社区</span></li>
</ol>
<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，nodejs 允许 javascript 代码运行在服务端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. nodejs不是一门新的编程语言，nodejs是在服务端运行javascript的运行环境</span><br><span class="line">2. 运行环境：写得程序想要运行必须要有对应的运行环境</span><br><span class="line">	php代码必须要有apache服务器</span><br><span class="line">	在web端，浏览器就是javascript的运行环境</span><br><span class="line">	在node端，nodejs就是javascript的运行环境</span><br><span class="line">2. javascript并不只是能运行在浏览器端，浏览器端能够运行js是因为浏览器有js解析器，因此只需要有js解析器，任何软件都可以运行js。</span><br><span class="line">3. nodejs可以在服务端运行js，因为nodejs是基于chrome v8的js引擎</span><br></pre></td></tr></table></figure>

<p><strong>nodejs 的本质：不是一门新的编程语言，nodejs 是 javascript 运行在服务端的运行环境，编程语言还是 javascript</strong></p>
<h2 id="nodejs-与浏览器的区别"><a href="#nodejs-与浏览器的区别" class="headerlink" title="nodejs 与浏览器的区别"></a>nodejs 与浏览器的区别</h2><p>相同点：nodejs 与浏览器都是 js 的运行环境，都能够解析 js 程序。对于 ECMAScript 语法来说，在 nodejs 和浏览器中都能运行</p>
<p>不同点：nodejs 无法使用 DOM 和 BOM 的操作，浏览器无法执行 nodejs 中的文件操作等功能</p>
<h2 id="nodejs-可以干什么？"><a href="#nodejs-可以干什么？" class="headerlink" title="nodejs 可以干什么？"></a>nodejs 可以干什么？</h2><ol>
<li>开发服务端程序</li>
<li>开发命令行工具（CLI），比如 npm，webpack，gulp，less，sass 等</li>
<li>开发桌面应用程序（借助 node-webkit、electron 等框架实现）</li>
</ol>
<h1 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h1><h2 id="nodejs-版本"><a href="#nodejs-版本" class="headerlink" title="nodejs 版本"></a>nodejs 版本</h2><p>下载地址</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==">当前版本</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkL3JlbGVhc2VzLw==">历史版本</span></li>
</ul>
<p>官网术语解释</p>
<ul>
<li>LTS 版本：Long-term Support 版本，长期支持版，即稳定版。</li>
<li>Current 版本：Latest Features 版本，最新版本，新特性会在该版本中最先加入</li>
</ul>
<p>查看 node 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h1 id="运行-nodejs-程序"><a href="#运行-nodejs-程序" class="headerlink" title="运行 nodejs 程序"></a>运行 nodejs 程序</h1><h2 id="方式一：使用-node-执行-js-文件"><a href="#方式一：使用-node-执行-js-文件" class="headerlink" title="方式一：使用 node 执行 js 文件"></a>方式一：使用 node 执行 js 文件</h2><ul>
<li><p>创建 js 文件 <code>helloworld.js</code></p>
</li>
<li><p>写 nodejs 的内容：<code>console.log(&#39;hello nodejs&#39;)</code></p>
</li>
<li><p>打开命令窗口 <code>cmd</code></p>
<ul>
<li>shift 加右键打开命令窗口，执行 <code>node 文件名.js</code>即可</li>
</ul>
</li>
<li><p>执行命令：<code>node helloworld.js</code></p>
</li>
</ul>
<p>注意：在 nodejs 中是无法使用 DOM 和 BOM 的内容的，因此<code>document</code>， <code>window</code>等内容是无法使用的</p>
<h2 id="方式二：REPL-介绍"><a href="#方式二：REPL-介绍" class="headerlink" title="方式二：REPL 介绍"></a>方式二：REPL 介绍</h2><ol>
<li>REPL 全称: Read-Eval-Print-Loop（交互式解释器）<ul>
<li>R 读取 - 读取用户输入，解析输入了 Javascript 数据结构并存储在内存中</li>
<li>E 执行 - 执行输入的数据结构</li>
<li>P 打印 - 输出结果</li>
<li>L 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出</li>
</ul>
</li>
<li>在 REPL 中编写程序 （类似于浏览器开发人员工具中的控制台功能）<ul>
<li>直接在控制台输入 <code>node</code> 命令进入 REPL 环境</li>
</ul>
</li>
<li>按两次 Control + C 退出 REPL 界面 或者 输入 <code>.exit</code> 退出 REPL 界面<ul>
<li>按住 control 键不要放开, 然后按两下 c 键</li>
</ul>
</li>
</ol>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>当要求系统运行一个<strong>程序</strong> 而没有告诉它程序所在的完整路径时</p>
<ol>
<li>首先在<strong>当前目录</strong>中查找和该字符串匹配的可执行文件</li>
<li>进入用户 path 环境变量查找</li>
<li>进入系统 path 环境变量查找</li>
</ol>
<p>配置环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">找到环境变量：计算机 --右键--&gt; 属性 --&gt; 高级系统设置 --&gt; 高级 --&gt; 环境变量</span><br></pre></td></tr></table></figure>

<h1 id="global-模块-全局变量"><a href="#global-模块-全局变量" class="headerlink" title="global 模块-全局变量"></a>global 模块-全局变量</h1><p>JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。</p>
<p>在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 <code>global</code>，所有全局变量（除了 global 本身以外）都是 global 对象的属性。</p>
<p>在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。</p>
<p><strong>常用的 global 属性</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">console</span>: 用于打印日志</span><br><span class="line"><span class="built_in">setTimeout</span>/<span class="attr">clearTimeout</span>: 设置清除延时器</span><br><span class="line"><span class="built_in">setInterval</span>/<span class="attr">clearInterval</span>: 设置清除定时器</span><br><span class="line"></span><br><span class="line"><span class="attr">__dirname</span>: 当前文件的路径，不包括文件名</span><br><span class="line">__filename：当前文件的路径，包括文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与模块化相关的，模块化的时候会用到</span></span><br><span class="line"><span class="built_in">require</span></span><br><span class="line"><span class="built_in">exports</span></span><br><span class="line"><span class="variable language_">module</span></span><br></pre></td></tr></table></figure>

<h1 id="fs-模块"><a href="#fs-模块" class="headerlink" title="fs 模块"></a>fs 模块</h1><blockquote>
<p>fs 模块是 nodejs 中最常用的一个模块，因此掌握 fs 模块非常的有必要，fs 模块的方法非常多，用到了哪个查哪个即可。</p>
<p>文档地址：<span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9hcGkvZnMuaHRtbA==">http://nodejs.cn/api/fs.html</span></p>
</blockquote>
<p>在 nodejs 中，提供了 fs 模块，这是 node 的核心模块</p>
<p>注意：</p>
<ol>
<li>除了 global 模块中的内容可以直接使用，其他模块都是需要加载的。</li>
<li>fs 模块不是全局的，不能直接使用。因此需要导入才能使用。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><blockquote>
<p>语法：fs.readFile(file[, options], callback)</p>
</blockquote>
<p>方式一：不传编码参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1：文件路径</span></span><br><span class="line"><span class="comment">// 参数2：读取文件的回调函数</span></span><br><span class="line"><span class="comment">// 回调函数参数1：错误对象，如果读取失败，err 会包含错误信息，如果读取成功，err 是 null</span></span><br><span class="line"><span class="comment">// 回调函数参数2：读取成功后的数据（是一个Buffer对象）</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>()) <span class="comment">// 将Buffer对象转换成字符串</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>方式二：传编码参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1：文件的路径</span></span><br><span class="line"><span class="comment">// 参数2：编码，如果设置了，返回一个字符串，如果没有设置，会返回一个buffer对象</span></span><br><span class="line"><span class="comment">// 参数3：回调函数</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>关于 Buffer 对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Buffer对象是Nodejs用于处理二进制数据的</span><br><span class="line">2. 其实任意的数据在计算机底层都是二进制数据，因为计算机只认识二进制</span><br><span class="line">3. 所以读取任意的文件，返回的结果都是二进制数据，即Buffer对象</span><br><span class="line">4. Buffer对象可以调用toString()方法转换成字符串</span><br></pre></td></tr></table></figure>

<h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><blockquote>
<p>语法：fs.writeFile(file, data[, options], callback)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1：文件路径(如果文件不存在，会自动创建)</span></span><br><span class="line"><span class="comment">// 参数2：写入的文件内容（注意：写入的内容会覆盖以前的内容）</span></span><br><span class="line"><span class="comment">// 参数3：写文件后的回调函数</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;hello world&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入文件失败&#x27;</span>, err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入文件成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>写文件的时候，会把原来的内容给覆盖掉</li>
</ol>
<blockquote>
<p>语法：fs.appendFile(path, data[, options], callback)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1：追加的文件名(如果文件不存在，会自动创建)</span></span><br><span class="line"><span class="comment">// 参数2：追加的文件内容</span></span><br><span class="line"><span class="comment">// 参数3：追加文件后的回调函数</span></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;我是追加的内容&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;追加文件内容失败&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;追加文件内容成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>思考：如果没有 appendFile，通过 readFile 与 writeFile 应该怎么实现？</p>
<h2 id="文件同步与异步的说明"><a href="#文件同步与异步的说明" class="headerlink" title="文件同步与异步的说明"></a>文件同步与异步的说明</h2><blockquote>
<p>fs 中所有的文件操作，都提供了异步和同步两种方式</p>
</blockquote>
<p>异步方式：不会阻塞代码的执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步方式</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>同步方式：会阻塞代码的执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同步方式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line"><span class="keyword">const</span> result = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br></pre></td></tr></table></figure>

<p>总结：同步操作使用虽然简单，但是会影响性能，因此尽量使用异步方法，尤其是在工作过程中。</p>
<h2 id="其他-api（了解）"><a href="#其他-api（了解）" class="headerlink" title="其他 api（了解）"></a>其他 api（了解）</h2><p>方法有很多，但是用起来都非常的简单，学会查文档</p>
<p>文档：<span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9hcGkvZnMuaHRtbA==">http://nodejs.cn/api/fs.html</span></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>fs.readFile(path, callback)</code></td>
<td>读取文件内容（异步）</td>
</tr>
<tr>
<td><code>fs.readFileSync(path)</code></td>
<td>读取文件内容（同步）</td>
</tr>
<tr>
<td><code>fs.writeFile(path, data, callback)</code></td>
<td>写入文件内容（异步）</td>
</tr>
<tr>
<td><code>fs.writeFileSync(path, data)</code></td>
<td>写入文件内容（同步）</td>
</tr>
<tr>
<td><code>fs.appendFile(path, data, callback)</code></td>
<td>追加文件内容（异步）</td>
</tr>
<tr>
<td><code>fs.appendFileSync(path, data)</code></td>
<td>追加文件内容（同步）</td>
</tr>
<tr>
<td><code>fs.rename(oldPath, newPath, callback)</code></td>
<td>重命名文件（异步）</td>
</tr>
<tr>
<td><code>fs.renameSync(oldPath, newPath)</code></td>
<td>重命名文件（同步）</td>
</tr>
<tr>
<td><code>fs.unlink(path, callback)</code></td>
<td>删除文件（异步）</td>
</tr>
<tr>
<td><code>fs.unlinkSync(path)</code></td>
<td>删除文件（同步）</td>
</tr>
<tr>
<td><code>fs.mkdir(path, mode, callback)</code></td>
<td>创建文件夹（异步）</td>
</tr>
<tr>
<td><code>fs.mkdirSync(path, mode)</code></td>
<td>创建文件夹（同步）</td>
</tr>
<tr>
<td><code>fs.rmdir(path, callback)</code></td>
<td>删除文件夹（异步）</td>
</tr>
<tr>
<td><code>fs.rmdirSync(path)</code></td>
<td>删除文件夹（同步）</td>
</tr>
<tr>
<td><code>fs.readdir(path, option, callback)</code></td>
<td>读取文件夹内容（异步）</td>
</tr>
<tr>
<td><code>fs.readdirSync(path, option)</code></td>
<td>读取文件夹内容（同步）</td>
</tr>
<tr>
<td><code>fs.stat(path, callback)</code></td>
<td>查看文件状态（异步）</td>
</tr>
<tr>
<td><code>fs.statSync(path)</code></td>
<td>查看文件状态（同步）</td>
</tr>
</tbody></table>
<h1 id="path-模块"><a href="#path-模块" class="headerlink" title="path 模块"></a>path 模块</h1><h2 id="路径操作的问题"><a href="#路径操作的问题" class="headerlink" title="路径操作的问题"></a>路径操作的问题</h2><p>在读写文件的时候，文件路径可以写相对路径或者绝对路径</p>
<p>data.txt 是相对路径，读取当前目录下的 data.txt，相对路径相对的是指向 node 命令的路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果node命令不是在当前目录下执行就会报错，在当前执行node命令的目录下查找data.txt，找不到</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>相对路径：相对于执行 node 命令的路径</p>
<p>推荐使用绝对路径：<code>__dirname</code>: 当前文件的目录，<code>__filename</code>: 当前文件的目录，包含文件名</p>
<h2 id="path-模块的常用方法"><a href="#path-模块的常用方法" class="headerlink" title="path 模块的常用方法"></a>path 模块的常用方法</h2><blockquote>
<p>关于路径，在 linux 系统中，路径分隔符使用的是<code>/</code>，但是在 windows 系统中，路径使用的<code>\</code></p>
</blockquote>
<p>在我们拼写路径的时候会带来很多的麻烦，经常会出现 windows 下写的代码，在 linux 操作系统下执行不了，path 模块就是为了解决这个问题而存在的。</p>
<p>常用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">join</span>() <span class="comment">// 拼接路径，返回拼接后的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// windows系统下</span></span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;gg&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;abc\def\gg\a.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// linux系统下</span></span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>,<span class="string">&#x27;gg&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;abc/def/gg/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line">【优化读写文件的代码】</span><br><span class="line"></span><br><span class="line">其他方法:</span><br><span class="line">path.<span class="title function_">basename</span>(path[, ext])	返回文件的最后一部分</span><br><span class="line">path.<span class="title function_">dirname</span>(path)	返回路径的目录名</span><br><span class="line">path.<span class="title function_">extname</span>(path)	获取路径的扩展名(后缀名)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> temp = <span class="string">&#x27;abc\\def\\gg\\a.html&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(temp)) <span class="comment">//a.html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(temp)) <span class="comment">//abc\def\gg</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(temp)) <span class="comment">//.html</span></span><br></pre></td></tr></table></figure>

<h2 id="path-模块其他-api（了解）"><a href="#path-模块其他-api（了解）" class="headerlink" title="path 模块其他 api（了解）"></a>path 模块其他 api（了解）</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>path.basename(path[, ext])</code></td>
<td>返回文件的最后一部分</td>
</tr>
<tr>
<td><code>path.dirname(path)</code></td>
<td>返回路径的目录名</td>
</tr>
<tr>
<td><code>path.extname(path)</code></td>
<td>获取路径的扩展名</td>
</tr>
<tr>
<td><code>path.isAbsolute(path)</code></td>
<td>判断目录是否是绝对路径</td>
</tr>
<tr>
<td><code>path.join([...paths])</code></td>
<td>将所有的 path 片段拼接成一个规范的路径</td>
</tr>
<tr>
<td><code>path.normalize(path)</code></td>
<td>规范化路径</td>
</tr>
<tr>
<td><code>path.parse(path)</code></td>
<td>将一个路径解析成一个 path 对象</td>
</tr>
<tr>
<td><code>path.format(pathObj)</code></td>
<td>讲一个 path 对象解析成一个规范的路径</td>
</tr>
</tbody></table>
<h1 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h1><h2 id="创建服务器基本步骤"><a href="#创建服务器基本步骤" class="headerlink" title="创建服务器基本步骤"></a>创建服务器基本步骤</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 导入http模块，http模块是node的核心模块，作用是用来创建 http 服务器的</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建服务器</span></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 服务器处理请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我接收到请求了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 启动服务器，监听某个端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9999</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功了, 请访问： http://localhost:9999&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>详细说明</p>
<ol>
<li>给服务器注册 request 事件，只要服务器接收到了客户端的请求，就会触发 request 事件</li>
<li>request 事件有两个参数，req 表示请求对象，可以获取所有与请求相关的信息，res 是响应对象，可以获取所有与响应相关的信息</li>
<li>服务器监听的端口范围为：1-65535 之间，推荐使用 3000 以上的端口，因为 3000 以下的端口一般留给系统使用</li>
</ol>
<h2 id="request-对象详解"><a href="#request-对象详解" class="headerlink" title="request 对象详解"></a>request 对象详解</h2><p>文档地址：<span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJz">http://nodejs.cn/api/http.html#http_message_headers</span></p>
<p>常见属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">headers</span>: 所有的请求头信息</span><br><span class="line">method：请求的方式</span><br><span class="line">rawHeaders：所有的请求头信息（数组的方式）</span><br><span class="line">url：请求的地址（url地址的路径部分）</span><br><span class="line">	请求 <span class="attr">http</span>:<span class="comment">//127.0.0.1:3000/index 获取到的是：/index</span></span><br><span class="line">	请求 <span class="attr">http</span>:<span class="comment">//127.0.0.1:3000 获取到的是：/</span></span><br></pre></td></tr></table></figure>

<p>注意：在发送请求的时候，可能会出现两次请求的情况，这是因为谷歌浏览器会自动增加一个<code>favicon.ico</code>的请求</p>
<p>小结：request 对象中，常用的就是 method 和 url 两个参数</p>
<h2 id="response-对象详解"><a href="#response-对象详解" class="headerlink" title="response 对象详解"></a>response 对象详解</h2><p>文档地址：<span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9hcGkvaHR0cC5odG1sI2h0dHBfY2xhc3NfaHR0cF9zZXJ2ZXJyZXNwb25zZQ==">http://nodejs.cn/api/http.html#http_class_http_serverresponse</span></p>
<p>常见的属性和方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">write</span>(data): 给浏览器发送响应体，可以调用多次，从而提供连续的响应体</span><br><span class="line">res.<span class="title function_">end</span>()：通知服务器，所有响应头和响应主体都已被发送，即服务器将其视为已完成</span><br><span class="line">res.<span class="title function_">end</span>(data)：结束请求，并且响应一段内容，相当于res.<span class="title function_">write</span>(data) + res.<span class="title function_">end</span>()</span><br><span class="line">res.<span class="property">statusCode</span>: 响应的的状态码 <span class="number">200</span> <span class="number">404</span> <span class="number">500</span></span><br><span class="line">res.<span class="property">statusMessage</span>: 响应的状态信息（不能有中文）， 如果不设置会根据statusCode自动设置</span><br><span class="line">res.<span class="title function_">setHeader</span>(name, value)：设置响应头信息，比如<span class="string">&#x27;content-type&#x27;</span>，<span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">res.<span class="title function_">writeHead</span>(statusCode, statusMessage, options)：设置响应头，同时可以设置状态码和状态信息</span><br><span class="line">	options 是对象，写响应头的键值对</span><br></pre></td></tr></table></figure>

<p><strong>注意：必须先设置响应头，才能设置响应主体。</strong></p>
<ul>
<li><p>注意：浏览器中输入的 URL 地址，仅仅是一个标识，可以不与服务器中的文件路径一致。也就是说：返回什么内容是由服务端的逻辑决定</p>
</li>
<li><p>路由 : url 标示和对应文件&#x2F;数据的一一对应关系</p>
</li>
</ul>
<h2 id="模拟-Apache-服务器"><a href="#模拟-Apache-服务器" class="headerlink" title="模拟 Apache 服务器"></a>模拟 Apache 服务器</h2><ul>
<li>根据 <code>req.url</code> 读取不同的页面内容，返回给浏览器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求: 简单模仿apache服务器，浏览器发送127.0.0.1:8888/index.html</span></span><br><span class="line"><span class="comment">// 对应的返回www文件夹下面的index.html的内容</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 监听请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 根据不同请求输出不同响应数据</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/&#x27;</span> || req.<span class="property">url</span> === <span class="string">&#x27;/i&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取www下面的index.html</span></span><br><span class="line">    <span class="keyword">let</span> filename = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    fs.<span class="title function_">readFile</span>(filename, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取失败&#x27;</span>)</span><br><span class="line">      <span class="comment">// 服务器响应文件</span></span><br><span class="line">      res.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">      res.<span class="property">statusMessage</span> = <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">      res.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/l&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取list.html</span></span><br><span class="line">    <span class="keyword">let</span> filename = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;list.html&#x27;</span>)</span><br><span class="line">    fs.<span class="title function_">readFile</span>(filename, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取失败&#x27;</span>)</span><br><span class="line">      <span class="comment">// 服务器响应文件</span></span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&#x27;OOOOOOK&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      res.<span class="title function_">end</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 返回浏览器, 未找到资源</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&#x27;NOT FOUND&#x27;</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;404 ,资源未找到&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 开启服务器</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器开启了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="MIME-类型"><a href="#MIME-类型" class="headerlink" title="MIME 类型"></a>MIME 类型</h2><ul>
<li>MIME(Multipurpose Internet Mail Extensions)多用途 Internet 邮件扩展类型 是一种表示文档性质和格式的标准化方式</li>
<li>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理文档；因此服务器将正确的 MIME 类型附加到响应对象的头部是非常重要的</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9NSU1FX1R5cGVz">MIME 类型</span></li>
</ul>
<h2 id="mime-模块"><a href="#mime-模块" class="headerlink" title="mime 模块"></a>mime 模块</h2><ul>
<li>作用：获取文件的 MIME 类型</li>
<li>安装：<code>npm i mime</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径对应的 MIME 类型</span></span><br><span class="line">mime.<span class="title function_">getType</span>(<span class="string">&#x27;txt&#x27;</span>) <span class="comment">// &#x27;text/plain&#x27;</span></span><br><span class="line"><span class="comment">// 根据 MIME 获取到文件后缀名</span></span><br><span class="line">mime.<span class="title function_">getExtension</span>(<span class="string">&#x27;text/plain&#x27;</span>) <span class="comment">// &#x27;txt&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="nodemon-自动重启"><a href="#nodemon-自动重启" class="headerlink" title="nodemon 自动重启"></a>nodemon 自动重启</h1><ul>
<li>作用：监听到 js 文件修改后，自动重启 node 程序</li>
<li>安装：<code>npm i -g nodemon</code></li>
<li>使用：<code>nodemon app.js</code> 运行 node 程序</li>
</ul>
<h1 id="hacknews-案例"><a href="#hacknews-案例" class="headerlink" title="hacknews 案例"></a>hacknews 案例</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS8=">Hacker News 示例</span></li>
<li>路由（route）：就是一套映射规则，根据 url 地址分配到对应的处理程序</li>
</ul>
<h2 id="功能划分"><a href="#功能划分" class="headerlink" title="功能划分"></a>功能划分</h2><ul>
<li>1 新闻列表页 - &#x2F;index get</li>
<li>2 新闻详情页 - &#x2F;details get</li>
<li>3 新闻添加页 - &#x2F;submit get</li>
<li>4 新闻添加请求 - &#x2F;add post</li>
</ul>
<h2 id="art-template-模板引擎"><a href="#art-template-模板引擎" class="headerlink" title="art-template 模板引擎"></a>art-template 模板引擎</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hdWkuZ2l0aHViLmlvL2FydC10ZW1wbGF0ZS96aC1jbi9kb2NzLw==">文档</span></li>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install art-template</span><br></pre></td></tr></table></figure>

<ul>
<li>核心方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于模板路径渲染模板</span></span><br><span class="line"><span class="comment">// 参数1：文件的路径</span></span><br><span class="line"><span class="comment">// 参数2：数据</span></span><br><span class="line"><span class="comment">// 返回值：返回渲染后的内容</span></span><br><span class="line"><span class="comment">// template(filename, data)</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="title function_">template</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;pages&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>), &#123; <span class="attr">name</span>: <span class="string">&#x27;大吉大利，今晚吃鸡&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意点：文件的路径必须是绝对路径</strong>；会将整个 html 当做模板返回</p>
<h2 id="url-模块"><a href="#url-模块" class="headerlink" title="url 模块"></a>url 模块</h2><ul>
<li>说明：用于 URL 处理与解析</li>
<li>注意：通过 url 拿到的查询参数都是字符串格式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入url模块</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 URL 字符串并返回一个 URL 对象</span></span><br><span class="line"><span class="comment">// 第一个参数：表示要解析的URL字符串</span></span><br><span class="line"><span class="comment">// 第二个参数：是否将query属性（查询参数）解析为一个对象，如果为：true，则query是一个对象</span></span><br><span class="line"><span class="keyword">var</span> ret = url.<span class="title function_">parse</span>(<span class="string">&#x27;http://localhost:3000/details?id=1&amp;name=jack&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">query</span>) <span class="comment">// &#123;id: &#x27;1&#x27;, name: &#x27;jack&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="querystring-模块"><a href="#querystring-模块" class="headerlink" title="querystring 模块"></a>querystring 模块</h2><ul>
<li>用于解析与格式化 URL 查询字符串</li>
<li>注意：只在专门处理查询字符串时使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo=bar&amp;abc=xyz&amp;abc=123</span></span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将查询参数转化为对象</span></span><br><span class="line"><span class="comment">// 第一个参数: 要解析的 URL 查询字符串</span></span><br><span class="line">querystring.<span class="title function_">parse</span>(<span class="string">&#x27;foo=bar&amp;abc=xyz&#x27;</span>) <span class="comment">// &#123;foo: &#x27;bar&#x27;, abc: &#x27;xyz&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="服务端重定向"><a href="#服务端重定向" class="headerlink" title="服务端重定向"></a>服务端重定向</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=">HTTP 状态码说明</span></li>
<li><span class="exturl" data-url="aHR0cDovL3NodWFpLmJlL2FyY2hpdmVzLzMwMS0zMDItcmVkaXJlY3Rpb24v">301 和 302</span></li>
<li>说明：服务端可以通过 HTTP 状态码让浏览器中的页面重定向</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">302</span>, &#123;</span><br><span class="line">  <span class="title class_">Location</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">res.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure>

<h2 id="POST-请求参数的处理"><a href="#POST-请求参数的处理" class="headerlink" title="POST 请求参数的处理"></a>POST 请求参数的处理</h2><ul>
<li>说明：POST 请求可以发送大量数据，没有大小限制</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接受POST参数</span></span><br><span class="line"><span class="keyword">var</span> postData = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// data事件：用来接受客户端发送过来的POST请求数据</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">  result += chunk</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// end事件：当POST数据接收完毕时，触发</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cosnole.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="模块化改造-hackerNews"><a href="#模块化改造-hackerNews" class="headerlink" title="模块化改造 hackerNews"></a>模块化改造 hackerNews</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 包管理工具的使用</title>
    <url>/427.html</url>
    <content><![CDATA[<h3 id="解决某些-npm-包无法下载的问题"><a href="#解决某些-npm-包无法下载的问题" class="headerlink" title="解决某些 npm 包无法下载的问题"></a>解决某些 npm 包无法下载的问题</h3><p>如 electron sass</p>
<p>修改 <code>~/.npmrc</code>，或当前项目下的<code>.npmrc</code> 文件（如果没有可以新建）增加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry=https://registry.npm.taobao.org</span><br><span class="line">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line">phantomjs_cdnurl=http://npm.taobao.org/mirrors/phantomjs</span><br><span class="line">electron_mirror=http://npm.taobao.org/mirrors/electron/</span><br><span class="line">chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver</span><br></pre></td></tr></table></figure>

<p>淘宝 npm 镜像 <span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy8=">https://npm.taobao.org/</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ucG1qcy5jb20v">npm 官网</span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS8=">npm 文档</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY24v">npm 中文文档</span></p>
<h3 id="npm-基本命令"><a href="#npm-基本命令" class="headerlink" title="npm 基本命令"></a>npm 基本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新 npm</span></span><br><span class="line">npm -v|--version</span><br><span class="line">npm install npm@latest -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># nvm : npm Version Manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索包</span></span><br><span class="line">npm search &lt;pkg&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;pkg&gt; <span class="comment"># [&lt;@scope&gt;/] 安装限定范围的包</span></span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;tag&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;version&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;version range&gt;</span><br><span class="line">npm install &lt;folder&gt;</span><br><span class="line">npm install &lt;tarball file&gt;  <span class="comment"># .tar, .tar.gz, or .tgz</span></span><br><span class="line">npm install &lt;tarball url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公有仓库</span></span><br><span class="line">npm install user/project <span class="comment"># 默认 github</span></span><br><span class="line">npm install bitbucket:user/project</span><br><span class="line">npm install gitlab:user/project<span class="comment">#semver:^5.0 # semver 版本</span></span><br><span class="line">npm install git+https://git@github.com/user/project.git</span><br><span class="line">npm install git+ssh://git@github.com/user/project.git</span><br><span class="line">npm install git://github.com/user/project.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install &lt;pkg&gt; -S|--save <span class="comment"># 安装到 dependencies</span></span><br><span class="line">npm install &lt;pkg&gt; -D|--save-dev <span class="comment"># 安装到 devDependencies</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --verbose 参数 显示安装的详细信息</span></span><br><span class="line">npm i --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># --production 参数 只会安装 dependencies 依赖，而忽略 devDependencies 依赖，用于生产环境</span></span><br><span class="line">npm i --production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装全局包</span></span><br><span class="line">npm install -g &lt;pkg&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新包</span></span><br><span class="line">npm outdated <span class="comment"># 检查可以更新的模块</span></span><br><span class="line">npm update <span class="comment"># 更新全部本地包</span></span><br><span class="line"><span class="comment"># 更新全局安装的包</span></span><br><span class="line">npm update -g <span class="comment"># 更新全部</span></span><br><span class="line">npm update -g| --global &lt;pkg&gt; <span class="comment"># 更新指定包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新方式 1</span></span><br><span class="line"><span class="comment"># 手动修改 package.json 中依赖包版本，之后执行</span></span><br><span class="line">npm install --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新方式 2 使用第三方插件：</span></span><br><span class="line">npm install -g npm-check-updates</span><br><span class="line">ncu <span class="comment"># 查看可更新包</span></span><br><span class="line">ncu -u <span class="comment"># 更新 package.json</span></span><br><span class="line">npm install <span class="comment"># 升级到最新版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地包</span></span><br><span class="line">npm uninstall &lt;pkg&gt;</span><br><span class="line">npm uninstall --save &lt;pkg&gt; <span class="comment"># 从 `package.json` 文件中删除依赖</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载全局安装的包</span></span><br><span class="line">npm uninstall -g &lt;pkg&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开官网</span></span><br><span class="line">npm docs|home [&lt;pkg&gt;]</span><br><span class="line"><span class="comment"># 打开源码仓库页面</span></span><br><span class="line">npm repo [&lt;pkg&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个项目，创建一个 package.json 文件，项目名不能为中文</span></span><br><span class="line">npm init</span><br><span class="line"><span class="comment"># 创建默认 package.json 文件 快速的初始化一个项目，会使用文件夹名称作为项目名</span></span><br><span class="line">npm init --<span class="built_in">yes</span> or -y</span><br></pre></td></tr></table></figure>

<p>简写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install  可简写成 npm i</span><br><span class="line"></span><br><span class="line">npm uninstall 可简写成 npm uni</span><br></pre></td></tr></table></figure>

<h3 id="npm-修改源"><a href="#npm-修改源" class="headerlink" title="npm 修改源"></a>npm 修改源</h3><p><strong>修改全局配置</strong></p>
<ul>
<li>进入~&#x2F;.npmrc 增加 <code>registry=https://registry.npm.taobao.org</code></li>
<li>通过命令 <code>npm config set registry https://registry.npm.taobao.org</code></li>
</ul>
<p><strong>修改当前项目的 npm 源</strong></p>
<p>在 <code>package.json</code> 同级目录下创建 <code>.npmrc</code> 文件，增加 <code>registry=https://registry.npm.taobao.org</code></p>
<p><strong>临时使用指定源下载</strong> <code>npm install jquery --registry=https://registry.npm.taobao.org</code></p>
<p><strong>使用 nrm 管理源</strong></p>
<h3 id="npm-配置文件"><a href="#npm-配置文件" class="headerlink" title="npm 配置文件"></a>npm 配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .npmrc 配置文件位置（~/.npmrc）</span></span><br><span class="line">npm config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm 缓存目录，默认 C:\Users\&lt;username&gt;\AppData\Roaming\npm-cache</span></span><br><span class="line">npm config get cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 npm 缓存：注意：如果网速慢的话，会导致下载失败。 再重新下载之前，建议使用该命令，清除刚才下载的缓存，否则有可能一直无法下载成功</span></span><br><span class="line">npm cache clean --force | -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm 全局 node 包位置：  默认在 C:\Users\用户名\AppData\Roaming\npm目录下</span></span><br><span class="line">npm config get prefix</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm root -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 npm 全局文件位置及缓存文件位置</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;&lt;new_path&gt;&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;&lt;new_path&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>使用 NPM 下载和发布代码时都会接触到版本号。NPM 使用语义版本号来管理代码</p>
<p>语义版本号分为 X.Y.Z 三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。</p>
<ul>
<li>如果只是修复 bug，需要更新 Z 位</li>
<li>如果是新增了功能，但是向下兼容，需要更新 Y 位</li>
<li>如果有大变动，向下不兼容，需要更新 X 位</li>
</ul>
<h3 id="nrm-使用"><a href="#nrm-使用" class="headerlink" title="nrm 使用"></a>nrm 使用</h3><p>nrm：npm registry manager（npm 仓库地址管理工具）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置列表，带 `*` 号即为当前使用的配置</span></span><br><span class="line">nrm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换源</span></span><br><span class="line">nrm use 源的别名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源</span></span><br><span class="line">nrm add 别名 地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测速</span></span><br><span class="line">nrm <span class="built_in">test</span> 别名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除源</span></span><br><span class="line">nrm del 别名</span><br></pre></td></tr></table></figure>

<h3 id="查看项目安装了那些包"><a href="#查看项目安装了那些包" class="headerlink" title="查看项目安装了那些包"></a>查看项目安装了那些包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm list --depth=0 [--dev | --production]</span><br><span class="line">npm list --depth=0</span><br></pre></td></tr></table></figure>

<p>–depth 表示深度，我们使用的模块会有依赖，深度为零的时候，不会显示依赖模块</p>
<h3 id="查看全局安装的包"><a href="#查看全局安装的包" class="headerlink" title="查看全局安装的包"></a>查看全局安装的包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm list --depth=0 --global</span><br></pre></td></tr></table></figure>

<h3 id="package-json-文件"><a href="#package-json-文件" class="headerlink" title="package.json 文件"></a>package.json 文件</h3><p>package.json 文件，包（项目）描述文件，用来管理组织一个包（项目），它是一个纯 JSON 格式的</p>
<ul>
<li>作用：描述当前项目（包）的信息，描述当前包（项目）的依赖项</li>
<li>如何生成：<code>npm init</code>或者<code>npm init -y</code></li>
<li>作用<ul>
<li>作为一个标准的包，必须要有<code>package.json</code>文件进行描述</li>
<li>一个项目的 node_modules 目录通常都会很大，不用拷贝 node_modules 目录，可以通过 package.json 文件配合<code>npm install</code> 直接安装项目所有的依赖项</li>
</ul>
</li>
<li>描述内容</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myproject&quot;</span><span class="punctuation">,</span> <span class="comment">// 描述了包的名字，不能有中文</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 包的描述信息</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span> <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 配置一些脚本</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 关键字（方便搜索）</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 作者信息</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span> <span class="comment">// 许可证，开源协议</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 项目依赖</span></span><br><span class="line">    <span class="attr">&quot;bootstrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：一个合法的 package.json，必须要有 name 和 version 两个属性</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>nuxt.js 学习笔记</title>
    <url>/1782.html</url>
    <content><![CDATA[<h2 id="nuxt"><a href="#nuxt" class="headerlink" title="nuxt"></a>nuxt</h2><p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9udXh0anMub3JnLw==">https://nuxtjs.org/</span><br>中文：<span class="exturl" data-url="aHR0cHM6Ly96aC5udXh0anMub3JnLw==">https://zh.nuxtjs.org/</span> <span class="exturl" data-url="aHR0cHM6Ly93d3cubnV4dGpzLmNuLw==">https://www.nuxtjs.cn/</span></p>
<h2 id="nuxt-渲染流程"><a href="#nuxt-渲染流程" class="headerlink" title="nuxt 渲染流程"></a>nuxt 渲染流程</h2><p>在任何 Vue 组件的生命周期内， 只有 beforeCreate 和 created 这两个方法会在 客户端和服务端被调用。其他生命周期函数仅在客户端被调用。<br><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205617.png"></p>
<h3 id="asyncData-方法"><a href="#asyncData-方法" class="headerlink" title="asyncData 方法"></a>asyncData 方法</h3><p><span class="exturl" data-url="aHR0cHM6Ly96aC5udXh0anMub3JnL2FwaS8=">https://zh.nuxtjs.org/api/</span></p>
<p>用于在渲染组件之前异步获取数据，在服务端或路由更新之前被调用。在这个方法被调用的时候，第一个参数被设定为当前页面的上下文对象，你可以利用 asyncData 方法来获取数据并返回给当前组件。</p>
<p>注意：由于 asyncData 方法是在组件 初始化 前被调用的，所以在方法内是没有办法通过 this 来引用组件的实例对象。<br>asyncData 只在首屏被执行，其它时候相当于 created 或 mounted 在客户端渲染页面。</p>
<h3 id="fetch-方法"><a href="#fetch-方法" class="headerlink" title="fetch 方法"></a>fetch 方法</h3><p>在 2.12 版本之前：</p>
<p>fetch 方法用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它不会设置组件的数据。<br>警告: 您无法在内部使用 this 获取组件实例，fetch 是在组件初始化之前被调用</p>
<p>在 2.12 版本中，fetch 有大更新，fetch(context)已被弃用，可以在 fetch() 中直接使用 this，参考：<span class="exturl" data-url="aHR0cHM6Ly9udXh0anMub3JnL2FwaS9wYWdlcy1mZXRjaA==">https://nuxtjs.org/api/pages-fetch</span></p>
<p>参考 2：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZWNiODEzNzUxODgyNTQzMTg0NTk4ZmU=">https://juejin.im/post/5ecb813751882543184598fe</span><br><span class="exturl" data-url="aHR0cHM6Ly96aC5udXh0anMub3JnL2Jsb2cvdW5kZXJzdGFuZGluZy1ob3ctZmV0Y2gtd29ya3MtaW4tbnV4dC0yLTEyLw==">https://zh.nuxtjs.org/blog/understanding-how-fetch-works-in-nuxt-2-12/</span></p>
<h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aC5udXh0anMub3JnL2FwaS9jb250ZXh0">https://zh.nuxtjs.org/api/context</span></p>
<p>服务端上下文对象，可以在 <code>asyncData</code> <code>fetch</code> <code>plugins</code> <code>middlewares</code> <code>modules</code> <code>store/nuxtServerInit</code> 等特殊的 Nuxt 生命周期区域中使用</p>
<h2 id="nuxt-配置"><a href="#nuxt-配置" class="headerlink" title="nuxt 配置"></a>nuxt 配置</h2><h3 id="配置启动端口"><a href="#配置启动端口" class="headerlink" title="配置启动端口"></a>配置启动端口</h3><p>以下两者都可以配置启动端口</p>
<p>第一种</p>
<p>nuxt.config.js :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">package.json <span class="punctuation">:</span></span><br><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nuxt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h3 id="引入-element-ui"><a href="#引入-element-ui" class="headerlink" title="引入 element-ui"></a>引入 element-ui</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-ui</span><br></pre></td></tr></table></figure>

<p>修改 <code>nuxt.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@/plugins/element-ui&#x27;</span>],</span><br><span class="line">  <span class="attr">transpile</span>: [<span class="regexp">/^element-ui/</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建 <code>plugins/element-ui.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Element</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Element</span>)</span><br></pre></td></tr></table></figure>

<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><span class="exturl" data-url="aHR0cHM6Ly96aC5udXh0anMub3JnL2FwaS9jb25maWd1cmF0aW9uLWVudg==">https://zh.nuxtjs.org/api/configuration-env</span></p>
<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nuxt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env BASE_URL=testxxx nuxt build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:production&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env BASE_URL=productionxxx nuxt build&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>nuxt.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过以下两种方式来使用 baseUrl 变量：</p>
<p>通过 <code>process.env.baseUrl</code><br>通过 <code>context.env.baseUrl</code></p>
<h3 id="自定义路由配置"><a href="#自定义路由配置" class="headerlink" title="自定义路由配置"></a>自定义路由配置</h3><p>在 Nuxt.js 中，路由是基于文件结构自动生成，无需配置。自动生成的路由配置可在 .nuxt&#x2F;router.js 中查看。</p>
<p>配置路由以 <code>.html</code> 结尾</p>
<p>nuxt.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="attr">middleware</span>: <span class="string">&#x27;router&#x27;</span>,</span><br><span class="line">    <span class="title function_">extendRoutes</span>(<span class="params">routes, resolve</span>) &#123;</span><br><span class="line">      routes.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;case&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/case.html&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;pages/case/_id.vue&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      routes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> path = element.<span class="property">path</span></span><br><span class="line">        <span class="keyword">if</span> (path !== <span class="string">&#x27;/&#x27;</span> &amp;&amp; !path.<span class="title function_">includes</span>(<span class="string">&#x27;.html&#x27;</span>)) &#123;</span><br><span class="line">          path = path + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">          element.<span class="property">path</span> = path</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="axios-配置"><a href="#axios-配置" class="headerlink" title="axios 配置"></a>axios 配置</h3><p>使用 Axios，并配置全局拦截器，处理跨域</p>
<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @nuxtjs/axios @nuxtjs/proxy --save</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;@nuxtjs/axios&#x27;</span>], <span class="comment">// 不需要加入@nuxtjs/proxy</span></span><br><span class="line">  <span class="attr">axios</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&#x27;/api&#x27;</span>, <span class="comment">// baseURL</span></span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/api/&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="comment">// 代理地址</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件中使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  asyncData (&#123; app, $axios &#125;) &#123;</span><br><span class="line">    <span class="comment">// app.$axios == $axios</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">$axios</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$axios</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>设置全局拦截器：新建一个&#x2F;plugins&#x2F;axios.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">&#123; $axios &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> axios = $axios</span><br><span class="line">  <span class="comment">// 基本配置</span></span><br><span class="line">  axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">  axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求回调</span></span><br><span class="line">  axios.<span class="title function_">onRequest</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回回调</span></span><br><span class="line">  axios.<span class="title function_">onResponse</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误回调</span></span><br><span class="line">  axios.<span class="title function_">onError</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 plugins 配置它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">src</span>: <span class="string">&#x27;@/plugins/axios&#x27;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;client&#x27;</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="配置-css-预处理器"><a href="#配置-css-预处理器" class="headerlink" title="配置 css 预处理器"></a>配置 css 预处理器</h3><p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D less less-loader</span><br></pre></td></tr></table></figure>

<p>无需配置，模板内直接使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="token-的设置与存储"><a href="#token-的设置与存储" class="headerlink" title="token 的设置与存储"></a>token 的设置与存储</h3><p>在前后端分离的项目中，一般都会存放到本地存储中。但 Nuxt.js 不同，由于服务端渲染的特点，部分请求在服务端发起，我们无法获取 localStorage 或 sessionStorage。</p>
<p>可以使用 cookie，并借助 cookie-universal-nuxt 模块（该模块只是帮助我们注入，主要实现依赖 cookie-universal），不管在服务端还是客户端，cookie-universal-nuxt 都为我们提供一致的 api，它内部会帮我们去适配对应的方法。</p>
<p>安装 cookie-universal-nuxt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run cookie-universal-nuxt --save</span><br></pre></td></tr></table></figure>

<p>nuxt.config.js :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;cookie-universal-nuxt&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 $cookies 进行使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务端：</span></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line">app.<span class="property">$cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">app.<span class="property">$cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">app.<span class="property">$cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端：</span></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>之后需要改造下 axios，让它在请求时带上验证信息：</p>
<p>&#x2F;plugins&#x2F;axios.js :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">&#123; app: &#123; $axios, $cookies &#125; &#125;</span>) &#123;</span><br><span class="line">  $axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 头部带上验证信息</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;X-Token&#x27;</span>] = $cookies.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;)</span><br><span class="line">  $axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^[4|5]/</span>.<span class="title function_">test</span>(response.<span class="property">status</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response.<span class="property">statusText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="middleware-中间件使用"><a href="#middleware-中间件使用" class="headerlink" title="middleware 中间件使用"></a>middleware 中间件使用</h3><p><span class="exturl" data-url="aHR0cHM6Ly96aC5udXh0anMub3JnL2FwaS9wYWdlcy1taWRkbGV3YXJl">https://zh.nuxtjs.org/api/pages-middleware</span></p>
<p>全局配置: 这种中间件使用是注入到全局的每个页面中</p>
<p>nuxt.config.js :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="attr">middleware</span>: [<span class="string">&#x27;auth&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你希望中间件只运行于某个页面，可以配置页面的 middleware 选项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">middleware</span>: <span class="string">&#x27;auth&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-keep-alive"><a href="#使用-keep-alive" class="headerlink" title="使用 keep-alive"></a>使用 keep-alive</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL251eHQvbnV4dC5qcy90cmVlL2Rldi9leGFtcGxlcy93aXRoLWtlZXAtYWxpdmU=">https://github.com/nuxt/nuxt.js/tree/dev/examples/with-keep-alive</span></p>
<p>layouts&#x2F;default.vue:</p>
<template>
  <Nuxt keep-alive/>
</template>

<p>直接给 Nuxt 添加 keep-alive 虽然可以实现页面缓存，但是每次页面切换时都会去请求接口</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2ZmNWYwMmU1MWQ0NTEwNjI0Zjk3YWI=">https://juejin.im/post/5cff5f02e51d4510624f97ab</span></p>
<h3 id="分离-css"><a href="#分离-css" class="headerlink" title="分离 css"></a>分离 css</h3><p>nuxt.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">build</span>: &#123;</span><br><span class="line"><span class="attr">extractCSS</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="head-配置"><a href="#head-配置" class="headerlink" title="head 配置"></a>head 配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">meta</span>: [</span><br><span class="line">  &#123; <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;viewport&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;width=device-width, initial-scale=1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;author&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;cuilongjin&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&#x27;http-equiv&#x27;</span>: <span class="string">&#x27;X-UA-Compatible&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;IE=edge&#x27;</span> &#125;,</span><br><span class="line">],</span><br><span class="line"><span class="attr">link</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;image/x-icon&#x27;</span>,</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;/logo.png&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br><span class="line"><span class="attr">script</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">src</span>: <span class="string">&#x27;/moveheader.js&#x27;</span>, <span class="comment">// 引入 js 路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">innerHTML</span>: <span class="string">&#x27;console.log(&#x27;</span><span class="number">1</span><span class="string">&#x27;)&#x27;</span> <span class="comment">// 直接引入 js 代码</span></span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 如果使用innerHTML直接引入 js 代码，代码中的引号会被转换为实体字符，导致代码不能正常执行，所以需要配置此项</span></span><br><span class="line"><span class="attr">__dangerouslyDisableSanitizers</span>: [<span class="string">&#x27;script&#x27;</span>],</span><br></pre></td></tr></table></figure>

<h3 id="添加百度统计代码"><a href="#添加百度统计代码" class="headerlink" title="添加百度统计代码"></a>添加百度统计代码</h3><p>在 plugins 目录下新建 <code>baidu.js</code> 文件，内容如下：<br>注意修改xxxxxxxxxxx编号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> ** 只在生产模式的客户端中使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">client</span> &amp;&amp; process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 百度统计脚本</span></span><br><span class="line">  <span class="keyword">var</span> _hmt = _hmt || []</span><br><span class="line">  ;(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    hm.<span class="property">src</span> = <span class="string">&#x27;https://hm.baidu.com/hm.js?xxxxxxxxxxx&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> s = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;script&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(hm, s)</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; <span class="attr">app</span>: &#123; router &#125;, store &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 每次路由变更时进行pv统计</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">client</span> &amp;&amp; process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> _hmt = _hmt || []</span><br><span class="line">      ;(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> hm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        hm.<span class="property">src</span> = <span class="string">&#x27;https://hm.baidu.com/hm.js?xxxxxxxxxxx&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> s = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;script&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        s.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(hm, s)</span><br><span class="line">      &#125;)()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 <code>nuxt-config.js</code> 中添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">&#x27;~plugins/baidu.js&#x27;</span>, <span class="attr">mode</span>: <span class="string">&#x27;client&#x27;</span> &#125;,</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure>

<h2 id="兼容-ie9-ie10"><a href="#兼容-ie9-ie10" class="headerlink" title="兼容 ie9 ie10"></a>兼容 ie9 ie10</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NoYW5XYWhGdW5nL251eHQtanVlamluLXByb2plY3Q=">参考 demo</span><br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZWJmNWRjZjUxODgyNTZkNDI2NjI4NWQ=">掘金教程</span></p>
<p><code>window.__NUXT__</code> 如何去掉</p>
<p>vue 实例中 通过 <code>this.$nuxt.context</code> 访问 context</p>
<p>nuxt generate 动态路由配置</p>
<p>nuxt 配置自定义 webpack loader 处理图片 css</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>web 中媒体资源自动播放问题</title>
    <url>/1276.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>媒体资源 添加 autoplay 在移动端不会生效</p>
<p>通过监听 scroll 事件 手动调用 play 方法会报如下错误：Uncaught (in promise) DOMException: play() failed because the user didn’t interact with the document first.</p>
<p>ios 端报如下错误：Uncaught (in promise) NotAllowedError:The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.</p>
<h3 id="自动播放政策"><a href="#自动播放政策" class="headerlink" title="自动播放政策"></a>自动播放政策</h3><p>Chrome 浏览器的自动播放政策在 2018 年 4 月更改：</p>
<ul>
<li>始终允许静音自动播放。</li>
<li>用户已与页面进行了交互（单击，点击等）。</li>
</ul>
<p>详细政策不一一列举了，访问 <code>https://goo.gl/xX8pDD</code> 查看详情</p>
<h3 id="Web-开发人员的最佳做法"><a href="#Web-开发人员的最佳做法" class="headerlink" title="Web 开发人员的最佳做法"></a>Web 开发人员的最佳做法</h3><p>重点：永远不要假设视频会播放，并且在视频未实际播放时也不要显示暂停按钮。</p>
<p>您应该始终查看 play 函数返回的 Promise，看它是否被拒绝：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="title function_">play</span>()</span><br><span class="line"><span class="keyword">if</span> (promise !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">  promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Autoplay started!</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Autoplay was prevented.</span></span><br><span class="line">      <span class="comment">// Show a &quot;Play&quot; button so that user can start playback.</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用静音的自动播放功能，并让他们选择取消静音</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">muted</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>关于 a 标签 target_blank 使用 rel=noopener</title>
    <url>/798.html</url>
    <content><![CDATA[<p>为什么要使用rel&#x3D;’noopener’？</p>
<p>举个例子: a.html 和 b.html 两个页面</p>
<p>a.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;b.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>da<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">opener</span>.<span class="property">location</span>.<span class="property">href</span> =<span class="string">&quot;http://wqdy.top&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中在 <code>a.html</code> 中有个超链接，点击后在新标签页打开 <code>b.html</code>页面，但是发现原 <code>a.html</code> 页面已经变成了其他页面。原因是使用 <code>target=_blank</code> 打开新的窗口时，赋予了新的窗口一些权限可以操作原窗口，其中 <code>window.location</code> 就是一个。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203759.png"></p>
<p>为了防止 <code>window.opener</code> 被滥用，提高网站的安全性，在使用 <code>targrt=_blank</code> 时需要加上 <code>rel=noopener</code>，同时为了兼容也可以加上 <code>rel=noreferrer</code>。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>前端开发中常用的一些技巧</title>
    <url>/1136.html</url>
    <content><![CDATA[<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="文字溢出省略号显示"><a href="#文字溢出省略号显示" class="headerlink" title="文字溢出省略号显示"></a>文字溢出省略号显示</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 强制一行内显示文本 */</span></span><br><span class="line"><span class="selector-class">.single-line</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 强制最多三行显示文本 */</span></span><br><span class="line"><span class="selector-class">.multi-line</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="number">3</span>; <span class="comment">/* 强制三行显示 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/* 不是必须 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="让-div-宽度自适应文字内容"><a href="#让-div-宽度自适应文字内容" class="headerlink" title="让 div 宽度自适应文字内容"></a>让 div 宽度自适应文字内容</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fit-width</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="opacity-0、display-none、visibility-hidden"><a href="#opacity-0、display-none、visibility-hidden" class="headerlink" title="opacity:0、display:none、visibility:hidden"></a>opacity:0、display:none、visibility:hidden</h4><p><code>opacity:0</code> 和 <code>display:none</code>，若父节点元素应用了 <code>opacity:0</code> 和 <code>display:none</code>，无论其子孙元素如何挣扎都不会再出现在大众视野<br>而若父节点元素应用 <code>visibility:hidden</code>，子孙元素应用 <code>visibility:visible</code>，那么其就会毫无意外的显现出来</p>
<h4 id="max-width-优先级高于行内样式加-important"><a href="#max-width-优先级高于行内样式加-important" class="headerlink" title="max-width 优先级高于行内样式加 !important"></a>max-width 优先级高于行内样式加 !important</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px !important;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>div 的宽度为 50px</p>
<h4 id="使用-CSS-网格定义-main-和-aside-元素"><a href="#使用-CSS-网格定义-main-和-aside-元素" class="headerlink" title="使用 CSS 网格定义 main 和 aside 元素"></a>使用 CSS 网格定义 main 和 aside 元素</h4><p>CSS 网格可用于定义布局中的 main 部分和 aside 部分，这是 CSS 网格的绝佳用途。问题是，即使 aside 是空的，它的高度也会和 main 的高度相等。</p>
<p>要修复这个问题，可以让 aside 元素与其父元素的起点对齐，这样它的高度就不会扩展了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">12</span>, <span class="built_in">minmax</span>(<span class="number">0</span>, <span class="number">1</span>fr));</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* align-self 将会让 aside 元素与其父元素的起点对齐。 */</span></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">align-self</span>: start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">4</span> / <span class="number">13</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-display-inline-block-时奇怪的空隙"><a href="#使用-display-inline-block-时奇怪的空隙" class="headerlink" title="使用 display: inline-block 时奇怪的空隙"></a>使用 display: inline-block 时奇怪的空隙</h4><p>给两个或两个以上的元素设置 display: inline-block 或者 display: inline ，将会导致它们之间产生一个微小的空隙。代码中的换行和缩进（连续空格）被渲染成了一个空格造成的</p>
<p>通过给父元素设置 font-size: 0 可以简单地解决这个问题。</p>
<h4 id="交互式-HTML-元素的字体不生效"><a href="#交互式-HTML-元素的字体不生效" class="headerlink" title="交互式 HTML 元素的字体不生效"></a>交互式 HTML 元素的字体不生效</h4><p>给整个文档设置字体的时候，字体并不会应用于诸如 input， button select 和 textarea 这些元素上。默认情况下，它们并不会继承文档字体，因为浏览器给它们应用了系统字体。</p>
<p>要修复这个问题，直接给他们设置字体属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line">select,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: your-font-name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="css-调试"><a href="#css-调试" class="headerlink" title="css 调试"></a>css 调试</h4><p>将代码添加到浏览器的控制台运行，页面上所有元素的轮廓都会显示出来。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vYWRkeW9zbWFuaS9mZDM5OTllYTdmY2UyNDI3NTZiMQ==">https://gist.github.com/addyosmani/fd3999ea7fce242756b1</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[].<span class="property">forEach</span>.<span class="title function_">call</span>($$(<span class="string">&#x27;*&#x27;</span>), <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  a.<span class="property">style</span>.<span class="property">outline</span> = <span class="string">&#x27;1px solid #&#x27;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">1</span> &lt;&lt; <span class="number">24</span>))).<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="压缩或拉伸图片"><a href="#压缩或拉伸图片" class="headerlink" title="压缩或拉伸图片"></a>压缩或拉伸图片</h4><p>用 CSS 调整一张图片的大小时，如果纵横比与图片的宽高不一致，则图片会被压缩或拉伸。</p>
<p>解决方法很简单：使用 CSS 的 object-fit。它的功能和给背景图片设置 background-size: cover 类似。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: contain;</span><br><span class="line">  <span class="comment">/* object-fit: cover; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>object-fit 语法参考<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL29iamVjdC1maXQ=">https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit</span></p>
<blockquote>
<p>object-fit 属性由下列的值中的单独一个关键字来指定。</p>
<p>取值<br>contain 保持长宽比，以长边填充<br>cover 保持长宽比，以短边填充，多余的会被裁减掉<br>fill 完全填充，会拉伸<br>none 保持其原有的尺寸<br>scale-down 内容的尺寸与 none 或 contain 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。</p>
</blockquote>
<h4 id="滚动条样式"><a href="#滚动条样式" class="headerlink" title="滚动条样式"></a>滚动条样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -webkit-scrollbar-thumb 滚动条手柄 */</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb:hover &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -webkit-scrollbar-track 滚动条轨道 */</span></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*滚动条上半边或左半边*/</span></span><br><span class="line">::-webkit-scrollbar-track-piece:start &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -webkit-scrollbar-button 滚动条的轨道的两端按钮 */</span></span><br><span class="line"><span class="comment">/*滚动条上边或左边按钮*/</span></span><br><span class="line">::-webkit-scrollbar-button:start &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -webkit-scrollbar-corne 垂直滚动条和水平滚动条相交的地方 */</span></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="卡券样式"><a href="#卡券样式" class="headerlink" title="卡券样式"></a>卡券样式</h4><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204135.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.coupon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at right bottom, transparent <span class="number">10px</span>, <span class="number">#ffffff</span> <span class="number">0</span>) top right / <span class="number">50%</span> <span class="number">50%</span> no-repeat, <span class="built_in">radial-gradient</span>(circle at left bottom, transparent <span class="number">10px</span>, <span class="number">#ffffff</span> <span class="number">0</span>) top left / <span class="number">50%</span> <span class="number">50%</span> no-repeat, <span class="built_in">radial-gradient</span>(circle at right top, transparent <span class="number">10px</span>, <span class="number">#ffffff</span> <span class="number">0</span>) bottom right / <span class="number">50%</span> <span class="number">50%</span> no-repeat, <span class="built_in">radial-gradient</span>(circle at left top, transparent <span class="number">10px</span>, <span class="number">#ffffff</span> <span class="number">0</span>) bottom left / <span class="number">50%</span> <span class="number">50%</span> no-repeat;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="阴影效果"><a href="#阴影效果" class="headerlink" title="阴影效果"></a>阴影效果</h4><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204206.jpeg"></p>
<p>气泡阴影</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tip</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">129</span>, <span class="number">127</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0px</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">245</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">0.9</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tip</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="number">#fff</span> transparent;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tip</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">129</span>, <span class="number">127</span>) transparent;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三角形阴影</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shadow-triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">129</span>, <span class="number">127</span>) transparent;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">10px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">238</span>, <span class="number">125</span>, <span class="number">55</span>, <span class="number">0.5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺圆投影</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.circle-square</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at bottom right, transparent <span class="number">20px</span>, <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">129</span>, <span class="number">127</span>) <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">238</span>, <span class="number">132</span>, <span class="number">66</span>, <span class="number">0.9</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1px-边框"><a href="#1px-边框" class="headerlink" title="1px 边框"></a>1px 边框</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 方式1 */</span></span><br><span class="line"><span class="selector-class">.border</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方式2 */</span></span><br><span class="line"><span class="selector-class">.border</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">50%</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="记住密码之后，输入框变色问题"><a href="#记住密码之后，输入框变色问题" class="headerlink" title="记住密码之后，输入框变色问题"></a>记住密码之后，输入框变色问题</h4><p>谷歌浏览器使用如下方式解决</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>:-webkit-autofill,</span><br><span class="line">textarea:-webkit-autofill,</span><br><span class="line">select:-webkit-autofill &#123;</span><br><span class="line">	-webkit-text-fill-<span class="attribute">color</span>: <span class="number">#ededed</span> <span class="meta">!important</span>; // 自动填充文字颜色</span><br><span class="line">	-webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="number">1000px</span> white inset <span class="meta">!important</span>; // 使用内阴影覆盖，这个内阴影一定要大，要不然盖不住</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>火狐浏览器无效</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>常用命令</title>
    <url>/417.html</url>
    <content><![CDATA[<h2 id="快速删除-node-modules-文件夹"><a href="#快速删除-node-modules-文件夹" class="headerlink" title="快速删除 node_modules 文件夹"></a>快速删除 node_modules 文件夹</h2><p>系统命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cmd</span></span><br><span class="line"><span class="comment"># /q 直接删除，不需要二次确认</span></span><br><span class="line"><span class="comment"># /s 允许删除非空目录</span></span><br><span class="line">rd /q/s node_modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># powershell</span></span><br><span class="line"><span class="built_in">rmdir</span> -r -Force node_modules</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">rm</span> -r -Force node_modules</span><br></pre></td></tr></table></figure>

<p>使用 npm 包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i rimraf -g</span><br><span class="line">rimraf node_modules</span><br><span class="line"></span><br><span class="line">npm i -g dlf</span><br><span class="line">dlf node_modules</span><br></pre></td></tr></table></figure>

<h2 id="一次执行多条命令"><a href="#一次执行多条命令" class="headerlink" title="一次执行多条命令"></a>一次执行多条命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cmd 使用 &amp;&amp; 连接多个命令</span></span><br><span class="line"><span class="built_in">cd</span> vue &amp;&amp; npm i</span><br><span class="line"><span class="comment"># powershell 使用 | 连接多条命令</span></span><br><span class="line"><span class="built_in">cd</span> vue | npm i</span><br></pre></td></tr></table></figure>


<h2 id="删除一个文件夹内字节小于-10kb-的文件"><a href="#删除一个文件夹内字节小于-10kb-的文件" class="headerlink" title="删除一个文件夹内字节小于 10kb 的文件"></a>删除一个文件夹内字节小于 10kb 的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出所有大小小于10k的文件</span></span><br><span class="line"><span class="comment"># find ./ -size -10k &gt; NoNeedSite.txt</span></span><br><span class="line">find ./ -size -10k -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>浏览器的工作原理</title>
    <url>/400.html</url>
    <content><![CDATA[<h2 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h2><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203825.png"></p>
<ul>
<li>用户界面－ 包括地址栏、后退&#x2F;前进按钮、书签目录等，也就是你所看到的除了用来显示你所请求页面的主窗口之外的其他部分</li>
<li>浏览器引擎－ 用来查询及操作渲染引擎的接口</li>
<li>渲染引擎（浏览器内核）－ 用来显示请求的内容，例如，如果请求内容为 html，它负责解析 html 及 css，并将解析后的结果显示出来</li>
<li>网络－ 用来完成网络调用，例如 http 请求，它具有平台无关的接口，可以在不同平台上工作</li>
<li>UI 后端－ 用来绘制类似组合选择框及对话框等基本组件，具有不特定于某个平台的通用接口，底层使用操作系统的用户接口</li>
<li>JS 解释器－ 用来解释执行 JS 代码</li>
<li>数据存储－ 属于持久层，浏览器需要在硬盘中保存类似 cookie 的各种数据，HTML5 定义了 Storage 技术，这是一种轻量级完整的客户端存储技术</li>
</ul>
<h2 id="主流的渲染引擎"><a href="#主流的渲染引擎" class="headerlink" title="主流的渲染引擎"></a>主流的渲染引擎</h2><blockquote>
<p>浏览器的渲染引擎也叫排版引擎，或者是<strong>浏览器内核</strong></p>
</blockquote>
<p>主流的 渲染引擎 有</p>
<ul>
<li><strong>Chrome 浏览器</strong>: Blink 引擎（WebKit 的一个分支）。</li>
<li><strong>Safari 浏览器</strong>: WebKit 引擎，windows 版本 2008 年 3 月 18 日推出正式版，但苹果已于 2012 年 7 月 25 日停止开发 Windows 版的 Safari。</li>
<li><strong>FireFox 浏览器</strong>: Gecko 引擎。</li>
<li><strong>Opera 浏览器</strong>: Blink 引擎(早期版使用 Presto 引擎）。</li>
<li><strong>Internet Explorer 浏览器</strong>: Trident 引擎。</li>
<li><strong>Microsoft Edge 浏览器</strong>: EdgeHTML 引擎（Trident 的一个分支）。</li>
</ul>
<h2 id="渲染引擎工作原理"><a href="#渲染引擎工作原理" class="headerlink" title="渲染引擎工作原理"></a>渲染引擎工作原理</h2><p>渲染引擎解析的基本流程：</p>
<ul>
<li>解析 HTML 构建 <code>DOM树</code>，同时解析所有的 css 样式，构建 css 规则</li>
<li>根据 DOM 树和 css 规则合并构建 <code>渲染树</code><ul>
<li>DOM 树上的节点没有样式的，渲染树的节点有样式的</li>
<li>渲染树上的节点都是需要渲染的，所以渲染树上没有像<code>head</code>标签 或 <code>display: none</code>这样的元素，但是它们在 DOM 树中</li>
</ul>
</li>
<li>对渲染树进行布局，定位坐标和大小、确定是否换行、确定 position、overflow、z-index 等等，这个过程叫<code>layout</code> 或 <code>reflow</code></li>
<li>绘制渲染树，调用操作系统底层 API(UI Backend)进行绘图操作</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203846.png"></p>
<p><strong>webkit 内核工作流程</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203907.png"></p>
<p><strong>gecko 内核工作流程</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203924.jpeg"></p>
<h1 id="重绘与回流"><a href="#重绘与回流" class="headerlink" title="重绘与回流"></a>重绘与回流</h1><h2 id="重绘与回流-1"><a href="#重绘与回流-1" class="headerlink" title="重绘与回流"></a>重绘与回流</h2><p><code>回流(reflow)</code>: 又叫重排，当 render tree 中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。</p>
<p><code>重绘(repaint)</code>：当 render tree 中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如 background-color。</p>
<ol>
<li>每个页面至少需要一次回流+重绘</li>
<li>回流必将引起重绘</li>
</ol>
<p>回流什么时候发生？</p>
<ul>
<li>添加或者删除可见的 DOM 元素</li>
<li>元素位置改变</li>
<li>元素尺寸改变——边距、填充、边框、宽度和高度</li>
<li>内容改变——比如文本改变或者图片大小改变而引起的计算值宽度和高度改变</li>
<li>页面渲染初始化</li>
<li>浏览器窗口尺寸改变(resize事件)发生时</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span></span><br><span class="line">s.<span class="property">padding</span> = <span class="string">&#x27;2px&#x27;</span> <span class="comment">// 回流+重绘</span></span><br><span class="line">s.<span class="property">border</span> = <span class="string">&#x27;1px solid red&#x27;</span> <span class="comment">// 再一次 回流+重绘</span></span><br><span class="line">s.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span> <span class="comment">// 再一次重绘</span></span><br><span class="line">s.<span class="property">backgroundColor</span> = <span class="string">&#x27;#ccc&#x27;</span> <span class="comment">// 再一次 重绘</span></span><br><span class="line">s.<span class="property">fontSize</span> = <span class="string">&#x27;14px&#x27;</span> <span class="comment">// 再一次 回流+重绘</span></span><br><span class="line"><span class="comment">// 添加node，再一次 回流+重绘</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;abc!&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="聪明的浏览器"><a href="#聪明的浏览器" class="headerlink" title="聪明的浏览器"></a>聪明的浏览器</h2><blockquote>
<p>从上个实例代码中可以看到几行简单的 JS 代码就引起了 6 次左右的回流、重绘。而且我们也知道回流的花销也不小，如果每句 JS 操作都去回流重绘的话，浏览器可能就会受不了。所以很多浏览器都会优化这些操作，浏览器会维护 1 个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会 flush 队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p>
</blockquote>
<p>虽然有了浏览器的优化，但有时候我们写的一些代码可能会强制浏览器提前 flush 队列，这样浏览器的优化可能就起不到作用了。当你向浏览器请求一些 style 信息的时候，就会让浏览器 flush 队列，比如：</p>
<ul>
<li>offsetTop, offsetLeft, offsetWidth, offsetHeight</li>
<li>scrollTop&#x2F;Left&#x2F;Width&#x2F;Height</li>
<li>clientTop&#x2F;Left&#x2F;Width&#x2F;Height</li>
<li>width,height</li>
<li>请求了 getComputedStyle(), 或者 IE 的 currentStyle</li>
</ul>
<h2 id="如何性能优化"><a href="#如何性能优化" class="headerlink" title="如何性能优化"></a>如何性能优化</h2><blockquote>
<p>减少回流与重绘的次数，就需要简单对渲染树的操作</p>
</blockquote>
<ul>
<li>直接使用 <code>className</code> 修改样式，少用 style 设置样式</li>
<li>让要操作的元素进行”离线处理”，处理完后一起更新<ul>
<li>使用 <code>DocumentFragment</code> 进行缓存操作，引发一次回流和重绘</li>
<li>使用 <code>display:none</code> 技术，只引发两次回流和重绘</li>
</ul>
</li>
<li>将需要多次重排的元素，position 属性设为 absolute 或 fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素为动画的 HTML 元素，例如动画，那么修改他们的 CSS 是会大大减小 reflow</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>移动 web</title>
    <url>/389.html</url>
    <content><![CDATA[<h1 id="移动-web-基础"><a href="#移动-web-基础" class="headerlink" title="移动 web 基础"></a>移动 web 基础</h1><h2 id="移动端开发现状"><a href="#移动端开发现状" class="headerlink" title="移动端开发现状"></a>移动端开发现状</h2><ul>
<li>移动 web 开发指的是需要适配移动设备的网页开发</li>
<li>移动 web 开发与 pc 端 web 开发没有本质的区别，使用的还是 HTML&#x2F;CSS&#x2F;JavaScript 的技术</li>
<li>移动 web 开发与 pc 端 web 开发的区别是什么？</li>
</ul>
<p>移动端的浏览器与 pc 端不同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">谷歌浏览器 苹果浏览器、 UC浏览器 QQ浏览器 欧朋浏览器 百度手机浏览器  360安全浏览器  搜狗浏览器  猎豹浏览器等</span><br><span class="line">国内的手机浏览器都是根据webkit内核修改过来的，国内没有自主研发的内核，国内的操作系统也是基于Android系统修改的。</span><br><span class="line"></span><br><span class="line">因此在移动端，css3 属性只需要加 webkit 前缀即可</span><br></pre></td></tr></table></figure>

<p>移动端设备尺寸不一样(尺寸非常多，碎片化很严重)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Android</span>： <span class="number">320</span>*<span class="number">480</span> <span class="number">480</span>*<span class="number">800</span>  <span class="number">540</span>*<span class="number">960</span> <span class="number">720</span>*<span class="number">1280</span> <span class="number">1080</span>*<span class="number">1920</span> 2k屏 4k屏</span><br><span class="line">iphpne：  <span class="number">640</span>*<span class="number">960</span> <span class="number">640</span>*<span class="number">1136</span> <span class="number">750</span>*<span class="number">1334</span> <span class="number">1242</span>*<span class="number">2208</span></span><br></pre></td></tr></table></figure>

<h2 id="移动端开发分类"><a href="#移动端开发分类" class="headerlink" title="移动端开发分类"></a>移动端开发分类</h2><ul>
<li>原生 app（native app）</li>
<li>混合 app（Hybrid app）</li>
<li>web 应用（webApp）</li>
</ul>
<p><strong>原生 app（native app）</strong></p>
<blockquote>
<p>原生 app 是基于操作系统的开发，比如安卓，ios，windows phone,他们只能在各自的操作系统上运行。</p>
</blockquote>
<p>优点：</p>
<ol>
<li>可以访问操作系统，获取更多的资源（gps，摄像头，传感器，麦克风等）</li>
<li>速度快，性能高，用户体验好</li>
<li>可以离线使用</li>
</ol>
<p>缺点：</p>
<ol>
<li>开发成本高</li>
<li>需要安装和更新，更新与发布需要审核。</li>
</ol>
<p><strong>Web App</strong></p>
<blockquote>
<p>Web 应用使用 H5C3 开发页面，为浏览器设计的基于 web 的应用，可以在各种智能设备的手机浏览器上运行。不需要安装即可运行。</p>
</blockquote>
<p>优点：</p>
<ol>
<li>支持设备广泛</li>
<li>开发成本低（使用）</li>
<li>可以随时上线与更新，无需审核</li>
</ol>
<p>缺点：</p>
<ol>
<li>用户体验极度依赖网速</li>
<li>要求联网</li>
<li>无法获取手机的资源（gps，摄像头）</li>
</ol>
<p><strong>混合 app（Hybrid App）</strong></p>
<blockquote>
<p>Hybrid App 是指介于 web-app、native-app 这两者之间的 app,它虽然看上去是一个 Native App，但只有一个 UI WebView，里面访问的是一个 Web App。（淘宝、京东、手机百度）</p>
</blockquote>
<p>Hybird App 说白了就是使用了 Native app 的壳，里面其实还是 HTML5 页面</p>
<p>优点：</p>
<ol>
<li>开发成本和难度更低，兼容多个平台</li>
<li>也可以访问手机的操作系统资源。</li>
<li>更新维护更方便</li>
</ol>
<p>缺点：</p>
<ol>
<li>用户体验相比原生 app 稍差</li>
<li>性能依赖于网速</li>
</ol>
<p>总结：</p>
<p>三种开发各有优缺点，具体用什么需要根据实际情况而定，比如预算，app 注重功能还是内容等</p>
<h2 id="屏幕与分辨率"><a href="#屏幕与分辨率" class="headerlink" title="屏幕与分辨率"></a>屏幕与分辨率</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTc1Mzg1NQ==">理解设备像素、设备独立像素和 css 像素</span></p>
<blockquote>
<p>移动设备与 PC 设备最大的差异在于屏幕，这主要体现在屏幕尺寸和屏幕分辨率两个方面</p>
</blockquote>
<p>屏幕尺寸</p>
<p>通常我们所指的屏幕<code>尺寸</code>，实际上指的是屏幕对角线的长度（一般用英寸来度量）</p>
<p><code>1英寸 = 2.54厘米</code></p>
<p>屏幕分辨率</p>
<p>分辨率则一般用像素来度量，表示屏幕水平和垂直方向的像素数，例如 1920*1080 指的是屏幕垂直方向和水平方向分别有 1920 和 1080 个像素点而构成</p>
<p><code>像素</code>：指计算机显示设备中的最小单位，即一个像素点的大小。每一个像素点可以理解为就是屏幕上的一个发光点</p>
<p>像素密度 ppi</p>
<p><code>PPI (Pixels Per Inch)</code>表示屏幕每英寸的像素数</p>
<p>PPI 值的越大说明单位尺寸里所能容纳的像素数量就越多，所能展现画面的品质也就越精细，反之就越粗糙</p>
<h2 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h2><blockquote>
<p>设备像素 (device pixels）也叫物理像素</p>
</blockquote>
<p>设备像素指的是显示器上的真实像素，每个像素的大小是屏幕固有的属性，屏幕出厂以后就不会改变了</p>
<p>设备分辨率描述的就是这个显示器的宽和高分别是多少个设备像素</p>
<p>设备像素和设备分辨率交给操作系统来管理，浏览器不知道、也不需要知道设备分辨率的大小，浏览器只需要知道<strong>逻辑分辨率</strong>就可以了</p>
<h2 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h2><blockquote>
<p>设备独立像素（Device Independent Pixels）也叫逻辑像素、设备无关像素。在 IOS 设备上叫<code>PT</code>，Android 设备上叫<code>DP</code>，在 css 中，叫<code>PX</code></p>
</blockquote>
<p>为了能够保证 <code>图像内容在不同的 PPI 设备看上去大小应该差不多</code> ，操作系统定义了一个单位：设备独立像素，用设备独立像素定义的尺寸，不管屏幕的参数如何，都能以合适的大小显示（这也是设备独立像素名字的由来）</p>
<p>对于那些像素密度高的屏幕，操作系统将多个设备像素划分为一个逻辑像素。屏幕的像素密度越高，就需要更多的设备像素来显示一个设备独立像素。至于将多少设备像素划分为一个逻辑像素，这由操作系统决定</p>
<p>获取设备的像素比</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> <span class="comment">// 物理像素 与 css 像素的比值 DPR</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>screen.width/height</code>得到的屏幕宽度和高度就是逻辑分辨率（单位：设备独立像素）</p>
<h2 id="css-像素与缩放"><a href="#css-像素与缩放" class="headerlink" title="css 像素与缩放"></a>css 像素与缩放</h2><p>在缩放比例为 100% 的情况下，一个 css 像素大小等于一个设备独立像素</p>
<p>缩放页面的时候，元素的 css 像素数量不会改变，改变的只是每个 css 像素的大小</p>
<p>缩放比例 &#x3D; css 像素边长 &#x2F; 设备独立像素边长</p>
<p>如果原本元素宽度为 128 个设备独立像素，那么缩放 200% 以后元素宽度为 256 个设备独立像素（css 像素宽度始终是 128）</p>
<p>桌面浏览器上缩放机制是 page zoom，缩放会导致 CSS 像素边长的改变，从而导致 window.devicePixelRatio 的改变</p>
<p>在移动端缩放机制是 pinch zoom，计算 window.devicePixelRatio 时，不考虑 pinch zoom 对 CSS 像素尺寸的影响，因此 window.devicePixelRatio 不会随缩放而改变</p>
<h2 id="2-倍图与-3-倍图"><a href="#2-倍图与-3-倍图" class="headerlink" title="2 倍图与 3 倍图"></a>2 倍图与 3 倍图</h2><blockquote>
<p>以后同学在工作的过程中，从 UI 那拿到的设计图通常都是 640 的设计图或者是 750 的设计图</p>
</blockquote>
<p>把更多的像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度</p>
<p>设备像素比 devicePixelRatio：即像素的压缩比例</p>
<p><strong>结论 ：在移动端为了在高清屏手机上显示得更加细腻，通常会使用更大的图片，比如 2 倍图或者 3 倍图</strong></p>
<h2 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口 viewport"></a>视口 viewport</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问题：一个电脑上的网站，在手机端访问，效果是什么样的？</span><br><span class="line"></span><br><span class="line">iPhone5 的设备宽度只有 320px，一张宽度为 640px 的图片在手机端访问，显示的效果是什么？</span><br><span class="line"></span><br><span class="line">1. 在手机端，html的 大小都是 980px，为什么？</span><br><span class="line">这主要是历史原因导致的，因为在移动设备刚流行的时候，网站大多都是pc端的，pc端的页面宽度一般都比较大，移动设备的宽度比较小，如果pc端页面直接在移动端显示的话，页面就会错乱。为了解决这个问题，移动端html的大小直接就定死成了980px（因为早起的pc端网站版心就是980px居多）</span><br><span class="line"></span><br><span class="line">2. 视口</span><br><span class="line">在 pc 端，html 的大小默认是继承了浏览器的宽度，即浏览器多宽，html 的大小就是多宽，但是在移动端，多出来了一个视口的概念（乔布斯）,视口说白了就是介于浏览器与 html 之间的一个东西，视口的宽度默认定死了 980px，因此 html 的宽度默认就是 980px，视口的特点是能够根据设备的宽度进行缩放</span><br><span class="line"></span><br><span class="line">3. 视口设置</span><br><span class="line">对于现在的移动端页面来说，视口默认为 980px 肯定不合适，因为设备宽度不够的话，视口会进行缩放，导致页面展示效果不好看</span><br></pre></td></tr></table></figure>

<p><strong>视口参数设置</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// width 设置视口的宽度</span></span><br><span class="line"><span class="comment">// width=device-width   设置视口宽度为设备的宽度（常用）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initial-scale 设置初始缩放比例</span></span><br><span class="line"><span class="comment">// initial-scale=1.0  表示不缩放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// user-scalable 设置是否允许用户缩放</span></span><br><span class="line"><span class="comment">// user-scalable=no  不允许用户缩放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// maximum-scale  设置允许的最大缩放比例</span></span><br><span class="line"><span class="comment">// maximum-scale=1.0  可以不设置，因为都禁止用户缩放了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// minimum-scale 设置允许最小缩放比</span></span><br><span class="line"><span class="comment">// minimum-scale=1.0  不设置，因为都禁用用户缩放了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准写法：</span></span><br><span class="line"><span class="comment">// 快捷键：  meta:vp + tab键</span></span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="移动端调试问题"><a href="#移动端调试问题" class="headerlink" title="移动端调试问题"></a>移动端调试问题</h2><ol>
<li>模拟器调试</li>
<li>真机调试：使用手机进行访问。</li>
</ol>
<p>手机设备五花八门，屏幕尺寸都大不一样，尤其是安卓端，给我们的页面预览带来了一些麻烦。在实际工作中，作为开发者不可能有足够的设备让我们去测试（<strong>除了测试部门</strong> ），即便有，效率也特别的低，因此开发者一般都是通过浏览器的手机模拟器来模拟不同的设备。</p>
<h1 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h1><p><strong>移动端的特点</strong></p>
<ul>
<li>手机端的兼容性问题比 PC 端小很多，因为手机端的浏览器版本比较新</li>
<li>手机端屏幕比较小，能够放的内容比较少。</li>
</ul>
<p>问题：布局的时候怎么解决屏幕大小不一致的问题？</p>
<ul>
<li>PC 端，固定版心，让所有分辨率的电脑的版心都是一样的，比如京东</li>
<li>移动端：移动端无法设置版心，因为移动端的设备屏幕本身就小，设置版心不合适。因此移动端大多会采用流式布局（百分比布局）</li>
</ul>
<p><strong>流式布局</strong>，也叫百分比布局，是移动端开发中经常使用的布局方式之一。</p>
<p>流式布局的特征：</p>
<ul>
<li>宽度自适应，高度写死，并不是百分百还原设计图</li>
<li>图标都是固定死大小的，包括字体等也是固定死的。并不是所有的东西都是自适应的。</li>
<li>一些大的图片，设置宽度为百分比自适应即可，随着屏幕大小进行变化</li>
</ul>
<p><strong>流式布局无法做到所有设备都非常逼真的还原设计图，有些设备显示效果不是特别的好看。但是流式布局是移动端非常常用的一种布局方式，比较简单，需要掌握（携程、京东)</strong></p>
<p><strong>最后一天会学习 rem 布局，配合 less 非常的方便，并且能够实现完全的自适应，包括字体以及图标等</strong></p>
<p>经典的流式布局</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 左侧固定，右侧自适应</span><br><span class="line">2. 右侧固定，左侧自适应</span><br><span class="line">3. 两侧固定，中间自适应（圣杯布局，双飞翼布局）</span><br><span class="line">4. 等分布局</span><br></pre></td></tr></table></figure>

<h1 id="touch-事件"><a href="#touch-事件" class="headerlink" title="touch 事件"></a>touch 事件</h1><p>移动端新增了 4 个与手指触摸相关的事件</p>
<ul>
<li><code>touchstart</code>: 手指放到屏幕上时触发</li>
<li><code>touchmove</code>: 手指在屏幕上滑动式触发（会触发多次）</li>
<li><code>touchend</code>: 手指离开屏幕时触发</li>
<li><code>touchcancel</code>: 系统取消 touch 事件的时候触发，比如电话</li>
</ul>
<p>每个触摸事件被触发后，会生成一个 event 对象，event 对象中<code>changedTouches</code>会记录手指滑动的信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">e.<span class="property">touches</span> <span class="comment">// 当前屏幕上的手指</span></span><br><span class="line">e.<span class="property">targetTouches</span> <span class="comment">// 当前dom元素上的手指。</span></span><br><span class="line">e.<span class="property">changedTouches</span> <span class="comment">// 触摸时发生改变的手指(重点)(如手指离开屏幕)</span></span><br></pre></td></tr></table></figure>

<p>这些列表里的每次触摸由 touch 对象组成，touch 对象里包含着触摸信息，主要属性如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e.changedTouches[0].clientX</span></span><br><span class="line">clientX / clientY <span class="comment">// 触摸点相对浏览器窗口的位置</span></span><br><span class="line">pageX / pageY <span class="comment">// 触摸点相对于页面的位置</span></span><br></pre></td></tr></table></figure>

<p>!&gt; 使用 jquery 注册 touch 类事件时，获取手指使用 <code>e.originalEvent.touchs[0]</code> ，因为 jq 对事件对象进行了封装</p>
<p>【案例：jdm-滑动轮播图】</p>
<p>【案例：jdm-区域滚动】</p>
<h2 id="iscroll-插件使用"><a href="#iscroll-插件使用" class="headerlink" title="iscroll 插件使用"></a>iscroll 插件使用</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1YmlxL2lzY3JvbGw=">https://github.com/cubiq/iscroll</span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5tYW1pY29kZS5jb20vaW5mby1kZXRhaWwtMzMxODI3Lmh0bWw=">iscroll 参考文档</span></p>
<p><strong>注意</strong>：使用 iscroll 需要满足的条件</p>
<ol>
<li>父盒子嵌套了子盒子（一个）</li>
<li>如果有多个子盒子，所以我们需要使用一个盒子把所有的子盒子包裹起来</li>
<li>如果有图片，我们需要保证图片加载完成，如果有浮动，需要清除浮动，为了保证子盒子的高度获取的是正确的</li>
<li>子盒子大小一定要超过父盒子的大小</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用：box为父盒子</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">IScroll</span>(box, &#123;</span><br><span class="line">  <span class="attr">scrollX</span>: <span class="literal">false</span>, <span class="comment">// 横向滚动</span></span><br><span class="line">  <span class="attr">scrollY</span>: <span class="literal">true</span> <span class="comment">// 纵向滚动</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="zepto-框架"><a href="#zepto-框架" class="headerlink" title="zepto 框架"></a>zepto 框架</h1><blockquote>
<p><strong>Zepto</strong>是一个轻量级的<strong>针对现代高级浏览器的 JavaScript 库， <strong>它与 jquery</strong>有着类似的 api</strong>。 如果你会用 jquery，那么你也会用 zepto</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hZHJvYmJ5L3plcHRv">github 地址</span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5jc3M4OC5jb20vZG9jL3plcHRvanNfYXBpLw==">中文文档</span></p>
<h2 id="zepto-与-jquery-的区别"><a href="#zepto-与-jquery-的区别" class="headerlink" title="zepto 与 jquery 的区别"></a>zepto 与 jquery 的区别</h2><ul>
<li>jquery 针对 pc 端，主要用于解决浏览器兼容性问题，zepto 主要针对移动端</li>
<li>zepto 比 jquery 轻量，文件体积更小</li>
<li>zepto 封装了一些移动端的手势事件</li>
</ul>
<h2 id="zepto-的基本使用"><a href="#zepto-的基本使用" class="headerlink" title="zepto 的基本使用"></a>zepto 的基本使用</h2><p>zepto 的使用与 jquery 基本一致，zepto 是分模块的，需要某个功能，就需要引入某个 zepto 的文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;zepto/zepto.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;zepto/event.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;zepto/fx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">animate</span>(&#123; <span class="attr">width</span>: <span class="number">500</span> &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="zepto-的定制"><a href="#zepto-的定制" class="headerlink" title="zepto 的定制"></a>zepto 的定制</h2><p>安装 Nodejs 环境</p>
<p>1、下载 zepto.js</p>
<p>2、解压缩</p>
<p>3、cmd 命令行进入解压缩后的目录</p>
<p>4、执行<code>npm install</code>命令</p>
<p>5、编辑 make 文件的<code>41行</code>，添加自定义模块并保存</p>
<p>7、然后执行命令 <code>npm run-script dist</code></p>
<p>8、查看目录 dist 即构建好的 zepto.js</p>
<h2 id="zepto-手势事件"><a href="#zepto-手势事件" class="headerlink" title="zepto 手势事件"></a>zepto 手势事件</h2><p>zepto 中根据<code>touchstart touchmove touchend</code>封装了一些常用的手势事件，这些事件都是基于 touchstart touchmove touchend 封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tap <span class="comment">// 轻触事件,用于替代移动端的click事件，因为click事件在老版本中会有300ms的延迟</span></span><br><span class="line">swipe <span class="comment">//手指滑动时触发</span></span><br><span class="line">swipeLeft <span class="comment">//左滑</span></span><br><span class="line">swipeRight <span class="comment">//右滑</span></span><br><span class="line">swipeUp <span class="comment">//上滑</span></span><br><span class="line">swipeDown <span class="comment">//下滑</span></span><br></pre></td></tr></table></figure>

<h1 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h1><h2 id="什么是响应式布局"><a href="#什么是响应式布局" class="headerlink" title="什么是响应式布局"></a>什么是响应式布局</h2><blockquote>
<p>响应式布局（respond layout）是 Ethan Marcotte 在 2010 年 5 月份提出的一个概念，简而言之，就是<strong>一个网站能够兼容多个终端（手机、平板、pc 电脑、手表）</strong> ——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的</p>
</blockquote>
<p><strong>为什么要有响应式布局？</strong></p>
<ul>
<li>在移动互联日益成熟的时候，在 PC 端开发的网页已经无法满足移动设备的要求</li>
<li>通常的做法是针对移动端单独做一套特定的版本</li>
<li>如果终端越来越多，那么需要开发的版本就会越来越多（大屏设备的普及）</li>
<li><strong>响应式布局</strong> ：一个网站能够兼容多个终端（节约开发成本）</li>
</ul>
<p><strong>优点：</strong></p>
<p>面对不同分辨率设备灵活性强</p>
<p>能够快捷解决多设备显示适应问题</p>
<p>**缺点： **</p>
<p>兼容各种设备工作量大，效率低下</p>
<p>代码累赘，会出现隐藏无用的元素，加载时间加长</p>
<p>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</p>
<p>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</p>
<p>响应式开发现状：</p>
<ul>
<li>如果已经存在 PC 的网站了，那么一般不会使用响应式开发，而是针对移动端再开发一套系统（比如京东、淘宝）</li>
<li>在<strong>新建站点</strong> 上采用响应式开发的越来越多</li>
<li>在国内，响应式开发还不是特别的流行。但响应式开发是大势所趋，会越来越流行</li>
</ul>
<h2 id="响应式开发与移动-web-开发的比较"><a href="#响应式开发与移动-web-开发的比较" class="headerlink" title="响应式开发与移动 web 开发的比较"></a>响应式开发与移动 web 开发的比较</h2><table>
<thead>
<tr>
<th>开发方式</th>
<th>移动 web 开发+pc 开发</th>
<th>响应式开发</th>
</tr>
</thead>
<tbody><tr>
<td>引用场景</td>
<td>一般已经有了 PC 端网站，只需要端独开发移动端网站即可</td>
<td>针对一些新建网站，并且要求适配移动端</td>
</tr>
<tr>
<td>开发</td>
<td>针对性强，开发效率高</td>
<td>兼容各种终端，效率低</td>
</tr>
<tr>
<td>适配</td>
<td>只能适配移动端或者 PC 端，pad 上体验比较差</td>
<td>可以适配各种终端</td>
</tr>
<tr>
<td>效率</td>
<td>代码简介，加载快</td>
<td>代码相对复杂，加载慢</td>
</tr>
</tbody></table>
<h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><blockquote>
<p>媒体查询（Media Query）是 CSS3 提出来的一个新的属性，通过媒体查询可以查询到 screen 的宽度，从而指定某个宽度区间的网页布局</p>
</blockquote>
<h2 id="设备分类"><a href="#设备分类" class="headerlink" title="设备分类"></a>设备分类</h2><table>
<thead>
<tr>
<th>分类</th>
<th>宽度范围</th>
</tr>
</thead>
<tbody><tr>
<td>大屏设备</td>
<td>&gt;1200px</td>
</tr>
<tr>
<td>中屏设备</td>
<td>992px~1200px</td>
</tr>
<tr>
<td>小屏设备</td>
<td>768px~992px</td>
</tr>
<tr>
<td>超小屏设备</td>
<td>&lt; 768px</td>
</tr>
</tbody></table>
<h2 id="媒体查询的使用"><a href="#媒体查询的使用" class="headerlink" title="媒体查询的使用"></a>媒体查询的使用</h2><p>需求：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  大屏设备(&gt;1200px)   版心：1170px   背景色：红色</span></span><br><span class="line"><span class="comment">  中屏设备(992-1200)  版心：970px    背景色：蓝色</span></span><br><span class="line"><span class="comment">  小屏设备(768-992)   版心：750px    背景色：黄色</span></span><br><span class="line"><span class="comment">  超小屏设备(&lt;768px)  版心：100%     背景色：绿色</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>响应式开发的原理：使用媒体查询实现不同终端的布局和样式的切换</p>
<p>媒体查询语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 查询屏幕 */</span></span><br><span class="line"><span class="comment">/* screen 和第一个 and 可以省略 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> 条件 &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 条件的写法 */</span></span><br><span class="line"><span class="comment">/* min-width: 只要屏幕宽度超过这个值的设备样式就能生效 */</span></span><br><span class="line"><span class="comment">/* max-width: 只要屏幕宽度小于这个值的设备样式就能生效 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1170px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">970px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="bootstrap-框架"><a href="#bootstrap-框架" class="headerlink" title="bootstrap 框架"></a>bootstrap 框架</h1><p><strong>【项目：微金所】</strong></p>
<h1 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h1><h2 id="rem-是什么？"><a href="#rem-是什么？" class="headerlink" title="rem 是什么？"></a>rem 是什么？</h2><p><code>rem</code>（font size of the root element）是指相对于<code>根元素</code>的字体大小的单位。它就是一个相对单位。</p>
<p><code>em</code>（font size of the element）是指相对于 <code>当前元素的字体大小</code> 的单位。它也是一个相对单位。</p>
<p>它们之间其实很相似，只不过计算的规则一个是依赖根元素，一个是当前元素计算。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.em</span> &#123;</span><br><span class="line">  <span class="comment">/* em 的计算方式参照的当前元素的 font-size，如果不设置，默认继承自父盒子 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* rem 的计算方式参照的是 html 的 font-size */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.rem</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="为什么要用-rem？"><a href="#为什么要用-rem？" class="headerlink" title="为什么要用 rem？"></a>为什么要用 rem？</h2><blockquote>
<p>rem 的主要目的就是解决用于不同屏幕的适配问题。rem 能够等比例的适配所有的屏幕。</p>
</blockquote>
<p>由于市面上手机种类繁多，导致移动端的屏幕种类非常的混乱，比如有常见的<code>320px 360px 375px 384px 480px 640px</code>等。在开发中，美工一般只会提供 750px 或者是 640px 的设计稿，这就要求我们通过一张设计稿能够适配所有的屏幕。通常解决方案如下：</p>
<ul>
<li>流式布局：虽然可以让各种屏幕都适配，但是显示效果不是非常的友好，因为只有几个尺寸的手机能够完美的显示出来视觉设计师和交互最想要的效果。但是目前使用流式布局的公司非常多，比如 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNuLw==">亚马逊</span> 、<span class="exturl" data-url="aHR0cHM6Ly9tLmpkLmNvbS8=">京东</span> 、<span class="exturl" data-url="aHR0cHM6Ly9tLmN0cmlwLmNvbS8=">携程</span></li>
<li>响应式布局：响应式这种方式在国内很少有大型企业的复杂性的网站在移动端用这种方法去做，主要原因是<strong>工作大，维护性难</strong> 。所以一般都是中小型的门户或者博客类站点会采用响应式的方法从 PC 端页面到移动端页面以及 web app 直接一步到位，因为这样反而可以节约成本。</li>
<li>rem 布局：rem 能够适配所有的屏幕，与 less 配合使用效果会更好。目前使用 rem 布局的有：<span class="exturl" data-url="aHR0cHM6Ly9tLnRhb2Jhby5jb20v">淘宝</span> 、 <span class="exturl" data-url="aHR0cHM6Ly9tLnN1bmluZy5jb20v">苏宁</span></li>
</ul>
<h2 id="rem-布局"><a href="#rem-布局" class="headerlink" title="rem 布局"></a>rem 布局</h2><p>因为 rem 的基准点是根元素 html 的字体大小，因此我们只需要设置不同屏幕的 html 的 font-size 大小不一样就可以达到不同屏幕的适配了。</p>
<h3 id="rem-配合媒体查询"><a href="#rem-配合媒体查询" class="headerlink" title="rem 配合媒体查询"></a>rem 配合媒体查询</h3><p>使用 rem 配合媒体查询可以适配多个终端</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span>(min-width: <span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="comment">/* 基准值 / 设计图的大小  = 某个屏幕的font-size / 屏幕的宽度 */</span></span><br><span class="line">    <span class="comment">/* 100/750 = x/370 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>优点：使用媒体查询适配，速度快。</p>
<p>缺点：适配多个终端时，需要添加响应的代码。</p>
<h3 id="rem-配合-javascript"><a href="#rem-配合-javascript" class="headerlink" title="rem 配合 javascript"></a>rem 配合 javascript</h3><p>通过 javascript 获取可视区的宽度，计算 font-size 的值，也可以适配多个终端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据屏幕的大小动态设置 html的 font-size</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">responsive</span> () &#123;</span><br><span class="line">  <span class="keyword">var</span> uiWidth = <span class="number">750</span> <span class="comment">// 设计图宽度</span></span><br><span class="line">  <span class="keyword">var</span> base = <span class="number">100</span> <span class="comment">// 设计图中1rem的大小</span></span><br><span class="line">  <span class="comment">// 当前屏幕的大小</span></span><br><span class="line">  <span class="keyword">var</span> pageWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line">  <span class="keyword">if</span>(pageWidth &gt;= <span class="number">750</span>) &#123;</span><br><span class="line">    pageWidth = <span class="number">750</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pageWidth &lt;= <span class="number">320</span>) &#123;</span><br><span class="line">    pageWidth = <span class="number">320</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 说白了就是把一个屏幕分成了 7.5 rem</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = (base / uiWidth * pageWidth).<span class="title function_">toFixed</span>(<span class="number">2</span>) + ’px‘</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：直接适配所有的终端</p>
<p>缺点：必须在页面加载之前设置 html 的 font-size 值，不然会出现文字大小调动的情况。</p>
<h3 id="rem-配合-flexible-插件"><a href="#rem-配合-flexible-插件" class="headerlink" title="rem 配合 flexible 插件"></a>rem 配合 flexible 插件</h3><ul>
<li><p>flexible 插件基准值（base）是设计图的 1&#x2F;10</p>
</li>
<li><p>使用 flexible</p>
</li>
</ul>
<ol>
<li><p>在 header 中引入 flexible.js 这个文件</p>
</li>
<li><p>根据设计图能够确定基准值， 配合 px2rem 插件 ，需要设置一个 rootFontSize</p>
</li>
</ol>
<p>【案例：苏宁易购】</p>
<h1 id="swiper-插件"><a href="#swiper-插件" class="headerlink" title="swiper 插件"></a>swiper 插件</h1><blockquote>
<p>Swiper 是纯 javascript 打造的滑动特效插件，面向手机、平板电脑等移动终端</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5zd2lwZXIuY29tLmNuLw==">swiper 中文网</span></p>
<h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="comment">/* 取消链接高亮, 移动端特有的样式  */</span></span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>移动端(Safari)浏览网页时对数字禁用电话功能</title>
    <url>/388.html</url>
    <content><![CDATA[<h2 id="移动端-Safari-浏览网页时对数字禁用电话功能"><a href="#移动端-Safari-浏览网页时对数字禁用电话功能" class="headerlink" title="移动端(Safari)浏览网页时对数字禁用电话功能"></a>移动端(Safari)浏览网页时对数字禁用电话功能</h2><ul>
<li>标准的电话号码格式是：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:+86-123-456-7890&quot;</span>&gt;</span>1234567890<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>有时候不是电话号码的数字会被浏览器自动解析为如上电话号码格式，导致样式和布局改变</p>
</li>
<li><p>忽略页面中的数字识别为电话号码, 只要把这个默认行为关闭就行</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这个关闭不会影响真正电话号码的识别</li>
</ul>
<p>说明：Meta 标签中的 format-detection 属性及含义<br>format-detection 中文的意思是 “格式检测”，它是用来检测 html 里的一些格式的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 禁止了把数字转化为拨号链接 默认为 yes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 禁止作为邮箱地址 默认为 yes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;email=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 禁止跳转至地图 默认为 yes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;adress=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no,email=no,adress=no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>pm2 - node 进程管理工具</title>
    <url>/1800.html</url>
    <content><![CDATA[<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install pm2 -g</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 list <span class="comment"># 显示所有进程状态</span></span><br><span class="line"></span><br><span class="line">$ pm2 start &lt;js文件路径&gt;.js <span class="comment"># 同 node &lt;js文件路径&gt;.js</span></span><br><span class="line">$ pm2 start &lt;json描述文件路径&gt;.json</span><br><span class="line">$ pm2 start &lt;python文件路径&gt;.py --interpreter python</span><br><span class="line">$ pm2 start &lt;sh文件路径&gt;.sh --interpreter bash</span><br><span class="line">$ pm2 start ./node_modules/&lt;某模块名称&gt;/&lt;模块主文件路径&gt;.js</span><br><span class="line">$ pm2 start &lt;某种方式&gt; -- --param_name param_value</span><br><span class="line">$ pm2 start npm -- start <span class="comment"># 同 npm start</span></span><br><span class="line">$ pm2 start npm -- run &lt;scriptname&gt; <span class="comment"># 同 npm run &lt;scriptname&gt;</span></span><br><span class="line">$ pm2 start npm --watch --name &lt;taskname&gt; -- run &lt;scriptname&gt; <span class="comment"># --name 指定任务名 --watch监听文件变化</span></span><br><span class="line"></span><br><span class="line">$ pm2 start yarn -- start</span><br><span class="line">$ pm2 start yarn -- run &lt;scriptname&gt;</span><br><span class="line"></span><br><span class="line">$ pm2 stop     &lt;app_name|namespace|<span class="built_in">id</span>|<span class="string">&#x27;all&#x27;</span>|json_conf&gt; <span class="comment"># 停止进程  all 停止所有进程</span></span><br><span class="line">$ pm2 restart  &lt;app_name|namespace|<span class="built_in">id</span>|<span class="string">&#x27;all&#x27;</span>|json_conf&gt; <span class="comment"># 重启进程  all 重启所有进程</span></span><br><span class="line">$ pm2 delete   &lt;app_name|namespace|<span class="built_in">id</span>|<span class="string">&#x27;all&#x27;</span>|json_conf&gt; <span class="comment"># 删除进程  all 删除所有进程</span></span><br><span class="line">$ pm2 reload all <span class="comment"># 重载所有进程</span></span><br><span class="line"></span><br><span class="line">$ pm2 describe &lt;<span class="built_in">id</span>|app_name&gt; <span class="comment"># 进程详情</span></span><br><span class="line"></span><br><span class="line">$ pm2 monit <span class="comment"># 进程日志、详情</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 PM2</span></span><br><span class="line"><span class="comment"># Install latest PM2 version</span></span><br><span class="line">$ npm install pm2@latest -g</span><br><span class="line"><span class="comment"># Save process list, exit old PM2 &amp; restore all processes</span></span><br><span class="line">$ pm2 update</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 的安装和使用</title>
    <url>/420.html</url>
    <content><![CDATA[<h2 id="安装-dcoker"><a href="#安装-dcoker" class="headerlink" title="安装 dcoker"></a>安装 dcoker</h2><h3 id="ubuntu-16-04-LTS-安装-docker"><a href="#ubuntu-16-04-LTS-安装-docker" class="headerlink" title="ubuntu 16.04 (LTS) 安装 docker"></a>ubuntu 16.04 (LTS) 安装 docker</h3><p>参考官网安装方法 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==">https://docs.docker.com/engine/install/ubuntu/</span></p>
<p>卸载旧版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h4 id="镜像仓库方式安装"><a href="#镜像仓库方式安装" class="headerlink" title="镜像仓库方式安装"></a>镜像仓库方式安装</h4><h5 id="设置镜像仓库"><a href="#设置镜像仓库" class="headerlink" title="设置镜像仓库"></a>设置镜像仓库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新 apt 软件包索引：</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"><span class="comment"># 安装软件包，以允许 apt 通过 HTTPS 使用镜像仓库：</span></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line"><span class="comment"># 添加 Docker 的官方 GPG 密钥：</span></span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># 验证密钥指纹是否为 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88。</span></span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 stable 镜像仓库</span></span><br><span class="line"><span class="comment"># amd64:</span></span><br><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用国内源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更换国内软件源，推荐中国科技大学的源</span></span><br><span class="line">$ sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">$ sudo sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">$ sudo apt update</span><br><span class="line"><span class="comment"># 安装需要的包</span></span><br><span class="line">$ sudo apt install apt-transport-https ca-certificates software-properties-common curl</span><br><span class="line"><span class="comment"># 添加 GPG 密钥，并添加 Docker-ce 软件源，这里还是以中国科技大学的 Docker-ce 源为例</span></span><br><span class="line">$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string"><span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"><span class="comment"># 添加成功后更新软件包缓存</span></span><br><span class="line">$ sudo apt update</span><br><span class="line"><span class="comment"># 安装 Docker-ce</span></span><br><span class="line">$ sudo apt install docker-ce</span><br></pre></td></tr></table></figure>

<h5 id="安装-DOCKER-CE"><a href="#安装-DOCKER-CE" class="headerlink" title="安装 DOCKER CE"></a>安装 DOCKER CE</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">$ apt-cache madison docker-ce</span><br><span class="line"></span><br><span class="line">  docker-ce | 5:18.09.1~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages</span><br><span class="line">  docker-ce | 5:18.09.0~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages</span><br><span class="line">  docker-ce | 18.06.0~ce~3-0~ubuntu | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages</span><br><span class="line">  docker-ce | 18.03.1~ce~3-0~ubuntu | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>

<p>启动 docker daemon<br>否则会报错：docker: Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?.<br>See ‘docker run –help’.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line"><span class="comment"># sudo systemctl enable docker</span></span><br><span class="line"><span class="comment"># sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>

<p>验证是否正确安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>此命令将下载一个测试镜像并在容器中运行它。容器运行时，它将输出一条参考消息并退出</p>
<h5 id="升级-docker-ce"><a href="#升级-docker-ce" class="headerlink" title="升级 docker ce"></a>升级 docker ce</h5><p>如需升级 Docker CE，首先运行 <code>sudo apt-get update</code>，然后按照顺序执行操作，并选择您要安装的新版本</p>
<h5 id="卸载-docker-ce"><a href="#卸载-docker-ce" class="headerlink" title="卸载 docker ce"></a>卸载 docker ce</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>主机上的镜像、容器、存储卷、或定制配置文件不会自动删除。如需删除所有镜像、容器和存储卷，请运行下列命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<h5 id="将-docker-配置为在启动时启动"><a href="#将-docker-配置为在启动时启动" class="headerlink" title="将 docker 配置为在启动时启动"></a>将 docker 配置为在启动时启动</h5><h4 id="使用脚本安装"><a href="#使用脚本安装" class="headerlink" title="使用脚本安装"></a>使用脚本安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到docker组，可以用非root用户使用docker</span></span><br><span class="line">$ sudo usermod -aG docker &lt;your-user&gt;</span><br></pre></td></tr></table></figure>

<p>国内的服务器可以使用如下脚本加速安装，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 阿里云的安装脚本</span></span><br><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br><span class="line"><span class="comment"># DaoCloud 的安装脚本</span></span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>

<h3 id="centos-安装-docker"><a href="#centos-安装-docker" class="headerlink" title="centos 安装 docker"></a>centos 安装 docker</h3><p>参考官网安装方法 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==">https://docs.docker.com/engine/install/centos/</span></p>
<p>卸载旧版本(如果安装过旧版本的话)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p>安装需要的软件包， yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<p>设置 yum 源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以查看所有仓库中所有 docker 版本，并选择特定版本安装</span></span><br><span class="line">$ yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line">$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Docker,设置开机启动,停止 Docker</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl stop docker</span><br></pre></td></tr></table></figure>

<p>卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">$ sudo <span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<p>常见问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错：Requires: container-selinux &gt;= 2:2.74</span></span><br><span class="line">You could try using --skip-broken to work around the problem</span><br><span class="line"></span><br><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">$ yum install epel-release   <span class="comment"># 阿里云上的 epel 源</span></span><br><span class="line">$ yum makecache</span><br><span class="line">$ yum install container-selinux</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.</span></span><br><span class="line"></span><br><span class="line">卸载 docker 重新安装</span><br></pre></td></tr></table></figure>

<h2 id="使用-docker"><a href="#使用-docker" class="headerlink" title="使用 docker"></a>使用 docker</h2><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><h3 id="修改-docker-源"><a href="#修改-docker-源" class="headerlink" title="修改 docker 源"></a>修改 docker 源</h3><p>修改配置文件 <code>/etc/docker/daemon.json</code>（Linux） 或者 <code>%programdata%\docker\config\daemon.json</code>（Window)</p>
<p>如果没有新建一个</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>重启 docker</p>
<h3 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h3><p>安装 Ubuntu 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search ubuntu <span class="comment"># 查找 Ubuntu 镜像</span></span><br><span class="line">docker pull ubuntu <span class="comment"># 安装 Ubuntu 镜像</span></span><br><span class="line">docker images <span class="comment">#查看 docker 镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并运行 docker 容器</span></span><br><span class="line">docker run -it -d --name ubuntu_test -p 8088:80 ubuntu</span><br><span class="line"><span class="comment"># --name 自定义容器名，-p 指定端口映射，前者为虚拟机端口，后者为容器端口,成功后返回 id</span></span><br><span class="line"><span class="comment"># 多个 -p 指定多个端口映射</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 docker 容器  启动一个 bash 交互终端</span></span><br><span class="line">docker run -it 容器名:容器tag /bin/bash</span><br><span class="line"></span><br><span class="line">docker start container_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有启动的容器(查看所有容器加 -a)</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 id 查看容器信息</span></span><br><span class="line">docker inspect <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入docker(或者把容器id改为容器名，也可以进入)</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span>或容器名 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># OCI runtime exec failed: exec failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;/bin/bash\&quot;: stat /bin/bash: no such file or directory&quot;: unknown</span></span><br><span class="line"><span class="comment"># 解决</span></span><br><span class="line"><span class="comment"># docker exec -it 容器id或容器名 /bin/sh</span></span><br><span class="line"><span class="comment"># docker exec -it 容器id或容器名 bash</span></span><br><span class="line"><span class="comment"># docker exec -it 容器id或容器名 sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi 删除镜像</span><br></pre></td></tr></table></figure>

<p>备份镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 制作 docker 镜像  1.0 为版本号</span></span><br><span class="line">docker commit 98 my-ubuntu:1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像是否创建</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存镜像到 docker 账号中</span></span><br><span class="line"><span class="comment"># 登录进 Docker 注册中心</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送镜像</span></span><br><span class="line">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br><span class="line">docker tag my-ubuntu:1.0 cuilongjin/my-ubuntu:1.0</span><br><span class="line">docker push cuilongjin/my-ubuntu:1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包镜像并查看</span></span><br><span class="line">docker save -o my-ubuntu.tar my-ubuntu:1.0</span><br></pre></td></tr></table></figure>

<p>恢复容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从docker账号中拉取</span></span><br><span class="line">docker pull cuilongjin/my-ubuntu:1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从本地</span></span><br><span class="line">docker load -i ~/my-ubuntu.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用加载的镜像去运行Docker容器</span></span><br><span class="line">docker run -d -p 80:80 my-ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>docker 给已存在的容器添加或修改端口映射</strong></p>
<p>方式 1：</p>
<p>提交一个运行中的容器为镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker commit containerid foo/live</span><br></pre></td></tr></table></figure>

<p>运行镜像并添加端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 8000:80  foo/live /bin/bash</span><br></pre></td></tr></table></figure>

<p>方式 2：iptable 转发端口</p>
<p>将容器的 8000 端口映射到 docker 主机的 8001 端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A  DOCKER -p tcp --dport 5001 -j DNAT --to-destination 45.77.150.20:8000</span><br></pre></td></tr></table></figure>

<h3 id="docker-容器使用问题"><a href="#docker-容器使用问题" class="headerlink" title="docker 容器使用问题"></a>docker 容器使用问题</h3><h4 id="Centos7-docker-容器报-docker-Failed-to-get-D-Bus-connection-错误"><a href="#Centos7-docker-容器报-docker-Failed-to-get-D-Bus-connection-错误" class="headerlink" title="Centos7 docker 容器报 docker Failed to get D-Bus connection 错误"></a>Centos7 docker 容器报 docker Failed to get D-Bus connection 错误</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start nginx</span><br><span class="line">Failed to get D-Bus connection: Operation not permitted。</span><br></pre></td></tr></table></figure>

<p>原因是 dbus-daemon 没能启动</p>
<p>解决方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name ubuntu_test -p 8088:80 ubuntu</span><br><span class="line">$ docker run --privileged -ti --name test1  centos /usr/sbin/init</span><br></pre></td></tr></table></figure>

<h4 id="ssh-链接-docker-容器"><a href="#ssh-链接-docker-容器" class="headerlink" title="ssh 链接 docker 容器"></a>ssh 链接 docker 容器</h4><p>进入容器</p>
<p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install passwd openssl openssh-server openssh-clients -y</span><br></pre></td></tr></table></figure>

<p>安装 service 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install initscripts -y</span><br></pre></td></tr></table></figure>

<p>修改密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p>修改配置：</p>
<p>vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>
<p>PubkeyAuthentication yes #启用公钥私钥配对认证方式<br>AuthorizedKeysFile .ssh&#x2F;authorized_keys #公钥文件路径</p>
<p>PermitRootLogin yes #root 能使用 ssh 登录</p>
<p>重启 ssh 服务，并设置开机启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service sshd restartchkconfig sshd on</span><br></pre></td></tr></table></figure>

<p>如果无法执行，可试着执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start sshd.service systemctl enable sshd.service</span><br><span class="line"></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<h4 id="运行-docker-exec-it-容器-x2F-bin-x2F-bash-出现如下错误"><a href="#运行-docker-exec-it-容器-x2F-bin-x2F-bash-出现如下错误" class="headerlink" title="运行 docker exec -it 容器 &#x2F;bin&#x2F;bash 出现如下错误"></a>运行 docker exec -it 容器 &#x2F;bin&#x2F;bash 出现如下错误</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OCI runtime exec failed: exec failed: container_linux.go:346: starting container process caused &quot;exec: \&quot;/bin/bash\&quot;: stat /bin/bash: no such file or directory&quot;: unknown</span><br></pre></td></tr></table></figure>

<p>解决方式：尝试使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it 容器 /bin/sh</span><br><span class="line">sudo docker <span class="built_in">exec</span> -it 容器 bash</span><br></pre></td></tr></table></figure>

<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>如果你想要通过 docker-compose 统一管理你的 Docker container，这里也可以安装一下</p>
<p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsLw==">https://docs.docker.com/compose/install/</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.26.2/run.sh &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>使用 pip 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure>

<p>运行一下 <code>docker-compose version</code> 来检测一下是否成功</p>
<h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>创建一个名为 <code>docker-compose.yml</code> 的配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">v2ray1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">v2fly/v2fly-core</span> <span class="comment"># 镜像名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">v2ray</span> <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">v2ray</span> <span class="string">-config=/etc/v2ray/config.json</span> <span class="comment"># 覆盖容器启动后默认执行的命令</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># HOST:CONTAINER</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;44222:44222&#x27;</span> <span class="comment"># 端口</span></span><br><span class="line">      <span class="comment">#- &quot;127.0.0.1:8889:8889&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># HOST:CONTAINER</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/etc/v2ray</span> <span class="comment"># 目录</span></span><br><span class="line">      <span class="comment">#- /etc/v2ray/v2ray.crt:/etc/v2ray/v2ray.crt</span></span><br><span class="line">      <span class="comment">#- /etc/v2ray/v2ray.key:/etc/v2ray/v2ray.key</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">v2ray2:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span> <span class="comment"># context 选项可以是 Dockerfile 的文件路径，也可以是到链接到 git 仓库的 url</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">path/of/Dockerfile</span> <span class="comment"># 使用此 dockerfile 文件来构建，必须指定构建路径</span></span><br></pre></td></tr></table></figure>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>以下命令需要在 docker-compose.yml 所在目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d <span class="comment"># 部署 v2ray</span></span><br><span class="line">docker-compose start v2ray <span class="comment"># 启动 v2ray</span></span><br><span class="line">docker-compose stop v2ray <span class="comment"># 停止 v2ray</span></span><br><span class="line">docker-compose restart v2ray <span class="comment"># 重启 v2ray</span></span><br><span class="line">docker stop v2ray &amp;&amp; docker <span class="built_in">rm</span> v2ray <span class="comment"># 删除 v2ray</span></span><br><span class="line">docker-compose pull &amp;&amp; docker-compose up -d <span class="comment"># 更新 v2ray</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux screen 命令——多重视窗管理程序</title>
    <url>/1887.html</url>
    <content><![CDATA[<p>Screen 是一个全屏窗口管理器。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install screen</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yum install screen</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S &lt;name&gt; <span class="comment"># 新建一个作业名为 name 的窗口，(标注 screen 窗口)</span></span><br><span class="line">screen -<span class="built_in">ls</span> <span class="comment"># 显示目前所有的 screen 作业</span></span><br><span class="line">screen -d &lt;name&gt; <span class="comment"># 将指定的 screen 作业离线</span></span><br><span class="line">screen -h &lt;行数&gt; <span class="comment"># 指定视窗的缓冲区行数</span></span><br><span class="line">screen -r &lt;name&gt; <span class="comment"># 恢复指定的 screen 作业</span></span><br><span class="line">screen -d -r &lt;name&gt; <span class="comment"># 离线当前作业并回到 name 这个作业</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当需要运行脚本、执行程序时，在命令前添加 screen 即可</span></span><br><span class="line"></span><br><span class="line">ctrl + A + D <span class="comment"># 将当前 screen detach 到后台</span></span><br><span class="line"></span><br><span class="line">screen -X -S &lt;name&gt; quit <span class="comment"># 删除指定 screen</span></span><br></pre></td></tr></table></figure>

<p>进入一个 screen session 后，可能你开始跑一些程序，这时不能在命令行输入任何东西，可以使用快捷键 ctrl + A + D 将当前 screen detach 到后台</p>
<h3 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h3><p>问题：linux 在进入 screen 模式下之后，发现是无法在终端使用鼠标滚轮进行上下翻页拉动的，无法查看上面的终端输出内容了</p>
<p>解决办法</p>
<p>进入回滚模式（可以操作鼠标滚轮上下翻页）：先按<code>Ctrl+a</code>键，然后释放，然后再按[键即可进入翻页模式。<br>切换回之前模式：<code>Ctrl+c</code></p>
<h2 id="ubuntu-下源码编译安装-screen-最新版"><a href="#ubuntu-下源码编译安装-screen-最新版" class="headerlink" title="ubuntu 下源码编译安装 screen 最新版"></a>ubuntu 下源码编译安装 screen 最新版</h2><p>下载地址：<span class="exturl" data-url="aHR0cDovL2Z0cC5nbnUub3JnL2dudS9zY3JlZW4v">http://ftp.gnu.org/gnu/screen/</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -c https://ftp.gnu.org/gnu/screen/screen-4.8.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf screen-4.8.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> screen-4.8.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">apt install gcc g++ make make-guile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">../configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">验证一下</span><br><span class="line">screen -h</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>如果报错：<code>checking whether the C compiler works... no</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 g++</span></span><br><span class="line">apt install g++</span><br></pre></td></tr></table></figure>

<p>如果报错，信息如：<code>configure: error: !!! no tgetent - no screen</code></p>
<p>需要先安装 ncurses 下载地址 <span class="exturl" data-url="aHR0cHM6Ly9mdHAuZ251Lm9yZy9nbnUvbmN1cnNlcw==">https://ftp.gnu.org/gnu/ncurses</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载依赖包ncurses</span></span><br><span class="line">wget -c https://ftp.gnu.org/gnu/ncurses/ncurses-6.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压安装</span></span><br><span class="line">tar -xzvf ncurses-6.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ncurses-6.2</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">../configure</span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>screen</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 入门</title>
    <url>/1662.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYnQuY24v">宝塔面板</span></p>
<p>neofetch</p>
<p>screenfetch</p>
<p>netdata linux 系统性能监测工具</p>
<p>htop 系统状况监控</p>
<p>nano linux下文本编辑器</p>
<p>grafana</p>
<h3 id="linux-目录表"><a href="#linux-目录表" class="headerlink" title="linux 目录表"></a>linux 目录表</h3><p>&#x2F; 根目录</p>
<p>&#x2F;bin 、 &#x2F;usr&#x2F;bin 可执行二进制文件目录，如常用的命令 ls cat 等</p>
<p>&#x2F;boot 放置系统启动时用到的一些文件，如内核文件</p>
<p>&#x2F;dev 存放系统下的设备文件，访问该目录下的文件，相当于访问某个设备，常用的是挂载光驱<code>mount /dev/cdrom/mnt</code></p>
<p>&#x2F;etc 系统配置文件，重要的配置文件有</p>
<h3 id="文件大小表示方式"><a href="#文件大小表示方式" class="headerlink" title="文件大小表示方式"></a>文件大小表示方式</h3><table>
<thead>
<tr>
<th>单位</th>
<th>英文</th>
</tr>
</thead>
<tbody><tr>
<td>字节</td>
<td>B (Byte)</td>
</tr>
<tr>
<td>千</td>
<td>K (KibiByte)</td>
</tr>
<tr>
<td>兆</td>
<td>M (MebiByte)</td>
</tr>
<tr>
<td>千兆</td>
<td>G (GigaByte)</td>
</tr>
<tr>
<td>太</td>
<td>T (TeraByte)</td>
</tr>
<tr>
<td>拍</td>
<td>P (PetaByte)</td>
</tr>
<tr>
<td>艾</td>
<td>E (ExaByte)</td>
</tr>
<tr>
<td>泽</td>
<td>Z (ZettaByte)</td>
</tr>
<tr>
<td>尧</td>
<td>Y (YottaByte)</td>
</tr>
</tbody></table>
<h3 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux 常用命令"></a>linux 常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th></th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ls</td>
<td>list</td>
<td>查看当前文件夹下的内容</td>
</tr>
<tr>
<td>pwd</td>
<td>print work directory</td>
<td>查看当前所在文件夹</td>
</tr>
<tr>
<td>cd[目录名]</td>
<td>change directory</td>
<td>切换文件夹</td>
</tr>
<tr>
<td>touch[文件名]</td>
<td>touch</td>
<td>如果文件不存在，新建文件<br />如果文件已经存在，修改文件的末次修改日期</td>
</tr>
<tr>
<td>mkdir[目录名]</td>
<td>make directory</td>
<td>创建目录</td>
</tr>
<tr>
<td>rm[文件名]</td>
<td>remove</td>
<td>删除指定的文件名</td>
</tr>
<tr>
<td>clear</td>
<td></td>
<td>清屏</td>
</tr>
</tbody></table>
<p><strong>ls 常用选项</strong></p>
<ul>
<li><code>-a</code> 显示所有目录和文件，包括隐藏文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -a</span></span><br><span class="line">. .. .xxx.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以.开头的文件/文件夹为隐藏文件/文件夹</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">. 代表当前目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.. 代表上一级目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">蓝色为目录，白色为文件</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>-l</code> 以列表方式显示文件的详细信息</li>
<li><code>-h</code> 配合-l 以人性化的方式显示文件大小</li>
</ul>
<p>选项可以合写，无顺序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -alh</span></span><br></pre></td></tr></table></figure>

<p>ls <strong>通配符</strong></p>
<ul>
<li><code>*</code> 代表任意个数个字符</li>
<li><code>？</code>代表任意一个字符</li>
<li><code>[]</code> 表示可以匹配字符组中的任意一个</li>
<li><code>[abc]</code> 匹配<code>a</code>、<code>b</code>、<code>c</code> 中的任意一个</li>
<li><code>[a-f]</code> 匹配 <code>a-f</code> 任意一个字符</li>
</ul>
<p><strong>cd 常用选项</strong></p>
<ul>
<li><p><code>cd</code>&#x2F;<code>cd ~</code> 切换到当前用户的主目录</p>
</li>
<li><p><code>cd ..</code> 切换到上一级目录</p>
</li>
<li><p><code>cd -</code> 在最近两次工作目录间切换</p>
</li>
</ul>
<p><strong>mkdir</strong></p>
<ul>
<li><code>-p</code> 可以递归创建目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">madir -p a/b/c</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>同一目录下文件夹名称不能和文件名同名</p>
</blockquote>
<p><strong>rm</strong></p>
<blockquote>
<p>删除时直接删除，不放入回收站</p>
</blockquote>
<ul>
<li><p><code>-f</code> 强制删除，忽略不存在的文件，无需提示</p>
</li>
<li><p><code>-r</code> 递归的删除目录下的内容，或用于删除文件夹</p>
</li>
</ul>
<h3 id="终端命令格式"><a href="#终端命令格式" class="headerlink" title="终端命令格式"></a>终端命令格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> [-options][paramete]</span><br></pre></td></tr></table></figure>

<p>command : 命令名，相应功能的英文单词或单词缩写<br>-options： 选项<br>paramete ：参数</p>
<h3 id="查阅帮助信息"><a href="#查阅帮助信息" class="headerlink" title="查阅帮助信息"></a>查阅帮助信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> --<span class="built_in">help</span></span><br><span class="line">$ man <span class="built_in">command</span></span><br><span class="line"><span class="comment"># man 是manual缩写,手册</span></span><br><span class="line"><span class="comment"># 使用man 时的操作键</span></span><br><span class="line"><span class="comment">#	空格 显示手册的下一屏</span></span><br><span class="line"><span class="comment">#	enter 一次滚动手册页的一行</span></span><br><span class="line"><span class="comment">#	b 回滚一屏</span></span><br><span class="line"><span class="comment">#	f 前滚一屏</span></span><br><span class="line"><span class="comment">#	q 退出</span></span><br><span class="line"><span class="comment">#	/word 搜索word字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="终端技巧"><a href="#终端技巧" class="headerlink" title="终端技巧"></a>终端技巧</h3><ul>
<li><p>自动补全</p>
<p>在敲出 文件&#x2F;目录&#x2F;命令的前几个字母后，按下 <code>tab</code> 键</p>
<ul>
<li>如果输入没有歧义，系统会自动补全</li>
<li>如果输入有歧义，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li>
</ul>
</li>
<li><p>曾经使用过的命令</p>
<p>按上下键可在曾经使用过的命令间切换，<code>Ctrl+c</code> 退出选择</p>
</li>
</ul>
<h3 id="文件和目录常用命令"><a href="#文件和目录常用命令" class="headerlink" title="文件和目录常用命令"></a>文件和目录常用命令</h3><h4 id="拷贝和移动文件"><a href="#拷贝和移动文件" class="headerlink" title="拷贝和移动文件"></a>拷贝和移动文件</h4><ul>
<li><p><code>tree [目录名]</code>： 以树状图列出文件目录结构</p>
<p><code>-d</code> 只显示目录，不显示文件</p>
</li>
<li><p><code>cp 源文件 目标文件</code>： copy 复制文件或者目录</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span>  ~/Documemt/readme.txt  ./readme.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 ~/Documemt/ 目录下的 readme.txt 文件复制到./目录下并以readme.txt命名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不修改文件名，只需要写目标路径</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span>  ~/Documemt/readme.txt  ./</span></span><br></pre></td></tr></table></figure>

<p><code>-i</code> ：覆盖文件前提示 y 覆盖 n 不覆盖</p>
<p><code>-r</code> ：若给出的源文件是目录文件，将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</p>
<ul>
<li><code>mv 源文件 目标文件</code>：move 移动文件或目录&#x2F; 文件或目录重命名</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span>  ~/Documemt/readme.txt  ./</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 ~/Documemt/ 目录下的 readme.txt 文件移动到./目录下</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> readme.txt demo.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将readme.txt文件名修改为demo.txt</span></span><br></pre></td></tr></table></figure>

<p><code>-i</code> ：覆盖文件前提示 y 覆盖 n 不覆盖</p>
<h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><ul>
<li><p><code>cat</code> 文件名： <code>concatenate</code> 查看文件内容、创建文件、文件合并、追加文件内容等功能，会<strong>一次显示所有内容</strong>，适合内容较少的文本文件</p>
<p><code>-b</code>：对非空输出行编号</p>
<p><code>-n</code>：对输出的所有行编号</p>
<blockquote>
<p>linux 中还有一个 <code>nl</code> 命令和 <code>cat -b</code> 的效果等价</p>
</blockquote>
</li>
<li><p><code>more</code> 文件名：<strong>分屏显示文件内容</strong> ，按空格显示下一屏，适合查看内容较多的文本</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 more 时的操作键  和 man 相同</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">空格 显示手册的下一屏</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">enter 一次滚动手册页的一行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">b 回滚一屏</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">f 前滚一屏</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">q 退出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/word 搜索word字符串</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>grep</code> 搜索文本 文件名： 搜索文本文件内容，输出包含该文本的行</p>
<blockquote>
<p>linux 中的文本搜索工具，允许对文本文件进行模式查找（正则表达式），如果搜索文本中间有空格可以使用引号包裹</p>
</blockquote>
<p><code>-n</code> 显示匹配行和行号</p>
<p><code>-v</code> 显示不包含匹配文本的所有行（相当于求反）</p>
<p><code>-i</code> 忽略大小写</p>
<p><code>^a</code> 行首，搜索以 a 开头的行</p>
<p><code>ke$</code> 行尾，搜索以 ke 结束的行</p>
</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li><p><code>echo 文字内容</code> ：会在终端中显示参数指定的文本，通常会和重定向联合使用</p>
</li>
<li><p>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code>：</p>
</li>
</ul>
<blockquote>
<p>linux 允许将命令执行结果重定向到一个文件，将本应显示在终端上的内容输出&#x2F;追加到指定文件中，保存命令输出结果</p>
</blockquote>
<p><code>&gt;</code> 表示输出，会覆盖文件原有的内容</p>
<p><code>&gt;&gt;</code> 表示追加，会将文件追加到已有文件的末尾</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 a 文件并将 “hello world”输出到 a 文件中 ，与<span class="built_in">touch</span>区别</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> hello world &gt; a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将命令 “<span class="built_in">ls</span> -lh” 的结果输出到 a 文件中</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -lh &gt; a</span></span><br></pre></td></tr></table></figure>

<ul>
<li>管道 <code>|</code></li>
</ul>
<blockquote>
<p>linux 允许将一个命令的输出通过管道作为另一个命令的输入，另一个命令对第一个命令的输出进行二次处理</p>
<p>可以理解为现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 <code>|</code> 的左右分为两端，左端塞东西（写），右端取东西（读）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">more：分屏显示内容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分屏显示命令 “<span class="built_in">ls</span> -lha” 的输出结果</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -lha ~ | more</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">grep：在命令执行结果的基础上查询指定文本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找 “<span class="built_in">ls</span> -lha ~” 的结果中包含Do的行并显示</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -lha ~ | grep Do</span></span><br></pre></td></tr></table></figure>

<h3 id="远程管理命令"><a href="#远程管理命令" class="headerlink" title="远程管理命令"></a>远程管理命令</h3><h4 id="关机-x2F-重启"><a href="#关机-x2F-重启" class="headerlink" title="关机&#x2F;重启"></a>关机&#x2F;重启</h4><p><code>shutdown 选项 时间</code></p>
<pre><code>`-r`  重新启动
</code></pre>
<blockquote>
<p>不指定选项和参数，默认表示一分钟之后关闭电脑</p>
<p>远程维护服务器时，最好不要关闭系统，而应该重新启动系统</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用命令示例</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新启动电脑，now 表示现在</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">shutdown -r now</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统在今天20:00 关机</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">shutdown 20:00</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统十分钟后自动关机</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">shutdown +10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消关机计划</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">shutdown -c</span></span><br></pre></td></tr></table></figure>

<h4 id="查看或配置网卡信息"><a href="#查看或配置网卡信息" class="headerlink" title="查看或配置网卡信息"></a>查看或配置网卡信息</h4><p><code>ifconfig</code>: <code>configure a network interface</code> 查看&#x2F;配置计算机当前的网卡配置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网卡配置信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网卡对应的IP地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ifconfig | grep inet</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 linux 中物理网卡通常以 <code>ensxx</code> 表示</p>
<p>127.0.0.1 本地环回&#x2F;环回地址，一般用来测试本机网卡是否正常</p>
</blockquote>
<p><code>ping ip地址</code>： <code>ping</code> 检测到目标 ip 地址连接是否正常</p>
<p>ping 127.0.0.1 检查本地网卡是否工作正常</p>
<h4 id="远程登录和复制文件"><a href="#远程登录和复制文件" class="headerlink" title="远程登录和复制文件"></a>远程登录和复制文件</h4><ul>
<li><p><code>ssh 用户名@ip</code> ：<code>secure shell</code> 关机&#x2F;重新启动</p>
</li>
<li><p><code>scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径</code>：<code>secure copy</code> 远程复制文件</p>
</li>
</ul>
<p><strong>SSH</strong> ：SSH 客户端是一种使用 Secure Shell (SSH) 协议连接到远程计算机的软件协议</p>
<ul>
<li><p>数据传输是加密的，可以防止远程管理过程中的信息泄露，也能防止 DNS 欺骗和 IP 欺骗</p>
</li>
<li><p>数据传输是压缩的，可以提高传输速度</p>
</li>
</ul>
<blockquote>
<p>有关 ssh 配置信息都保存在用户家目录下的 <code>.ssh</code>目录下</p>
</blockquote>
<h5 id="域名和端口号"><a href="#域名和端口号" class="headerlink" title="域名和端口号"></a>域名和端口号</h5><p><code>域名</code>：由一串用点分割的名字组成，例如 <code>www.baidu.com</code> ，是 IP 地址的别名，方便记忆</p>
<p><code>端口号</code>：通过 IP 地址可以找到网络上的计算机，通过端口号可以找到计算机上运行的程序</p>
<blockquote>
<p>SSH 服务器默认端口号为 22，Web 服务器为 80，HTTPS 为 443，FTP 服务器为 21，如果没有指定端口号，使用默认端口号</p>
</blockquote>
<h5 id="SSH-基本使用"><a href="#SSH-基本使用" class="headerlink" title="SSH 基本使用"></a>SSH 基本使用</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh [-p port] user@remote</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">user 远程服务器上的用户名，如果不指定默认当前用户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remote 远程机器的地址，可以是IP/域名，或者别名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">port 是SSH server 监听的端口，如果不指定，默认22</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 <span class="built_in">exit</span> 退出当前用户登录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssh 在 linux 或 Unix 系统下可直接使用，win下需要安装软件 putty xshell</span></span><br></pre></td></tr></table></figure>

<h5 id="scp-基本使用"><a href="#scp-基本使用" class="headerlink" title="scp 基本使用"></a>scp 基本使用</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从远程服务器拷贝文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">scp user@remoteip:文件名或路径 文件名或路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-r 复制目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-P 指定端口是要用大写的 P</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传文件到服务器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">scp 文件名或路径 user@remote ip:文件名或路径</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>scp</code> 命令只能在 <code>Linux</code> 或 <code>Unix</code> 下使用</p>
</blockquote>
<p>在 win 系统中需安装 filezilla 使用 FTP 进行文件传输</p>
<p>FileZilla 传输文件时，使用的是 <code>FTP</code> 服务而不是 <code>SSH</code> 服务，因此端口号应该为 <code>21</code></p>
<h5 id="ssh-高级"><a href="#ssh-高级" class="headerlink" title="ssh 高级"></a>ssh 高级</h5><ul>
<li>免密码登陆</li>
</ul>
<p>配置公钥：执行 <code>ssh-keygen</code> 即可生成 ssh 钥匙，一路回车即可</p>
<p><code>id_rsa.pub</code> 公钥 、 <code>id_rsa</code> 私钥</p>
<p>上传公钥到服务器：执行 <code>ssh-copy-id -p port user@remote</code>，公钥保存在服务器 <code>.ssh</code> 目录下</p>
<p><code>authorized_keys</code></p>
<blockquote>
<p>本地使用私钥对数据进行加密&#x2F;解密，服务器使用公钥对数据进行加密&#x2F;解密</p>
<p>非对称加密算法</p>
<p>使用公钥加密的数据，需要使用私钥解密</p>
<p>使用公私钥加密的数据，需要使用公钥解密</p>
</blockquote>
<ul>
<li>配置别名</li>
</ul>
<p><code>~/.ssh/config</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host vultr</span><br><span class="line">	HostName ip地址</span><br><span class="line">	User root</span><br><span class="line">	port 22</span><br></pre></td></tr></table></figure>

<p>直接使用 <code>ssh vultr</code> 即可实现登陆，<code>scp</code> 同样适用</p>
<h4 id="修改-ssh-配置允许自定义工具连接服务器"><a href="#修改-ssh-配置允许自定义工具连接服务器" class="headerlink" title="修改 ssh 配置允许自定义工具连接服务器"></a>修改 ssh 配置允许自定义工具连接服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 root 角色</span></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 SSH 配置文件 /etc/ssh/sshd_config</span></span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span> <span class="comment"># 开启root用户访问</span></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span> <span class="comment"># 开启密码登陆</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给root用户设置密码</span></span><br><span class="line">passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启SSH服务使修改生效</span></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<h3 id="用户和权限的相关命令"><a href="#用户和权限的相关命令" class="headerlink" title="用户和权限的相关命令"></a>用户和权限的相关命令</h3><h4 id="用户和权限的基本概念"><a href="#用户和权限的基本概念" class="headerlink" title="用户和权限的基本概念"></a>用户和权限的基本概念</h4><ul>
<li><p>用户管理包括 <strong>用户</strong> 和 <strong>组</strong> 管理</p>
</li>
<li><p>在 linux 中可以指定每一个用户针对不同的文件或目录不同的权限</p>
</li>
<li><p>对<strong>文件&#x2F;目录的权限</strong>包括</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>权限</th>
<th>英文</th>
<th>缩写</th>
<th>数字代号</th>
</tr>
</thead>
<tbody><tr>
<td>读</td>
<td>red</td>
<td>r</td>
<td>4</td>
</tr>
<tr>
<td>写</td>
<td>write</td>
<td>w</td>
<td>2</td>
</tr>
<tr>
<td>执行</td>
<td>excute</td>
<td>x</td>
<td>1</td>
</tr>
<tr>
<td>无</td>
<td></td>
<td>-</td>
<td>0</td>
</tr>
</tbody></table>
<p><strong>组</strong>：实际工作中，可以预先对组设置好权限，然后将不同的用户添加到不同的组中（简化了用户权限设置）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> -l 扩展</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line">-rw-rw-r-- 1 用户名 组名 大小 时间 名称</span><br><span class="line">drwxrwxr-x 2</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>rw-</td>
<td>rw-</td>
<td>r–</td>
<td>1</td>
<td>用户名</td>
<td>组名</td>
</tr>
<tr>
<td>d</td>
<td>rwx</td>
<td>rwx</td>
<td>r-x</td>
<td>2</td>
<td></td>
<td></td>
</tr>
<tr>
<td>文件&#x2F;目录</td>
<td>当前用户权限</td>
<td>当前组所对应的权限</td>
<td>其他用户权限</td>
<td>硬链接数</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>硬链接数：表示有多少种方式可以访问到当前目录&#x2F;文件，文件的硬链接数通常为 1，目录的硬链接数取决于该目录有多少个子目录。</p>
<h4 id="修改文件-x2F-目录权限-chmod"><a href="#修改文件-x2F-目录权限-chmod" class="headerlink" title="修改文件&#x2F;目录权限 chmod"></a>修改文件&#x2F;目录权限 <code>chmod</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> +/-rwx 文件名|目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">+ 增加权限  - 删除权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接修改文件/目录的读、写、执行权限，但不能精确到 拥有者/组/其他</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> +x 文件名 // 增加文件可执行权限</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> -r 目录 // 删除目录可读权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录的可读权限：读取目录内容（如果没有此权限，可<span class="built_in">cd</span>，不能<span class="built_in">ls</span>）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录的可写权限：修改目录内容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录的可执行权限：对目录执行终端命令（如果没有此权限，甚至无法 <span class="built_in">cd</span> 到目录）</span></span><br></pre></td></tr></table></figure>

<p>chmod 高级用法</p>
<h4 id="超级用户"><a href="#超级用户" class="headerlink" title="超级用户"></a>超级用户</h4><ul>
<li><p><code>root</code> 账户用于系统的维护和管理，对操作系统的所有资源具有所有访问权限</p>
</li>
<li><p>不推荐直接使用 root 账户登录系统</p>
</li>
<li><p>在 linux 安装过程中，系统会自动创建一个标准用户账号</p>
</li>
</ul>
<p><strong>sudo</strong></p>
<ul>
<li><p><code>su</code> 是 <code>substitute user</code> 缩写，表示使用另一个用户身份</p>
</li>
<li><p><code>sudo</code> 命令用来以其他身份来执行命令，预设身份为 root</p>
</li>
<li><p>用户使用 sudo 时，需先输入密码，之后有五分钟的有效期，超过期限去重新输入密码</p>
</li>
</ul>
<h4 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h4><p><code>groupadd 组名</code> ：添加组</p>
<p><code>groupdel 组名</code> ：删除组</p>
<p><code>cat /etc/group</code> ：确认组信息</p>
<p><code>chgrp 组名 文件/目录名</code> ：修改文件&#x2F;目录的所属组 -R 递归修改</p>
<blockquote>
<p>创建组&#x2F;删除组的终端命令都需要通过 sudo 来执行</p>
<p>组信息保存在 &#x2F;etc&#x2F;group 文件中</p>
<p>&#x2F;etc 目录是专门用来保存 系统配置信息的目录</p>
</blockquote>
<h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><p><strong>创建用户&#x2F;设置密码&#x2F;删除用户</strong></p>
<p><code>useradd -m -g 组 新建用户名</code> ：添加新用户</p>
<p>​-m 自动建立用户家目录</p>
<p>​-g 指定用户所在的组，否则会建立一个和用户名同名的组</p>
<p><code>passwd 用户名</code>：设置用户密码</p>
<p>​ 如果是普通用户，直接用 passwd 可以修改自己的账户密码</p>
<p><code>userdel -r 用户名</code>：删除用户</p>
<p>​-r 选项自动删除用户家目录</p>
<p><code>cat /etc/passwd | grep 用户名</code>：确认用户信息</p>
<p>​ 新建用户后，用户信息保存在 <code>/etc/passwd</code> 文件中</p>
<blockquote>
<p>创建用户&#x2F;删除用户&#x2F;修改其他用户密码 的命令都需要通过 <code>sudo</code> 执行</p>
<p>用户信息保存在 <code>/etc/passwd</code> 文件中</p>
</blockquote>
<p><strong>查看用户信息</strong></p>
<p><code>id [用户名]</code>：查看用户 UID 和 GID 信息</p>
<p><code>who</code> ：查看当前所有登陆的用户列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">who</span></span></span><br><span class="line">用户名  时间 (:0) # :0 表示当前电脑</span><br><span class="line">用户名  时间 (172.16.xx.xx)</span><br></pre></td></tr></table></figure>

<p><code>whoami</code> ：查看当前登录用户的账户名</p>
<p><strong>passwd 文件</strong> 由六个分号组成七个信息</p>
<ol>
<li>用户名</li>
<li>密码（x，表示加密的密码）</li>
<li>UID（用户标识）</li>
<li>GID（组标识）</li>
<li>用户全名</li>
<li>家目录</li>
<li>登录使用的 shell，就是登陆之后使用的终端，ubuntu 默认使用 <code>dash</code></li>
</ol>
<p><strong>usermod</strong></p>
<p>用来设置用户的主组&#x2F;附加组 和登录 shell</p>
<p>主组：在用户新建时指定，在 <code>etc/passwd</code> 的第四列 GID 对应的组</p>
<p>附加组：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定用户的附加权限</p>
<blockquote>
<p>设置用户的附加组之后，需要重新登录才能生效</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改用户的主组</span></span><br><span class="line">$ usermod -g 组 用户名</span><br><span class="line"><span class="comment"># 修改用户的附加组</span></span><br><span class="line">$ usermod -G 组 用户名</span><br><span class="line"><span class="comment"># 修改用户登录shell</span></span><br><span class="line">$ usermod -s /bin/bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认使用 <code>useradd</code> 添加的用户是没有权限使用 <code>sudo</code> 以 <code>root</code> 身份执行命令的，使用以下命令将用户添加到 <code>sudo</code> 附加组中</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -G sudo 用户名</span><br></pre></td></tr></table></figure>

<p><strong>which</strong></p>
<blockquote>
<p><code>/etc/passwd</code> 是用于保存用户信息的文件</p>
<p><code>/usr/bin/passwd</code> 是用于修改用户密码的程序</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># which 可用于查看执行命令所在的位置</span></span><br><span class="line">$ <span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># /bin/ls</span></span><br><span class="line">$ <span class="built_in">which</span> useradd</span><br><span class="line"><span class="comment"># /usr/sbin/useradd</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>cd</code> 这个命令是内置在系统内核中的，没有独立文件，因此用 <code>which</code> 无法找到</p>
</blockquote>
<p><strong>bin 和 sbin</strong></p>
<p><code>/bin</code> (binary) 是二进制执行文件目录，主要用于具体应用</p>
<p><code>/sbin</code> (system binary) 是系统管理员专用的二进制文件目录，主要用于系统管理</p>
<p><code>/usr/bin</code> (user commands for applications) 后期安装的一些软件</p>
<p><code>/usr/sbin</code> (super user commands for applications) 超级用户的一些管理程序</p>
<blockquote>
<p>bin 存储普通可执行文件，sbin 存储跟系统管理相关的可执行文件</p>
</blockquote>
<h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p><code>su - 用户名</code>：切换用户，并且切换目录</p>
<p><code>-</code> 可以切换到用户家目录，否则保持位置不变</p>
<p><code>exit</code>： 退出当前登录用户</p>
<blockquote>
<p><code>su</code> 不接用户名，可以切换到 <code>roo</code>，不推荐，不安全</p>
</blockquote>
<p>exit 示意图：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205719.png"></p>
<h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><p>chowm 修改拥有者</p>
<p>chgrp 修改组</p>
<p>chmod 修改权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件/目录的拥有者</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chown</span> 用户名 文件名/目录名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归修改文件/目录的组</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chgrp</span> -R 组名 文件名/目录名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归修改文件权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">755 三个数字分别代表 用户 u /组 g /其他用户 o 的权限</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> -R 755 文件名/目录名</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>r –&gt; 4 w –&gt; 2 x –&gt; 1 无权限 –&gt; 0 ，想要什么权限直接将数字相加</p>
</blockquote>
<h3 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h3><blockquote>
<p>查询服务器上当前系统日期和时间 &#x2F; 磁盘空间占用情况 &#x2F; 程序执行情况</p>
</blockquote>
<h4 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h4><p><code>date</code> ：查看系统时间</p>
<p><code>cal</code> ：<code>calendar</code> 查看日历， <code>-y</code> 选项可以查看一年的日历</p>
<h4 id="磁盘和空间目录"><a href="#磁盘和空间目录" class="headerlink" title="磁盘和空间目录"></a>磁盘和空间目录</h4><p><code>df -h</code> ：<code>disk free</code> 显示磁盘剩余空间 -h 以人性化的方式显示文件大小</p>
<p><code>du -h [目录名]</code> ：<code>disk usage</code> 显示目录占用空间情况，不指定目录默认表示当前目录</p>
<blockquote>
<p>-h 以人性化的方式显示文件大小</p>
</blockquote>
<h4 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h4><p>PID 进程代号</p>
<p><code>ps au</code> : <code>process status</code> 查看进程的详细状况，默认只显示当前用户通过终端启动的程序</p>
<p>​ps 选项(没有减号)</p>
<p>​<code>a</code> 显示终端上的所有进程，包括其他用户的进程</p>
<p>​<code>u</code> 显示进程的详细状态</p>
<p>​<code>x</code> 显示不是通过终端启动的进程</p>
<p><code>top</code> : 动态显示运行中的进程并且排序 ，输入 q 退出</p>
<p><code>kill [-9] 进程代号</code> : 终止指定代号的进程，<code>-9</code> 表示强行终止</p>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><p><code>find [路径] -name “*.txt”</code> : 查找指定路径下扩展名为.txt 的文件，包括子目录</p>
<p>​ 如果省略路径，表示在当前文件夹下查找</p>
<h4 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h4><p><code>ln -s 被链接的源文件 链接文件</code> ：建立文件的软链接，类似于 Windows 下的快捷方式</p>
<p>注意：</p>
<ul>
<li><p>如果没有 <code>-s</code> 选项建立的是一个硬链接文件（两个文件占用相同大小的磁盘空间，几乎不用）</p>
</li>
<li><p>源文件要使用绝对路径，可以方便移动链接文件后，仍然能够正常使用</p>
</li>
</ul>
<h5 id="文件软硬链接示意图"><a href="#文件软硬链接示意图" class="headerlink" title="文件软硬链接示意图"></a>文件软硬链接示意图</h5><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205748.png"></p>
<ul>
<li><p>在 linux 中<strong>文件名</strong>和<strong>文件的数据</strong>是分开存储的</p>
</li>
<li><p>在 linux 中，只有文件的硬链接数为 0 文件才会被删除</p>
</li>
<li><p>在日常工作中几乎不会建立文件的硬链接</p>
</li>
</ul>
<h4 id="打包和解包"><a href="#打包和解包" class="headerlink" title="打包和解包"></a>打包和解包</h4><p>tar 是 Linux 中常用的备份工具，此命令可以把一系列文件打包到一个大文件中，也可以把一个打包的大文件恢复成一系列文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包文件</span></span><br><span class="line">tar -cvf 打包文件.tar 被打包的文件/路径 (多个文件一次写在后面，用空格隔开)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解包文件</span></span><br><span class="line">tar -xvf 打包文件.tar</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>c</code> 生成档案文件，创建打包文件</p>
</li>
<li><p><code>x</code> 解开档案文件</p>
</li>
<li><p><code>v</code> 列出归档接档的详细过程</p>
</li>
<li><p><code>f</code> 指定档案文件名称， f 选项必须放在最后</p>
</li>
</ul>
<h4 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h4><p><strong>gzip</strong></p>
<ul>
<li><p><code>tar</code> 和 <code>gzip</code> 命令结合使用实现文件打包和压缩</p>
<ul>
<li><p><code>tar</code> 只负责打包，但不压缩</p>
</li>
<li><p>用 <code>gzip</code> 压缩 <code>ta</code>r 打包后的文件，扩展名为 <code>xxx.tar.gz</code></p>
</li>
</ul>
</li>
<li><p><code>tar</code> 命令中 <code>-z</code> 选项可以调用 <code>gzip</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩文件</span></span><br><span class="line">tar -zcvf 打包文件.tar.gz 被压缩文件/路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压缩文件</span></span><br><span class="line">tar -zxvf 打包文件.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压缩到指定路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-C 解压到指定路径，（路径必须存在）</span></span><br><span class="line">tar -zxvf 打包文件.tar.gz -C 目标路径</span><br></pre></td></tr></table></figure>

<p><strong>bzip2</strong></p>
<ul>
<li><p><code>tar</code> 和 <code>bzip2</code> 命令结合使用实现文件打包和压缩（用法同 <code>gzip</code>）</p>
<ul>
<li><p><code>tar</code> 只负责打包，但不压缩</p>
</li>
<li><p>用 <code>bzip2</code> 压缩 <code>ta</code>r 打包后的文件，扩展名为 <code>xxx.tar.bz2</code></p>
</li>
</ul>
</li>
<li><p><code>tar</code> 命令中 <code>-j</code> 选项可以调用 <code>bzip2</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩文件</span></span><br><span class="line">tar -jcvf 打包文件.tar.bz2 被压缩文件/路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压缩文件</span></span><br><span class="line">tar -jxvf 打包文件.tar.bz2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压缩到指定路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-C 解压到指定路径，（路径必须存在）</span></span><br><span class="line">tar -jxvf 打包文件.tar.bz2 -C 目标路径</span><br></pre></td></tr></table></figure>

<h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><p><code>apt</code> : <code>Advanced Packaging Tool</code> ，linux 下安装包管理工具，可以方便的安装&#x2F;卸载&#x2F;更新软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装软件</span></span><br><span class="line">sudo apt install 软件包</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载软件</span></span><br><span class="line">sudo apt remove 如软件名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新已安装的包</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h3 id="防火墙管理"><a href="#防火墙管理" class="headerlink" title="防火墙管理"></a>防火墙管理</h3><p>CentOS7 默认的防火墙不是 iptables,而是 firewalle</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加规则</span></span><br><span class="line">firewall-cmd --add-port=16343/tcp</span><br><span class="line">firewall-cmd --zone=public --add-port=16343/tcp --permanent （--permanent 永久生效，没有此参数重启后失效）</span><br><span class="line"><span class="comment"># 重新载入</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment"># 列出端口信息</span></span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<p>使用 iptables</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先检查是否安装了iptables</span></span><br><span class="line">service iptables status</span><br><span class="line"><span class="comment"># 安装iptables</span></span><br><span class="line">yum install -y iptables</span><br><span class="line"><span class="comment"># 升级iptables</span></span><br><span class="line">yum update iptables</span><br><span class="line"><span class="comment"># 安装iptables-services</span></span><br><span class="line">yum install iptables-services</span><br><span class="line"><span class="comment"># 停止firewalld服务</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁用firewalld服务</span></span><br><span class="line">systemctl mask firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#注册iptables服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service</span><br><span class="line"><span class="comment"># 开启 iptables 防火墙</span></span><br><span class="line">systemctl start iptables.service</span><br><span class="line"><span class="comment"># 重启iptables防火墙</span></span><br><span class="line">systemctl restart iptables.service</span><br><span class="line"><span class="comment"># 关闭 iptables 防火墙</span></span><br><span class="line">systemctl stop iptables.service</span><br><span class="line"><span class="comment"># 查看 iptables 防火墙状态</span></span><br><span class="line">systemctl status iptables.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看iptables现有规则</span></span><br><span class="line">iptables -L -n</span><br><span class="line"><span class="comment"># 允许所有</span></span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line"><span class="comment"># 清空所有默认规则</span></span><br><span class="line">iptables -F</span><br><span class="line"><span class="comment"># 清空所有自定义规则</span></span><br><span class="line">iptables -X</span><br><span class="line"><span class="comment"># 所有计数器归0</span></span><br><span class="line">iptables -Z</span><br><span class="line"><span class="comment"># 允许来自于lo接口的数据包(本地访问)</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="comment"># 开放22端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line"><span class="comment"># 开放21端口(FTP)</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line"><span class="comment"># 开放80端口(HTTP)</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="comment"># 开放443端口(HTTPS)</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line"><span class="comment"># 允许ping</span></span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"><span class="comment"># 允许接受本机请求之后的返回数据 RELATED,是为FTP设置的</span></span><br><span class="line">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment"># 其他入站一律丢弃</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line"><span class="comment"># 所有出站一律绿灯</span></span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line"><span class="comment"># 所有转发一律丢弃</span></span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line"><span class="comment">#保存上述规则</span></span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">service iptables save</span><br><span class="line">systemctl restart iptables.service</span><br></pre></td></tr></table></figure>

<p>sudo -i 为了频繁的执行某些只有超级用户才能执行的权限，而不用每次输入密码，可以使用该命令。提示输入密码时该密码为当前账户的密码。没有时间限制。执行该命令后提示符变为“#”而不是“$”。想退回普通账户时可以执行“exit”或“logout” 。<br>su 切换到某某用户模式，提示输入密码时该密码为切换后账户的密码，用法为“su 账户名称”。如果后面不加账户时系统默认为 root 账户，密码也为超级账户的密码。没有时间限制。<br>sudo su 运行 sudo 命令给 su 命令提权，运行 su 命令。<br>sudo -i 运行结果 PWD&#x3D;&#x2F;root<br>sudo su 运行结果 PWD&#x3D;&#x2F;home&#x2F;用户名（当前用户主目录）</p>
<p>sudo : 暂时切换到超级用户模式以执行超级用户权限，提示输入密码时该密码为当前用户的密码，而不是超级账户的密码。不过有时间限制，Ubuntu 默认为一次时长 15 分钟。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>speedtest 测速脚本</title>
    <url>/230.html</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.github.com/sivel/speedtest-cli/master/speedtest.py</span><br><span class="line"><span class="comment"># 添加权限</span></span><br><span class="line"><span class="built_in">chmod</span> a+rx speedtest.py</span><br><span class="line"><span class="comment"># 简单的使用方法</span></span><br><span class="line">python speedtest.py</span><br><span class="line"><span class="comment"># 生成一张图片，并分享给其他人</span></span><br><span class="line">python speedtest.py --share</span><br><span class="line"><span class="comment"># 在默认情况下，SpeedTest是选择离测试机最近的一个节点进行测试的，如果你想要自定义测试到某个地区的上传/下载速率，那首先列出目前可用的SpeedTest服务器：</span></span><br><span class="line">python speedtest.py --list</span><br><span class="line"><span class="comment"># 此时会列出所有的服务器（按照距离远近进行排列）</span></span><br><span class="line"><span class="comment"># 如果想一点一点的列出服务器，请输入：</span></span><br><span class="line">python speedtest.py --list|more</span><br><span class="line"><span class="comment"># 如果你想列出指定地区的测试节点，可以使用</span></span><br><span class="line">python speedtest.py --list | grep China</span><br><span class="line">python speedtest.py --server 22991</span><br><span class="line"><span class="comment"># 如果是要生成分享的图片，那就加上 share</span></span><br><span class="line">python speedtest.py --server 11599 --share</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用wget或者curl下载文件</title>
    <url>/1947.html</url>
    <content><![CDATA[<h2 id="下载-github-release-文件"><a href="#下载-github-release-文件" class="headerlink" title="下载 github release 文件"></a>下载 github release 文件</h2><p>下载编译好的软件包（需要有编译的包）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget</span></span><br><span class="line">wget --no-check-certificate --content-disposition https://github.com/ctripcorp/apollo/releases/download/v1.5.1/apollo-adminservice-1.5.1-github.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl</span></span><br><span class="line">curl -LJO https://github.com/ctripcorp/apollo/releases/download/v1.5.1/apollo-adminservice-1.5.1-github.zip</span><br></pre></td></tr></table></figure>

<p>下载源码压缩包</p>
<p>wget -q <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdC9naXQvYXJjaGl2ZS92JCU3QkdJVF9WRVJTSU9OJTdELnRhci5neg==">https://github.com/git/git/archive/v${GIT_VERSION}.tar.gz</span><br>wget -O git-master.zip <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdC9naXQvYXJjaGl2ZS8kJTdCR0lUX0JSQU5DSCU3RC56aXA=">https://github.com/git/git/archive/${GIT_BRANCH}.zip</span></p>
<p>下载仓库中的单个文件</p>
<p>点击文件进去，右上角有个raw，点击进去后地址栏就是该文件的下载地址<br>直接 <code>wget 地址</code> 即可下载</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>免费申请SSL证书，为网站启用 HTTPS</title>
    <url>/1909.html</url>
    <content><![CDATA[<h2 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h2><p>官方网站：<span class="exturl" data-url="aHR0cHM6Ly9sZXRzZW5jcnlwdC5vcmcv">https://letsencrypt.org/</span></p>
<p>现提供通配符 SSL 证书，需使用 certbot 或 acme.sh 手动发行</p>
<h3 id="certbot"><a href="#certbot" class="headerlink" title="certbot"></a>certbot</h3><p>github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NlcnRib3QvY2VydGJvdA==">https://github.com/certbot/certbot</span></p>
<p>安装 EPEL</p>
<p>EPEL (Extra Packages for Enterprise Linux)是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供额外的软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure>

<p>安装 certbot</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install certbot</span><br></pre></td></tr></table></figure>

<p>申请 SSL 证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certbot certonly --standalone -d www.test.org</span><br></pre></td></tr></table></figure>

<p>证书文件在 &#x2F;etc&#x2F;letsencrypt&#x2F; 文件夹下</p>
<h3 id="acme-sh"><a href="#acme-sh" class="headerlink" title="acme.sh"></a>acme.sh</h3><p>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书</p>
<p>github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FjbWVzaC1vZmZpY2lhbC9hY21lLnNoL3dpa2kvJUU4JUFGJUI0JUU2JTk4JThF">https://github.com/acmesh-official/acme.sh/wiki/说明</span></p>
<h3 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h3><p>支持一键配置 <code>宝塔SSL</code>,<code>Let&#39;s Encrypt</code>免费证书</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184437.png"></p>
<h2 id="freessl"><a href="#freessl" class="headerlink" title="freessl"></a>freessl</h2><p>提供免费HTTPS证书申请 <span class="exturl" data-url="aHR0cHM6Ly9mcmVlc3NsLmNuLw==">https://freessl.cn/</span></p>
<h2 id="FiloSottile-x2F-mkcert"><a href="#FiloSottile-x2F-mkcert" class="headerlink" title="FiloSottile&#x2F;mkcert"></a>FiloSottile&#x2F;mkcert</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZpbG9Tb3R0aWxlL21rY2VydA==">https://github.com/FiloSottile/mkcert</span> 生成本地 HTTPS 加密证书（localhost 127.0.0.1）</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>HTTPS 网站检测 <span class="exturl" data-url="aHR0cHM6Ly9teXNzbC5jb20v">https://myssl.com/</span></p>
<p>参考文章：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90ZWRkeXN1bi5jb20vNTI3Lmh0bWw=">https://teddysun.com/527.html</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>网站配置SSL后无法访问解决办法</title>
    <url>/450.html</url>
    <content><![CDATA[<ol>
<li><p>开放 443 端口</p>
</li>
<li><p>域名证书有效且配置正确</p>
</li>
<li><p>ssl配置问题</p>
</li>
</ol>
<p>正确启用HTTP&#x2F;2支持，正确配置ssl_protocols和ssl_ciphers</p>
<p>启用HTTP2并非只在 listen 443 ssl 配置中加入http2就行了，它主要需要两个地方的设置支持：ssl_protocols 和 ssl_ciphers 。</p>
<p>修改如下配置以向后兼容</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">listen 443 ssl http2;</span><br><span class="line"><span class="deletion">- ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span></span><br><span class="line"><span class="addition">+ ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span></span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br></pre></td></tr></table></figure>

<p>在线 http2 检测</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucm9zZWhvc3RpbmcuY29tL25ldHdvcmstdG9vbHMvaHR0cDItc3VwcG9ydC5odG1s">https://www.rosehosting.com/network-tools/http2-support.html</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9teXNzbC5jb20vaHR0cDJfY2hlY2suaHRtbA==">https://myssl.com/http2_check.html</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3NsbGFicy5jb20vc3NsdGVzdC9hbmFseXplLmh0bWw=">https://www.ssllabs.com/ssltest/analyze.html</span></p>
<p><img data-src="/wp-content/uploads/2020/03/HTTP2-test.png"><br><img data-src="/wp-content/uploads/2020/03/HTTP2-test-1.png"></p>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>ssl</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>解决阿里云服务器无法访问 raw.githubusercontent.com</title>
    <url>/1912.html</url>
    <content><![CDATA[<p>原因是因为dns污染，没法找到正确的ip，可以通过修改host解决</p>
<p>访问<span class="exturl" data-url="aHR0cHM6Ly9naXRodWJ1c2VyY29udGVudC5jb20uaXBhZGRyZXNzLmNvbS9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29t">这里</span>获取正确的ip地址</p>
<p>打开服务器的 hosts 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加这一行内容</span></span><br><span class="line">获取到的ip raw.githubusercontent.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者直接添加下面这一行</span></span><br><span class="line">199.232.68.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>

<p>保存退出，ping 一下试试</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>配置 web 服务器</title>
    <url>/415.html</url>
    <content><![CDATA[<h1 id="Apache-安装"><a href="#Apache-安装" class="headerlink" title="Apache 安装"></a>Apache 安装</h1><h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install httpd  （centos之下，Apache的名字叫httpd，和Apache的主程序 httpd.exe 同名）</span></span><br></pre></td></tr></table></figure>

<h3 id="打开并测试-Apache"><a href="#打开并测试-Apache" class="headerlink" title="打开并测试 Apache"></a>打开并测试 Apache</h3><ul>
<li><p>先确保，云服务器的 80 端口，是允许外网访问的。</p>
</li>
<li><p>开启 Apache 服务</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service httpd start</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">service httpd status</span><br></pre></td></tr></table></figure>

<ul>
<li>测试 Apache 是否正常运行</li>
</ul>
<p>浏览器输入： 外网 IP:80，如果能正常显示 Apache 的内置主页，则说明 Apache 服务已正常开启。</p>
<h3 id="修改-Apache-的配置文件"><a href="#修改-Apache-的配置文件" class="headerlink" title="修改 Apache 的配置文件"></a>修改 Apache 的配置文件</h3><p>主配置文件 <code>/etc/httpd/conf/httpd.conf</code></p>
<p>修改如下键值兼容 php</p>
<blockquote>
<p>键：DirectoryIndex<br>值：index.html index.php</p>
</blockquote>
<p><strong>默认站点主目录</strong>：&#x2F;var&#x2F;www&#x2F;html&#x2F;</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc21iaW4vcC82OTQ2MjEwLmh0bWw=">https://www.cnblogs.com/smbin/p/6946210.html</span></p>
<h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a><strong>安装证书</strong></h3><ol>
<li>安装 ssl 模块</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yum install mod_ssl -y</span><br></pre></td></tr></table></figure>

<p>Ps：安装完成后，会在&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;下生成一个 ssl.conf 配置文件。</p>
<p>建一个目录用来放 ssl 证书文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mkdir /etc/httpd/ssl/</span><br></pre></td></tr></table></figure>

<p>编辑 ssl 配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vim /etc/httpd/conf.d/ssl.conf</span><br></pre></td></tr></table></figure>

<p>修改以下几行，去掉前面的“#”注释；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost&gt;</span><br><span class="line">#网页文件路径</span><br><span class="line">DocumentRoot &quot;/var/www/html&quot;</span><br><span class="line">#改为自己的域名</span><br><span class="line">ServerName cuilongjin.top:80</span><br><span class="line">#启用SSL功能</span><br><span class="line">SSLEngine on</span><br><span class="line">#填写证书文件路径</span><br><span class="line">SSLCertificateFile   /etc/httpd/ssl/cert-1541656252121_cuilongjin.top.key</span><br><span class="line">#填写私钥文件路径</span><br><span class="line">SSLCertificateKeyFile   /etc/httpd/ssl/cert-1541656252121_cuilongjin.top.key</span><br><span class="line">#填写证书链文件路径</span><br><span class="line">SSLCertificateChainFile   /etc/httpd/ssl/cert-1541656252121_cuilongjin.top_chain.crt</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>重启服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># service httpd restart</span><br></pre></td></tr></table></figure>

<h1 id="Nginx-的安装与配置"><a href="#Nginx-的安装与配置" class="headerlink" title="Nginx 的安装与配置"></a>Nginx 的安装与配置</h1><h2 id="CentOS-下安装："><a href="#CentOS-下安装：" class="headerlink" title="CentOS 下安装："></a><strong>CentOS</strong> 下安装：</h2><p>通过安装包安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装所需环境</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官网下载 nginx https://nginx.org/</span></span><br><span class="line">yum install wget</span><br><span class="line">wget -c https://nginx.org/download/nginx-1.17.4.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf nginx-1.17.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.17.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找安装路径：</span></span><br><span class="line">whereis nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动、停止 重启 nginx</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin/</span><br><span class="line">./nginx <span class="comment"># 启动</span></span><br><span class="line">./nginx -s stop <span class="comment"># 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程</span></span><br><span class="line">./nginx -s quit <span class="comment"># 此方式停止步骤是待nginx进程处理任务完毕进行停止</span></span><br><span class="line">./nginx -s quit &amp;&amp; ./nginx <span class="comment"># 重启 nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line"><span class="comment"># 配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用 -s reload 不用先停止 nginx 再启动即可将配置信息在 nginx 中生效，如下：</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 nginx 进程</span></span><br><span class="line">ps aux|grep nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">在 rc.local 增加启动代码</span><br><span class="line">vi /etc/rc.local</span><br><span class="line"><span class="comment"># 增加一行 /usr/local/nginx/sbin/nginx</span></span><br><span class="line"><span class="comment"># 设置执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> 755 rc.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 nginx 为系统服务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>centos 下，yum 源不提供 nginx 的安装，可以通过切换 yum 源的方法获取安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure>

<p>主站点目录&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
<p><strong>配置 Nginx：</strong></p>
<p>Nginx 的配置文件默认位置为：<code>/etc/nginx/nginx.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80; #监听80端口，接收http请求</span><br><span class="line">  server_name  localhost; #就是网站地址</span><br><span class="line">  root         /usr/share/nginx/html; # 准备存放代码工程的路径</span><br><span class="line">  #路由到网站根目录www.example.com时候的处理</span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #当请求网站下php文件的时候，反向代理到php-fpm</span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">    include fastcgi.conf; #加载nginx的fastcgi模块</span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000; #nginx fastcgi进程监听的IP地址和端口</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义 Nginx 站点配置文件存放目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/nginx/conf.d/</span><br></pre></td></tr></table></figure>

<p>默认站点目录&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
<p>安装 php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install php php-fpm</span><br></pre></td></tr></table></figure>

<p>配置 php.ini</p>
<p>&#x2F;etc&#x2F;php.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cgi.fix_pathinfo=1</span><br></pre></td></tr></table></figure>

<p>配置 php-fpm</p>
<p>&#x2F;etc&#x2F;php-fpm.d&#x2F;<span class="exturl" data-url="aHR0cDovL3d3dy5jb25mLw==">www.conf</span></p>
<p>user &#x3D; nginx</p>
<p>group &#x3D; nginx</p>
<p>chkconfig php-fpm on #设置 php-fpm 自启动</p>
<p>service nginx restart #重新启动 nginx</p>
<p>service php-fpm start #启动 php-fpm</p>
<p>sudo iptables -I INPUT -p tcp -m tcp –dport 80 -j ACCEPT</p>
<p>sudo iptables -I INPUT -p tcp -m tcp –dport 443 -j ACCEPT</p>
<p>iptables -L -n</p>
<p>&#x2F;usr&#x2F;sbin&#x2F;nginx</p>
<p>查询 nginx 进程</p>
<p>ps -ef | grep nginx</p>
<p>nginx 配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># HTTPS server configuration</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       443 ssl http2 default_server;</span><br><span class="line">  listen       [::]:443 ssl;</span><br><span class="line">  server_name  _;</span><br><span class="line">  root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">  ssl_certificate ssl/cuilongjin.top.pem;</span><br><span class="line">  ssl_certificate_key ssl/cuilongjin.top.key;</span><br><span class="line">  ssl_session_cache shared:SSL:1m;</span><br><span class="line">  ssl_session_timeout  10m;</span><br><span class="line">  ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">  # Load configuration files for the default server block.</span><br><span class="line">  include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">  &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">      root html;</span><br><span class="line">      fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">      fastcgi_index index.php;</span><br><span class="line">      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">      include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  error_page 404 /404.html;</span><br><span class="line">    location = /40x.html &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  error_page 500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># The default server</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80 default_server;</span><br><span class="line">  listen       [::]:80 default_server;</span><br><span class="line">  server_name  _;</span><br><span class="line">  root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">  # Load configuration files for the default server block.</span><br><span class="line">  include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">    root html;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  error_page 404 /404.html;</span><br><span class="line">    location = /40x.html &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  error_page 500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ubuntu-下安装"><a href="#ubuntu-下安装" class="headerlink" title="ubuntu 下安装"></a>ubuntu 下安装</h2><p>安装 nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p>Ubuntu 安装之后的文件结构大致为：</p>
<ul>
<li>所有的配置文件都在&#x2F;etc&#x2F;nginx 下，并且每个虚拟主机已经安排在了&#x2F;etc&#x2F;nginx&#x2F;sites-available 下</li>
<li>程序文件在&#x2F;usr&#x2F;sbin&#x2F;nginx</li>
<li>日志文件在&#x2F;var&#x2F;log&#x2F;nginx</li>
<li>并已经在&#x2F;etc&#x2F;init.d&#x2F;下创建了启动脚本 nginx</li>
<li>服务器配置文件在&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;</li>
<li>默认主站点目录 &#x2F;var&#x2F;www&#x2F;html，（有的可能在&#x2F;var&#x2F;www）, 请参考&#x2F;etc&#x2F;nginx&#x2F;sites-available 里的配置</li>
</ul>
<p>安装 php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install php</span><br></pre></td></tr></table></figure>

<p>配置 php.ini &#x2F;etc&#x2F;php&#x2F;7.2&#x2F;cli&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cgi.fix_pathinfo=1</span><br></pre></td></tr></table></figure>

<p>配置 php-fpm</p>
<p>启动 nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br><span class="line">/etc/init.d/nginx stop</span><br><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>

<p>删除 nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx</span><br><span class="line"><span class="comment"># –-purge 包括配置文件</span></span><br></pre></td></tr></table></figure>

<h2 id="arch-下安装-nginx"><a href="#arch-下安装-nginx" class="headerlink" title="arch 下安装 nginx"></a>arch 下安装 nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S nginx</span><br></pre></td></tr></table></figure>

<p>启动 Nginx 服务,运行以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemctl start nginx</span><br></pre></td></tr></table></figure>

<h3 id="要-Nginx-服务开机时启动-运行以下命令"><a href="#要-Nginx-服务开机时启动-运行以下命令" class="headerlink" title="要 Nginx 服务开机时启动,运行以下命令:"></a>要 Nginx 服务开机时启动,运行以下命令:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># systemctl enable nginx</span><br></pre></td></tr></table></figure>

<p>默认页面是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>你可以修改在 <strong>&#x2F;etc&#x2F;nginx&#x2F;</strong> 目录中的文件来更改配置 <strong>.&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</strong> 是主配置文件</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Jellyfin开启硬件加速</title>
    <url>/1424.html</url>
    <content><![CDATA[<p>之前使用群晖 Docker 折腾 Jellyfin，解决了个人音视频收藏的基本需求，但仍有不足，比如说视频播放的时候，CPU 占用会很高（软解吃 CPU），并且会卡顿。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>1、查看系统是否支持显卡硬解转码</p>
<p>使用 SSH 登录群晖系统，运行命令<code>ls /dev/dri</code>，若输出 card0、renderD128，则说明支持显卡硬解。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202420.png"></p>
<p>2、给容器提权</p>
<p>在群群 Docker 容器中找到 Jellyfin 的容器，编辑容器的常规设置，必须勾选使用高权限执行容器。</p>
<p>3、添加环境</p>
<p>在环境中添加两项，分别是 <code>PUID</code> 值填写为 <code>0</code> ，<code>PGID</code> 值填写为 <code>0</code></p>
<p>4、启用 <code>VAAPI</code> 硬件加速</p>
<p>Docker 中启动容器，打开 Jellyfin 网页端，依次进入控制台-&gt;播放，在硬件选项中选择 VAAPI 保存设置即可。</p>
<h4 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h4><p>前后对比：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202439.png"></p>
<p>可以看到 CPU 占用明显降低了，播放也不卡顿了，效果还是非常明显的。</p>
]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>jellyfin</tag>
      </tags>
  </entry>
  <entry>
    <title>使用群晖Docker安装Jellyfin家庭影院</title>
    <url>/1365.html</url>
    <content><![CDATA[<blockquote>
<p>plex 和 emby，这两个软件是不错，但是因为收费，不得不放弃之。</p>
</blockquote>
<p>jellyfin开源地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plbGx5ZmluL2plbGx5Zmlu">https://github.com/jellyfin/jellyfin</span></p>
<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>在群辉套件中心搜索 docker 并安装</p>
<h3 id="安装-jellyfin"><a href="#安装-jellyfin" class="headerlink" title="安装 jellyfin"></a>安装 jellyfin</h3><ul>
<li><p>打开 docker，点击注册表，搜索 jellyfin，双击第一个进行安装：如果有提示 请选择标签，直接点 latest 选择就好，点击映像，会看到 jellyfin，等待下载完成</p>
</li>
<li><p>进入群晖的文件管理器里面，在 docker 文件夹内新建一个名字叫 jellyfin 的文件夹</p>
</li>
<li><p>打开控制编办，创建共享文件夹，比如 video，用来保存电影</p>
</li>
<li><p>镜像下载好了后，我们进入到映像里，选择下载的 jellyfin，点启动</p>
</li>
<li><p>点击高级设置，然后点击卷，添加文件夹，将 jellyfin 和 video 文件夹都添加上：将<code>video</code>文件夹装载到 <code>/media</code>下，将<code>docker/jellyfin</code> 装载到 <code>/config</code></p>
</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184514.png"></p>
<ul>
<li>点击端口设置，默认是 8096，设置一样的即可</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184536.png"></p>
<ul>
<li>设置完成后，点击应用 -&gt; 点下一步 -&gt; 点击应用 -&gt;点击容器，可以看到 jellyfin 服务已经运行成功了！</li>
</ul>
<p>docker 下安装 jellyfin 完成</p>
<h3 id="设置-jellyfin"><a href="#设置-jellyfin" class="headerlink" title="设置 jellyfin"></a>设置 jellyfin</h3><ul>
<li><p>在浏览器中输入这个 nas 的 IP 加上端口号 8096，如<code>IP:8096</code>，就进入到了 jellyfin 设置页面，默认是英文，先设置成中文，点击 Next</p>
</li>
<li><p>然后要求设置一下账号和密码，简单设置一下即可，点击 Next</p>
</li>
<li><p>添加媒体库，暂时先不添加，直接点 Next 跳过</p>
</li>
<li><p>然后选择语言，选择 Chinese，然后下面的国家，选择 people’s Republic of china，点击 Next</p>
</li>
<li><p>默认，点击 Next</p>
</li>
<li><p>点击 Finish</p>
</li>
<li><p>这个时候进入到了登录页面，输入用户密码进入到 jellyfin 里面，因为没有设置媒体库，所以没有内容</p>
</li>
</ul>
<h3 id="设置媒体库"><a href="#设置媒体库" class="headerlink" title="设置媒体库"></a>设置媒体库</h3><ul>
<li><p>点击左上角 -&gt; 控制台 -&gt; 媒体库 -&gt; 添加媒体库</p>
</li>
<li><p>这里有一些分类，比如电影，音乐，电视剧等，会刮削一些媒体对应的内容，这里先选择了电影，将右上角的显示高级设置打开，依次设置名称、文件夹、语言，文件夹选择<code>/media</code> 这个文件夹里面你存放电影的文件夹（这个&#x2F;media，就是我们之前设置的 video 文件夹）</p>
</li>
<li><p>将媒体图像保存到文件夹打勾，这样会将刮削的封面直接放到你电影的文件夹里</p>
</li>
<li><p>其他默认，点击确定后，就开始自动扫描媒体库了，这个过程，会自动根据电影的文件名在网上进行刮削，制作电影墙</p>
</li>
<li><p>扫描媒体是一个很慢的过程，我们再添加一下电视节目的类型，比如电视剧，连续剧都放到这个目录下，还是老规矩，元数据里的全部打勾，将媒体保存到文件夹里也打勾</p>
</li>
<li><p>到此，基础的 jellyfin 就设置好了，只要返回主页就能看到自己的电影了！</p>
</li>
</ul>
<h3 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h3><ul>
<li><p>除了媒体库和转码设置，还有一个字幕插件，有些我们下的国外的电影，是没有字幕的，拥有了这个插件，可以进行自动下载匹配的字幕。点击到插件选项，右边往下移，找到 open subtitles 这个， 点击安装版本进行安装</p>
</li>
<li><p>安装后，提示要重启 jellyfin 服务， 我们进入到 docker 里，将这个容器进行重启，重启后，点到插件，就可以看到这个插件了</p>
</li>
<li><p>进入这个插件，填上账号密码就 ok 了，账号没有的话，点击下面的 register 注册一下</p>
</li>
</ul>
<h3 id="其它设置"><a href="#其它设置" class="headerlink" title="其它设置"></a>其它设置</h3><p>端口设置</p>
<p>多用户，权限控制</p>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>演员照片不显示<br>添加host<br>13.225.69.117 api.themoviedb.org</p>
]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>jellyfin</tag>
        <tag>docker</tag>
        <tag>群辉</tag>
      </tags>
  </entry>
  <entry>
    <title>群辉 NAS docker 中配置 v2ray 客户端</title>
    <url>/1165.html</url>
    <content><![CDATA[<h2 id="安装docker插件-v2ray-映像"><a href="#安装docker插件-v2ray-映像" class="headerlink" title="安装docker插件 + v2ray 映像"></a>安装docker插件 + v2ray 映像</h2><p><strong>注意：X86 架构的 CPU 支持 docker，ARM 架构的 CPU 不支持 docker</strong></p>
<p>在群辉套件中心搜索 <code>docker</code> 并安装</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184610.png"></p>
<p>打开 docker，搜索 v2ray，双击下载 <code>v2ray/official</code> 即可</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102200946.png"></p>
<p>选择刚刚下载的映像，点击启动</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202910.png"></p>
<p>输入容器名称，点击高级设置</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201229.png"></p>
<p>在高级设置中勾选启用自动重新启动和创建桌面快捷方式</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201257.png"></p>
<p>在卷中添加文件夹，装载路径为 <code>/etc</code>。需要提前在file station 中创建好 <code>docker/v2ray</code> 文件夹</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201321.png"></p>
<p>在网络中勾选 使用与 Docker Host 相同的网络</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201343.png"></p>
<p>其他默认，点击应用</p>
<p>点击下一步</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201404.png"></p>
<p>将 <code>向导完成后运行此容器</code> 取消选中（因为还没有配置文件）。点击应用</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201429.png"></p>
<h2 id="v2ray-客户端配置文件"><a href="#v2ray-客户端配置文件" class="headerlink" title="v2ray 客户端配置文件"></a>v2ray 客户端配置文件</h2><p>可以用gui客户端中配置好服务器，直接导出客户端配置文件为 <code>config.json</code>，我使用的是 v2rayN</p>
<p>编辑 config.json， 修改 listen 为 0.0.0.0, protocol 为 <code>http</code>，port 随意，也可以不改</p>
<p>在 v2rayN 程序文件夹中 找到 geoip.dat geosite.dat 文件</p>
<p>在刚刚创建的 <code>docker/v2ray</code>文件夹中在创建一个 v2ray 文件夹，将 config.json geoip.dat geosite.dat 三个文件放进去</p>
<p>我的部分 <code>config.json</code> 配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;inbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;tag&quot;: &quot;proxy&quot;,</span><br><span class="line">      &quot;port&quot;: 10808,</span><br><span class="line">      &quot;listen&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">      &quot;protocol&quot;: &quot;http&quot;,</span><br><span class="line">      &quot;sniffing&quot;: &#123;</span><br><span class="line">        &quot;enabled&quot;: true,</span><br><span class="line">        &quot;destOverride&quot;: [</span><br><span class="line">          &quot;http&quot;,</span><br><span class="line">          &quot;tls&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;auth&quot;: &quot;noauth&quot;,</span><br><span class="line">        &quot;udp&quot;: true,</span><br><span class="line">        &quot;ip&quot;: null,</span><br><span class="line">        &quot;address&quot;: null,</span><br><span class="line">        &quot;clients&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;streamSettings&quot;: null</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后启动刚刚创建好的 docker 即可</p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>到这了只是在群辉中安装了 v2ray 客户端，并配置了服务器，还需要手动连接代理，在群辉中，你需要在 控制面板-网络-常规-代理服务器 中添加代理</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201501.png"></p>
<p>如果你的其他设备想要连接也需要相同的方式手动配置代理</p>
<p>在 win10 设置中，如下图所示位置，代理方式只支持 http 代理（这就是为什么上步中要把protocol改为http）地址为你群规的ip，端口就是上步中设置的端口，配置完之后保存即可</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201524.png"></p>
<p>手机中同理，在无线中配置代理</p>
<p>如果你想实现只需连接家里无线就可以直接实现科学上网，你需要在路由器中做一些配置，可以参考下文【待整理】</p>
]]></content>
      <categories>
        <category>NAS</category>
      </categories>
  </entry>
  <entry>
    <title>dux 主题自定义代码高亮-使用 highlight.js</title>
    <url>/338.html</url>
    <content><![CDATA[<blockquote>
<p>dux 主题默认使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jb2RlLXByZXR0aWZ5">Google Code Prettify</span> 实现代码高亮</p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>在 <span class="exturl" data-url="aHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcv">highlight 官网</span>下载 js 和 css 文件</p>
<p>可以使用官网提供的 <span class="exturl" data-url="aHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcvZG93bmxvYWQv">CDN 链接</span>，也可以根据需要定制自己需要的语言</p>
<p>选择自己喜欢的<span class="exturl" data-url="aHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcvc3RhdGljL2RlbW8v">主题</span>，在<span class="exturl" data-url="aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2hpZ2hsaWdodGpzL2Nkbi1yZWxlYXNlQDkuMTcuMS9idWlsZC9zdHlsZXMvJTdE">这里</span>进行下载</p>
<p>将 <code>highlight.main.js</code> 文件放到主题的 <code>/js/libs/</code> 文件夹中</p>
<h3 id="编辑主题文件"><a href="#编辑主题文件" class="headerlink" title="编辑主题文件"></a>编辑主题文件</h3><p>编辑 <code>/js/loader.js</code> 文件，将 <code>highlight.min.js</code> 引入</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">tbquire.config(&#123;</span><br><span class="line">  baseUrl: jsui.uri + &#x27;/js&#x27;,</span><br><span class="line">  urlArgs: &#x27;ver=&#x27; + jsui.ver,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    &#x27;swiper&#x27;        : &#x27;libs/swiper.min&#x27;,</span><br><span class="line">    &#x27;jquery.cookie&#x27; : &#x27;libs/jquery.cookie.min&#x27;,</span><br><span class="line">    &#x27;jsrender&#x27;      : &#x27;libs/jsrender.min&#x27;,</span><br><span class="line">    &#x27;router&#x27;        : &#x27;libs/router.min&#x27;,</span><br><span class="line">    &#x27;lazyload&#x27;      : &#x27;libs/lazyload.min&#x27;,</span><br><span class="line">    &#x27;prettyprint&#x27;   : &#x27;libs/prettyprint&#x27;,</span><br><span class="line"><span class="addition">+   &#x27;highlight&#x27;     : &#x27;libs/highlight.min&#x27;,</span></span><br><span class="line">    &#x27;ias&#x27;           : &#x27;libs/ias.min&#x27;,</span><br><span class="line">    &#x27;main&#x27;          : &#x27;main&#x27;,</span><br><span class="line">    &#x27;comment&#x27;       : &#x27;comment&#x27;,</span><br><span class="line">    &#x27;user&#x27;          : &#x27;user&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>编辑 <code>/js/main.js</code> 注释掉 prettyprint 部分</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * prettyprint</span><br><span class="line"> * <span class="comment">====================================================</span></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="deletion">-$(&#x27;pre&#x27;).each(function()&#123;</span></span><br><span class="line"><span class="deletion">-    if( !$(this).attr(&#x27;style&#x27;) ) $(this).addClass(&#x27;prettyprint&#x27;)</span></span><br><span class="line"><span class="deletion">-&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-if( $(&#x27;.prettyprint&#x27;).length )&#123;</span></span><br><span class="line"><span class="deletion">-    tbquire([&#x27;prettyprint&#x27;], function(prettyprint) &#123;</span></span><br><span class="line"><span class="deletion">-        prettyPrint()</span></span><br><span class="line"><span class="deletion">-    &#125;)</span></span><br><span class="line"><span class="deletion">-&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * highlight</span></span><br><span class="line"><span class="addition">+ * ====================================================</span></span><br><span class="line"><span class="addition">+*/</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+$(&#x27;pre code&#x27;).forEach((block) =&gt; &#123;</span></span><br><span class="line"><span class="addition">+  tbquire([&#x27;highlight&#x27;], function() &#123;</span></span><br><span class="line"><span class="addition">+    hljs.highlightBlock(block)</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br></pre></td></tr></table></figure>

<p>此时 highlight 脚本已经生效，接下来就是应用 highlight 样式</p>
<h3 id="应用-highlight-样式"><a href="#应用-highlight-样式" class="headerlink" title="应用 highlight 样式"></a>应用 highlight 样式</h3><p>你可以选择将下载好的 css 文件打开，将样式拷贝到 &#x2F;libs&#x2F;css&#x2F;main.css 文件中</p>
<p>也可以在 <code>wordpress后台-外观-自定义-添加额外css</code> 中为主题定义样式</p>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>dux主题修改记录</title>
    <url>/504.html</url>
    <content><![CDATA[<h2 id="给网站添加语言"><a href="#给网站添加语言" class="headerlink" title="给网站添加语言"></a>给网站添加语言</h2><p>打开 <code>theme/dux/header.php</code> 文件，修改如下内容</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line"><span class="deletion">-&lt;html&gt;</span></span><br><span class="line"><span class="addition">+&lt;html lang=&quot;zh&quot;&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="修改面包屑导航位置"><a href="#修改面包屑导航位置" class="headerlink" title="修改面包屑导航位置"></a>修改面包屑导航位置</h2><p>打开 <code>theme/dux/single.php</code> 文件，修改如下内容</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;?php get_header(); ?&gt;</span><br><span class="line"><span class="deletion">-&lt;?php if( _hui(&#x27;breadcrumbs_single_s&#x27;) )&#123; ?&gt;</span></span><br><span class="line"><span class="deletion">- &lt;div class=&quot;breadcrumbs&quot;&gt;</span></span><br><span class="line"><span class="deletion">-  &lt;div class=&quot;container&quot;&gt;&lt;?php echo hui_breadcrumbs() ?&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="deletion">- &lt;/div&gt;</span></span><br><span class="line"><span class="deletion">-&lt;?php &#125; ?&gt;</span></span><br><span class="line">&lt;section class=&quot;container&quot;&gt;</span><br><span class="line"><span class="addition">+ &lt;?php if( _hui(&#x27;breadcrumbs_single_s&#x27;) )&#123; ?&gt;</span></span><br><span class="line"><span class="addition">+  &lt;div class=&quot;breadcrumbs&quot;&gt;</span></span><br><span class="line"><span class="addition">+   &lt;div class=&quot;container&quot;&gt;&lt;?php echo hui_breadcrumbs() ?&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="addition">+  &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+ &lt;?php &#125; ?&gt;</span></span><br><span class="line"> &lt;div class=&quot;content-wrap&quot;&gt;</span><br><span class="line"> &lt;div class=&quot;content&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>添加自定义样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 面包屑导航 */</span></span><br><span class="line"><span class="selector-class">.breadcrumbs</span> &#123;</span><br><span class="line">	<span class="attribute">box-shadow</span>: none;</span><br><span class="line">	<span class="attribute">background</span>: none;</span><br><span class="line">	<span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>WP-China-Yes 解决 wordpress 插件无法更新问题</title>
    <url>/957.html</url>
    <content><![CDATA[<p>去年开始国内无法正常访问 <code>wordpress.org</code>, 一直显示 <code>429 Too Many Requests</code> 错误，所以在我们使用 wordpress 程序的时候会发现无法在线安装主题或者插件，甚至无法更新 WP 版本。</p>
<p>WordPress 官网打不开原因可以参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9zdGxvYy5jb20vdGhyZWFkLTU5NzY3OC01LTEuaHRtbA==">https://www.hostloc.com/thread-597678-5-1.html</span></p>
<p>情况大致是因为：</p>
<p><code>wordpress.org</code> 受到了中国大陆流量的攻击，导致 WordPress 的 CDN 提供商屏蔽了中国大陆的流量，大陆用户访问插件主题商城等服务时报 429 错误。</p>
<p>这里推荐一款插件：WP-China-Yes</p>
<p>此插件将全面替换 WordPress 访问官方服务的链接为高速稳定的中国大陆节点，以此加快站点更新版本、安装升级插件主题的速度，并彻底解决 429 报错问题。</p>
<p>插件是开源的</p>
<p>发布地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJhZGJveS5uZXQvYXJjaGl2ZXMvMzIwNC5odG1s">https://www.ibadboy.net/archives/3204.html</span><br>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dwLWNoaW5hLXllcy93cC1jaGluYS15ZXMvcmVsZWFzZXM=">https://github.com/wp-china-yes/wp-china-yes/releases</span></p>
<p>使用：</p>
<p>下载并安装插件后直接启用即可，无需设置，插件会自动接管所有 WP 访问境外服务器的流量。<br>插件不会更改你的 WordPress 程序，若不想使用大陆加速节点，直接停用插件即可。</p>
<p>常见问题：<br>插件&#x2F;主题更新缓慢甚至超时<br>这种情况在大型包更新的情况下偶尔会出现，原因是第一次访问资源，云存储中还未有相应的镜像，再试一次就会好了。</p>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
  </entry>
  <entry>
    <title>如何为 WordPress 文章中的链接自动添加 nofollow</title>
    <url>/554.html</url>
    <content><![CDATA[<p>在 SEO 的角度，我们不宜在网站中设置过多的外链，防止搜索引擎蜘蛛在爬虫你的网站时跳出到其他网站。因此，了解并为外链加上 nofollow 链接是非常有必要的（除非这些外链与你的网站有利益关系，比如是你的其他网站又或者是合作伙伴的网站）。</p>
<h3 id="什么是-nofollow-链接"><a href="#什么是-nofollow-链接" class="headerlink" title="什么是 nofollow 链接"></a>什么是 nofollow 链接</h3><p>Nofollow 链接是带有 rel &#x3D;”nofollow” HTML 标记的链接。 nofollow 标签可帮助搜索引擎了解要忽略目标链接，并且不会将网页（放置 nofollow 链接）的 PageRank 传递给此类链接。</p>
<p>以下链接类型应该设置为 nofollow 链接：返利链接，赞助商链接，广告链接，社交媒体链接，不可信&#x2F;不可靠网站内容链接</p>
<h3 id="如何建立-Nofollow-链接"><a href="#如何建立-Nofollow-链接" class="headerlink" title="如何建立 Nofollow 链接"></a>如何建立 Nofollow 链接</h3><p>将下面的代码添加到主题的 <code>functions.php</code> 文件即可：</p>
<p>如果不想直接修改 <code>functions.php</code> 文件，可以使用 <a href="https://wqdy.top/671.html">Code Snippets 插件</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章外部链接加上nofollow</span></span><br><span class="line"><span class="title function_ invoke__">add_filter</span>( <span class="string">&#x27;the_content&#x27;</span>, <span class="string">&#x27;nf_url_parse&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nf_url_parse</span>(<span class="params"> <span class="variable">$content</span> </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$regexp</span> = <span class="string">&quot;&lt;a\s[^&gt;]*href=(\&quot;??)([^\&quot; &gt;]*?)\\1[^&gt;]*&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/<span class="subst">$regexp</span>/siU&quot;</span>, <span class="variable">$content</span>, <span class="variable">$matches</span>, PREG_SET_ORDER)) &#123;</span><br><span class="line">    <span class="keyword">if</span>( !<span class="keyword">empty</span>(<span class="variable">$matches</span>) ) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$srcUrl</span> = <span class="title function_ invoke__">get_option</span>(<span class="string">&#x27;siteurl&#x27;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$matches</span>); <span class="variable">$i</span>++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$tag</span> = <span class="variable">$matches</span>[<span class="variable">$i</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$tag2</span> = <span class="variable">$matches</span>[<span class="variable">$i</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$matches</span>[<span class="variable">$i</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$noFollow</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// $pattern = &#x27;/target\s*=\s*&quot;\s*_blank\s*&quot;/&#x27;;</span></span><br><span class="line">        <span class="comment">// preg_match($pattern, $tag2, $match, PREG_OFFSET_CAPTURE);</span></span><br><span class="line">        <span class="comment">// if( count($match) &lt; 1 )</span></span><br><span class="line">        <span class="comment">//   $noFollow .= &#x27; target=&quot;_blank&quot; &#x27;;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$pattern</span> = <span class="string">&#x27;/rel\s*=\s*&quot;\s*[n|d]ofollow\s*&quot;/&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$tag2</span>, <span class="variable">$match</span>, PREG_OFFSET_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_ invoke__">count</span>(<span class="variable">$match</span>) &lt; <span class="number">1</span> )</span><br><span class="line">          <span class="variable">$noFollow</span> .= <span class="string">&#x27; rel=&quot;nofollow&quot; &#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$pos</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$url</span>,<span class="variable">$srcUrl</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pos</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">          <span class="variable">$tag</span> = <span class="title function_ invoke__">rtrim</span> (<span class="variable">$tag</span>,<span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">          <span class="variable">$tag</span> .= <span class="variable">$noFollow</span>.<span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">          <span class="variable">$content</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$tag2</span>,<span class="variable">$tag</span>,<span class="variable">$content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$content</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;]]&gt;&#x27;</span>, <span class="string">&#x27;]]&gt;&#x27;</span>, <span class="variable">$content</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="检查-nofollow-链接是否生效"><a href="#检查-nofollow-链接是否生效" class="headerlink" title="检查 nofollow 链接是否生效"></a>检查 nofollow 链接是否生效</h3><p><strong>使用浏览器的 <code>检查</code> 功能查看 nofollow 链接</strong></p>
<p>使用浏览器打开页面，移动鼠标光标至你想要检查的链接上方。</p>
<p>右击鼠标按钮，选择 <code>检查</code> 选项 （以 Chrome 为例，不同浏览器选项叫法不太一样）</p>
<p>代码查看窗口将在浏览器的底部&#x2F;右侧打开。你可以通过查看 HTML 代码查看链接是否添加了 rel&#x3D;”nofollow”。</p>
<p><strong>使用 Chrome 扩展组件（插件）检查页面 nofollow 链接</strong></p>
<p>下载名为<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvbm9mb2xsb3cvZGZvZ2lkZ2hhaWdvb21qZGVhY25kYWZhcGRpam1paWQ/aGw9ZW4=">NoFollow</span>的 Chrome 扩展组件，安装该插件后重新加载页面，该网页上的所有 nofollow 链接都将会高亮突出显示。</p>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
  </entry>
  <entry>
    <title>使用代码方式显示 WordPress 文章最后修改时间</title>
    <url>/690.html</url>
    <content><![CDATA[<p>对于偏技术性的文章，用户更在意文章的更新时间而非发表时间</p>
<p>将如下代码添加到主题函数 function.php 文件中，如果你不会的话，推荐使用这个插件：<a href="https://wqdy.top/671.html">Code Snippets</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wp_last_updated_date</span>(<span class="params"> <span class="variable">$content</span> </span>) </span>&#123;</span><br><span class="line">  <span class="variable">$time</span> = <span class="title function_ invoke__">get_the_time</span>(<span class="string">&#x27;U&#x27;</span>);</span><br><span class="line">  <span class="variable">$modified_time</span> = <span class="title function_ invoke__">get_the_modified_time</span>(<span class="string">&#x27;U&#x27;</span>);</span><br><span class="line">  <span class="variable">$custom_content</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$modified_time</span> &gt;= <span class="variable">$time</span> + <span class="number">86400</span>) &#123;</span><br><span class="line">    <span class="variable">$updated_time</span> = <span class="title function_ invoke__">get_the_modified_time</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line">    <span class="variable">$custom_content</span> .= <span class="string">&#x27;&lt;p class=&quot;last-updated&quot; style=&quot;color: #999;font-size: 12px;&quot;&gt;文章最后更新于&#x27;</span>. <span class="variable">$updated_time</span> .<span class="string">&#x27;，如果失效请留言&lt;/p&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$custom_content</span> .= <span class="variable">$content</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$custom_content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">add_filter</span>( <span class="string">&#x27;the_content&#x27;</span>, <span class="string">&#x27;wp_last_updated_date&#x27;</span> );</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
  </entry>
  <entry>
    <title>wordpress 修改文章id</title>
    <url>/1737.html</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> wp_posts <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">430</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">404</span>;</span><br><span class="line"><span class="keyword">update</span> wp_term_relationships <span class="keyword">set</span> object_id <span class="operator">=</span> <span class="number">430</span> <span class="keyword">where</span> object_id <span class="operator">=</span> <span class="number">404</span>;</span><br><span class="line"><span class="keyword">update</span> wp_postmeta <span class="keyword">set</span> post_id <span class="operator">=</span> <span class="number">430</span> <span class="keyword">where</span> post_id <span class="operator">=</span> <span class="number">404</span>;</span><br><span class="line"><span class="keyword">update</span> wp_comments <span class="keyword">set</span> comment_post_ID <span class="operator">=</span> <span class="number">430</span> <span class="keyword">where</span> comment_post_ID <span class="operator">=</span> <span class="number">404</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 博客绑定多个域名，并实现多个域名独立访问</title>
    <url>/1331.html</url>
    <content><![CDATA[<p>WordPress 博客默认是不能实现多个域名独立访问的，即使我们绑定了多个域名，访问时也会自动跳转到安装站点时默认的域名</p>
<p>我们只需修改站点根目录下的 <code>wp-config.php</code> 文件，添加如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;WP_SITEURL&#x27;</span>, <span class="string">&#x27;https://&#x27;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;WP_HOME&#x27;</span>, <span class="string">&#x27;https://&#x27;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>即可</p>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress 插件 Code Snippets - 无需修改 functions.php 文件向站点添加自定义代码</title>
    <url>/671.html</url>
    <content><![CDATA[<h3 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h3><p>Code Snippets 是一款可以简单、干净、安全添加 php 代码到你网站的插件，就跟直接写入 functions.php 文件里面的效果一样。</p>
<blockquote>
<p>使用 Code Snippets 添加代码还有一个优点就是添加的代码不会因为你主题文件升级而丢失，而直接写入 functions.php 文件里面升级会被覆盖，还需要手动备份一次。</p>
</blockquote>
<p>直接在后台搜索该插件安装即可</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="添加-php-代码"><a href="#添加-php-代码" class="headerlink" title="添加 php 代码"></a>添加 php 代码</h4><p>直接新建一个 snippets 将 php 代码站填进去即可</p>
<h4 id="添加-css-代码"><a href="#添加-css-代码" class="headerlink" title="添加 css 代码"></a>添加 css 代码</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">add_action</span>( <span class="string">&#x27;wp_head&#x27;</span>, function () &#123; <span class="meta">?&gt;</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* write your CSS code here */</span></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> &#125; );</span><br></pre></td></tr></table></figure>

<h4 id="添加-js-代码"><a href="#添加-js-代码" class="headerlink" title="添加 js 代码"></a>添加 js 代码</h4><p>默认示例添加 js 代码使用的是 <code>wp_head</code> 函数，这里推荐使用 <code>wp_footer</code>，你可以根据 js 作用自行选择</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在底部添加js代码，</span></span><br><span class="line"><span class="title function_ invoke__">add_action</span>( <span class="string">&#x27;wp_footer&#x27;</span>, function () &#123; <span class="meta">?&gt;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* write your JavaScript code here */</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> &#125; );</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
  </entry>
  <entry>
    <title>wordpress 站点更换域名</title>
    <url>/386.html</url>
    <content><![CDATA[<p>假设旧域名是a.com，新域名为b.com，修改数据库 sql 如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> wp_options <span class="keyword">SET</span> option_value <span class="operator">=</span> REPLACE(option_value, <span class="string">&#x27;http://a.com&#x27;</span>, <span class="string">&#x27;http://b.com&#x27;</span>) <span class="keyword">WHERE</span> option_name <span class="operator">=</span> <span class="string">&#x27;home&#x27;</span> <span class="keyword">OR</span> option_name <span class="operator">=</span> <span class="string">&#x27;siteurl&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> wp_posts <span class="keyword">SET</span> post_content <span class="operator">=</span> REPLACE (post_content, <span class="string">&#x27;http://a.com&#x27;</span>, <span class="string">&#x27;http://b.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> wp_postmeta <span class="keyword">SET</span> meta_value <span class="operator">=</span> REPLACE (meta_value, <span class="string">&#x27;http://a.com&#x27;</span>,<span class="string">&#x27;http://b.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> wp_comments <span class="keyword">SET</span> comment_content <span class="operator">=</span> REPLACE (comment_content, <span class="string">&#x27;http://a.com&#x27;</span>, <span class="string">&#x27;http://b.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> wp_comments <span class="keyword">SET</span> comment_author_url <span class="operator">=</span> REPLACE (comment_author_url, <span class="string">&#x27;http://a.com&#x27;</span>, <span class="string">&#x27;http://b.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> wp_posts <span class="keyword">SET</span> guid <span class="operator">=</span> REPLACE (guid, <span class="string">&#x27;http://a.com&#x27;</span>, <span class="string">&#x27;http://b.com&#x27;</span>) <span class="keyword">WHERE</span> post_type <span class="operator">=</span> <span class="string">&#x27;attachment&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 WordPress &#39;Briefly unavailable for scheduled maintenance. Check back in a minute.&#39;</title>
    <url>/951.html</url>
    <content><![CDATA[<p>WordPress 在升级程序、主题、插件时，都会先切换到维护模式，也就是显示 ‘Briefly unavailable for scheduled maintenance. Check back in a minute’，如果升级顺利，也就几秒左右就恢复正常；但是如果由于网速不佳等原因导致升级中断，WordPress 就会一直停留在维护模式，不论前台还是后台。</p>
<p>如何解决这个问题呢？</p>
<p>马上通过 FTP 登录你的网站，删除 WordPress 根目录下的 <code>.maintenance</code> ，刷新网页即可。</p>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress简单实现隐藏外链，外链通过go界面进行跳转</title>
    <url>/1833.html</url>
    <content><![CDATA[<p>网站外链跳转时通过 go 界面进行对 seo 比较友好，既美观又可以避免权重的流失。</p>
<p>简单的实现</p>
<ol>
<li>在 wordpress 的根目录下，新建一个 go.php 文件，在 go.php 里面输入以下代码</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$t_url</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/^url=(.*)$/i&#x27;</span>,<span class="string">&#x27;$1&#x27;</span>,<span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$t_url</span>)) &#123;</span><br><span class="line">  <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(http|https):\/\//&#x27;</span>,<span class="variable">$t_url</span>,<span class="variable">$matches</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$matches</span>)&#123;</span><br><span class="line">    <span class="variable">$url</span>=<span class="variable">$t_url</span>;</span><br><span class="line">    <span class="variable">$title</span>=<span class="string">&#x27;页面正在安全跳转中,请稍候&#x27;</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\./i&#x27;</span>,<span class="variable">$t_url</span>,<span class="variable">$matche</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$matche</span>)&#123;</span><br><span class="line">      <span class="variable">$url</span>=<span class="string">&#x27;http://&#x27;</span>.<span class="variable">$t_url</span>;</span><br><span class="line">      <span class="variable">$title</span>=<span class="string">&#x27;页面正在安全跳转中,请稍候&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable">$url</span>=<span class="string">&#x27;//wqdy.top/&#x27;</span>;</span><br><span class="line">      <span class="variable">$title</span>=<span class="string">&#x27;参数错误，正在返回首页&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable">$title</span>=<span class="string">&#x27;参数缺失，正在返回首页&#x27;</span>;</span><br><span class="line">  <span class="variable">$url</span>=<span class="string">&#x27;//wqdy.top/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;1;url=&#x27;&lt;?php echo <span class="subst">$url</span>;?&gt;&#x27;;&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$title</span>;<span class="meta">?&gt;</span>&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;background:<span class="comment">#000&#125;</span></span><br><span class="line">.loading &#123;</span><br><span class="line">	-webkit-animation:fadein <span class="number">2</span>s;</span><br><span class="line">	-moz-animation:fadein <span class="number">2</span>s;</span><br><span class="line">	-o-animation:fadein <span class="number">2</span>s;</span><br><span class="line">	animation:fadein <span class="number">2</span>s&#125;</span><br><span class="line">@-moz-keyframes fadein &#123;<span class="keyword">from</span> &#123;opacity:<span class="number">0</span>&#125;</span><br><span class="line">to &#123;opacity:<span class="number">1</span>&#125;&#125;</span><br><span class="line">@-webkit-keyframes fadein &#123;<span class="keyword">from</span> &#123;opacity:<span class="number">0</span>&#125;</span><br><span class="line">to &#123;opacity:<span class="number">1</span>&#125;&#125;</span><br><span class="line">@-o-keyframes fadein &#123;<span class="keyword">from</span> &#123;opacity:<span class="number">0</span>&#125;</span><br><span class="line">to &#123;opacity:<span class="number">1</span>&#125;&#125;</span><br><span class="line">@keyframes fadein &#123;<span class="keyword">from</span> &#123;opacity:<span class="number">0</span>&#125;</span><br><span class="line">to &#123;opacity:<span class="number">1</span>&#125;&#125;</span><br><span class="line">.spinner-wrapper &#123;</span><br><span class="line">	position:absolute;</span><br><span class="line">	top:<span class="number">0</span>;</span><br><span class="line">	left:<span class="number">0</span>;</span><br><span class="line">	z-index:<span class="number">300</span>;</span><br><span class="line">	height:<span class="number">100</span>%;</span><br><span class="line">	min-width:<span class="number">100</span>%;</span><br><span class="line">	min-height:<span class="number">100</span>%;</span><br><span class="line">	background:<span class="comment">#3498db&#125;</span></span><br><span class="line">.spinner-text &#123;</span><br><span class="line">	position:absolute;</span><br><span class="line">	top:<span class="number">50</span>%;</span><br><span class="line">	left:<span class="number">50</span>%;</span><br><span class="line">	margin-left:-<span class="number">200</span>px;</span><br><span class="line">	margin-top: <span class="number">2</span>px;</span><br><span class="line">	color:<span class="comment">#fff;</span></span><br><span class="line">	letter-spacing:<span class="number">1</span>px;</span><br><span class="line">	font-weight:<span class="number">700</span>;</span><br><span class="line">	font-size:<span class="number">36</span>px;</span><br><span class="line">	font-family:Arial&#125;</span><br><span class="line">.spinner &#123;</span><br><span class="line">	position:absolute;</span><br><span class="line">	top:<span class="number">50</span>%;</span><br><span class="line">	left:<span class="number">50</span>%;</span><br><span class="line">	display:block;</span><br><span class="line">	margin-left:-<span class="number">270</span>px;</span><br><span class="line">	width:<span class="number">1</span>px;</span><br><span class="line">	height:<span class="number">1</span>px;</span><br><span class="line">	border:<span class="number">25</span>px solid <span class="title function_ invoke__">rgba</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">0.2</span>);</span><br><span class="line">	-webkit-border-radius:<span class="number">50</span>px;</span><br><span class="line">	-moz-border-radius:<span class="number">50</span>px;</span><br><span class="line">	border-radius:<span class="number">50</span>px;</span><br><span class="line">	border-left-color:transparent;</span><br><span class="line">	border-right-color:transparent;</span><br><span class="line">	-webkit-animation:spin <span class="number">1.5</span>s infinite;</span><br><span class="line">	-moz-animation:spin <span class="number">1.5</span>s infinite;</span><br><span class="line">	animation:spin <span class="number">1.5</span>s infinite&#125;</span><br><span class="line">@-webkit-keyframes spin &#123;<span class="number">0</span>%,<span class="number">100</span>% &#123;-webkit-transform:<span class="title function_ invoke__">rotate</span>(<span class="number">0</span>deg) <span class="title function_ invoke__">scale</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="number">50</span>% &#123;-webkit-transform:<span class="title function_ invoke__">rotate</span>(<span class="number">720</span>deg) <span class="title function_ invoke__">scale</span>(<span class="number">0.6</span>)&#125;&#125;</span><br><span class="line">@-moz-keyframes spin &#123;<span class="number">0</span>%,<span class="number">100</span>% &#123;-moz-transform:<span class="title function_ invoke__">rotate</span>(<span class="number">0</span>deg) <span class="title function_ invoke__">scale</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="number">50</span>% &#123;-moz-transform:<span class="title function_ invoke__">rotate</span>(<span class="number">720</span>deg) <span class="title function_ invoke__">scale</span>(<span class="number">0.6</span>)&#125;&#125;</span><br><span class="line">@-o-keyframes spin &#123;<span class="number">0</span>%,<span class="number">100</span>% &#123;-o-transform:<span class="title function_ invoke__">rotate</span>(<span class="number">0</span>deg) <span class="title function_ invoke__">scale</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="number">50</span>% &#123;-o-transform:<span class="title function_ invoke__">rotate</span>(<span class="number">720</span>deg) <span class="title function_ invoke__">scale</span>(<span class="number">0.6</span>)&#125;&#125;</span><br><span class="line">@keyframes spin &#123;<span class="number">0</span>%,<span class="number">100</span>% &#123;transform:<span class="title function_ invoke__">rotate</span>(<span class="number">0</span>deg) <span class="title function_ invoke__">scale</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="number">50</span>% &#123;transform:<span class="title function_ invoke__">rotate</span>(<span class="number">720</span>deg) <span class="title function_ invoke__">scale</span>(<span class="number">0.6</span>)&#125;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">loading</span>&quot;&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">spinner</span>-<span class="title">wrapper</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">spinner</span>-<span class="title">text</span>&quot;&gt;页面正在安全跳转中,请稍候&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">spinner</span>&quot;&gt;&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>则外链跳转形式为： <code>&#123;本站地址&#125;/go.php?&#123;外链地址&#125;</code></p>
<ol start="2">
<li>给外部链接加上 go 跳转，在主题目录下的 functions.php 中添加如下代码</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">add_filter</span>(<span class="string">&#x27;the_content&#x27;</span>,<span class="string">&#x27;the_content_nofollow&#x27;</span>,<span class="number">999</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">the_content_nofollow</span>(<span class="params"><span class="variable">$content</span></span>) </span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/&lt;a(.*?)href=&quot;(.*?)&quot;(.*?)&gt;/&#x27;</span>,<span class="variable">$content</span>,<span class="variable">$matches</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$matches</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$matches</span>[<span class="number">2</span>] <span class="keyword">as</span> <span class="variable">$val</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>,<span class="string">&#x27;://&#x27;</span>)!==<span class="literal">false</span> &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>,<span class="title function_ invoke__">home_url</span>())===<span class="literal">false</span> &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.(jpg|jepg|png|ico|bmp|gif|tiff)/i&#x27;</span>,<span class="variable">$val</span>))&#123;</span><br><span class="line">        <span class="variable">$content</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href=\&quot;<span class="subst">$val</span>\&quot;&quot;</span>, <span class="string">&quot;href=\&quot;&quot;</span>.<span class="title function_ invoke__">home_url</span>().<span class="string">&quot;/go.php?url=<span class="subst">$val</span>\&quot; &quot;</span>,<span class="variable">$content</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>AutoRclone 配合 Gclone 在 Google Drive 账号之间、谷歌团队盘之间快速拷贝、传输学习资料</title>
    <url>/1472.html</url>
    <content><![CDATA[<h3 id="将实现的功能"><a href="#将实现的功能" class="headerlink" title="将实现的功能"></a>将实现的功能</h3><p>从本地服务器传输到 Google Team Drive<br>从他人分享的链接拷贝到 Google Team Drive<br>从一个 Google Team Drive 传输到另一个 Google Team Drive<br>以上都不受 750G 流量限制</p>
<p>如果没有团队盘，可以参考<a href="https://wqdy.top/1207.html">这里</a>自助申请</p>
<p>本文以 ubuntu 为例，当然直接在本地 Windows 上也是可以的</p>
<h3 id="安装-Python3"><a href="#安装-Python3" class="headerlink" title="安装 Python3"></a>安装 Python3</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install git python3 python3-pip -y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若出现如下问题</p>
<p>Command “python setup.py egg_info” failed with error code 1 in &#x2F;tmp&#x2F;pip-build-bx50pf21&#x2F;progress&#x2F;<br>You are using pip version 8.1.1, however version 20.1.1 is available.<br>You should consider upgrading via the ‘pip install –upgrade pip’ command.</p>
<p>解决：更新 pip3</p>
<p><code>pip3 install --upgrade pip</code></p>
</blockquote>
<h3 id="安装-AutoRclone"><a href="#安装-AutoRclone" class="headerlink" title="安装 AutoRclone"></a>安装 AutoRclone</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xyou365/AutoRclone &amp;&amp; <span class="built_in">cd</span> AutoRclone &amp;&amp; pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h3 id="生成-Service-Accounts"><a href="#生成-Service-Accounts" class="headerlink" title="生成 Service Accounts"></a>生成 Service Accounts</h3><p>打开链接：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZHJpdmUvYXBpL3YzL3F1aWNrc3RhcnQvcHl0aG9u">https://developers.google.com/drive/api/v3/quickstart/python</span></p>
<p>登陆 google 账号，点击 <code>Enable the Drive API</code>，在弹出的页面中勾选 yes ，点击 NEXT，</p>
<p>稍等片刻，继续点击 CREATE，出现如下页面表示成功</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201708.png"></p>
<p>点击 <code>DOWNLOAD CLIENT CONFIGUTATION</code> 按钮，下载 <code>credentials.json</code> 文件，然后将下载的 <code>credentials.json</code> 放到 AutoRclone 目录下</p>
<p>如果你用的是 Xshell 可以使用 rz 来上传文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lrzsz -y</span><br><span class="line">rz <span class="comment"># 回车会打开窗口，选择文件上传即可</span></span><br><span class="line">rz 文件 <span class="comment"># 下载文件</span></span><br></pre></td></tr></table></figure>

<p>之后分三种情况</p>
<p>1、之前没有创建过项目</p>
<p>直接运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 gen_sa_accounts.py --quick-setup 5</span><br></pre></td></tr></table></figure>

<p>以上命令含义：创建 6 个项目（项目0到项目5），开启相关的服务，创建 600 个 service accounts，将 600 个 service accounts 的授权文件下载到 accounts 文件夹下面</p>
<p>2、已有 N 个项目，需要创建新的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 gen_sa_accounts.py --quick-setup 2 --new-only</span><br></pre></td></tr></table></figure>

<p>以上命令含义：额外创建 2 个项目（项目 N+1 到项目 N+2），开启相关的服务，创建 200 个 service accounts（2 个项目，每个项目 100 个），将 200 个 service accounts 的授权文件下载到 accounts 文件夹下面</p>
<p>3、使用已有项目，不创建新的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 gen_sa_accounts.py --quick-setup -1</span><br></pre></td></tr></table></figure>

<p>注意以上命令会覆盖掉已有的 service accounts</p>
<p>我这里是第一种情况，运行 <code>python3 gen_sa_accounts.py --quick-setup 1</code>，创建两个项目</p>
<blockquote>
<p>出现如下报错</p>
<p><code>/usr/local/lib/python3.5/dist-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.13.1) or chardet (3.0.4) doesn&#39;t match a supported version!</code></p>
<p>解决方法，安装 requests 模块</p>
<p><code>sudo pip3 install requests</code></p>
</blockquote>
<p>出现如下图</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201740.png"></p>
<p>打开链接，并登陆你的 Google 账号（提示不安全，不用管，一路允许）</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201805.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201823.png"></p>
<p>得到授权代码</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201844.png"></p>
<p>复制生成的 code 到终端，回车</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201900.png"></p>
<p>如上图所示，显示<code>Press Enter to retry</code>, 原因是谷歌账号未开启 Service Usage API，复制提供的链接地址，到浏览器打开，开启 Service Usage API 服务</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102201955.png"></p>
<p>启用成功后回车，等待完成</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202016.png"></p>
<p>接着，你就会发现你的 AutoRclone 文件下面的 accounts 文件夹下会有很多的 json 文件。</p>
<h3 id="将-service-accounts-加入-Google-Groups"><a href="#将-service-accounts-加入-Google-Groups" class="headerlink" title="将 service accounts 加入 Google Groups"></a>将 service accounts 加入 Google Groups</h3><blockquote>
<p>可以直接将 service accounts 加入到Team Drive<br><code>python3 add_to_team_drive.py -d SharedTeamDriveSrcID</code><br>为了便于管理 service accounts，我们创建 Google Group，将 Google Group 邮箱添加到 Team Drive</p>
</blockquote>
<p>我们这一步需要将刚刚生成的数以百计的 Service Accounts 添加到 Google Group 中</p>
<h4 id="创建-Google-Group"><a href="#创建-Google-Group" class="headerlink" title="创建 Google Group"></a>创建 Google Group</h4><p>打开链接：<span class="exturl" data-url="aHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS8=">https://groups.google.com/</span> ，创建群组：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202037.png"></p>
<h4 id="批量提取-Service-Accounts"><a href="#批量提取-Service-Accounts" class="headerlink" title="批量提取 Service Accounts"></a>批量提取 Service Accounts</h4><blockquote>
<p>如果是 GSuite Admin 账号，可以使用如下方式直接添加进群组</p>
<ol>
<li>将生成的json文件保存到 credentials 文件夹中</li>
<li>在管理控制台中为您的组织创建组。创建群组后，您将拥有一个例如的地址<span class="exturl" data-url="bWFpbHRvOiYjMTE1OyYjOTc7JiM2NDsmI3g3OTsmI3g2ZjsmI3g3NTsmIzExNDsmIzEwMDsmIzExMTsmIzEwOTsmIzk3OyYjeDY5OyYjeDZlOyYjNDY7JiM5OTsmI3g2ZjsmIzEwOTs=">&#115;&#97;&#64;&#x79;&#x6f;&#x75;&#114;&#100;&#111;&#109;&#97;&#x69;&#x6e;&#46;&#99;&#x6f;&#109;</span></li>
<li>运行 <code>python3 add_to_google_group.py -g sa@yourdomain.com</code></li>
</ol>
</blockquote>
<p>对于普通账号，生成 Service Accounts 后，直接运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/AutoRclone/accounts/*.json | grep <span class="string">&quot;client_email&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>| <span class="built_in">tr</span> -d <span class="string">&#x27;,&quot;&#x27;</span> | sed <span class="string">&#x27;N;N;N;N;N;N;N;N;N;/^$/d;G&#x27;</span> &gt; ~/email.txt</span><br></pre></td></tr></table></figure>

<p>运行后，会自动提取 Service Accounts 邮箱账户，并保存到 ~&#x2F;email.txt 文件中，同时还很贴心地每 10 个邮箱账户就隔开一行，方便复制。</p>
<h4 id="添加到-Google-Group"><a href="#添加到-Google-Group" class="headerlink" title="添加到 Google Group"></a>添加到 Google Group</h4><p>将 email.txt 文件下载到本地</p>
<p>回到 Group 页面，右上角 管理成员：</p>
<p>左侧 直接添加成员，将 Service Accounts 邮箱复制粘贴 10 个，点击 添加：<br>(注意每次只能添加 10 个，每 24 小时只能添加 100 个)</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202108.png"></p>
<p>重复以上步骤，将 100 个邮箱添加进去</p>
<h4 id="将-Google-Group-邮箱添加到-Team-Drive"><a href="#将-Google-Group-邮箱添加到-Team-Drive" class="headerlink" title="将 Google Group 邮箱添加到 Team Drive"></a>将 Google Group 邮箱添加到 Team Drive</h4><p>点击关于，找到群组邮箱：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202125.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202138.png"></p>
<p>复制下来，添加到 Google Team Drive 成员中</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202159.png"></p>
<p>添加完成后，基本就完成所有设置了</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>首先将 service accounts 加入到目标 Team Drive</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/AutoRclone</span><br><span class="line"><span class="comment"># 将以下 SharedTeamDriveDstID 替换为你团队盘 ID</span></span><br><span class="line">python3 add_to_team_drive.py -d SharedTeamDriveDstID</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看团队盘 ID：</p>
<p>打开你的团队盘，查看浏览器上的链接，比如：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL3UvMi9mb2xkZXJzLzBBSUNZaDRYN0JralZVazlQVkE=">https://drive.google.com/drive/u/2/folders/0AICYh4X7BkjVUk9PVA</span></p>
<p>以上链接中，0AICYh4X7BkjVUk9PVA 就是 ID</p>
</blockquote>
<p>回车后，再次回车：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102202221.png"></p>
<h4 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h4><p>先安装 rclone</p>
<p>rclone 安装教程可以参考 <a href="https://wqdy.top/1243.html">https://wqdy.top/1243.html</a></p>
<ul>
<li>Linux 环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure>

<ul>
<li>Windows 环境</li>
</ul>
<p>直接去 <span class="exturl" data-url="aHR0cHM6Ly9yY2xvbmUub3JnLw==">rclone 官网</span>下载 rclone，然后最好将 rclone.exe 所在目录加入系统环境变量</p>
<p>如若将共享链接（<span class="exturl" data-url="aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL3UvMi9mb2xkZXJzLzEwek92SWY4eUJtSXVaZ0JmQzNyY0RLV0hJbE9EWmpYRiVFRiVCQyU4OSVFOSU4NyU4QyVFNyU5QSU4NCVFNiU5NiU4NyVFNCVCQiVCNiVFNCVCRiU5RCVFNSVBRCU5OCVFNSU4OCVCMCVFOCU4NyVBQSVFNSVCNyVCMSVFNyU5QSU4NA==">https://drive.google.com/drive/u/2/folders/10zOvIf8yBmIuZgBfC3rcDKWHIlODZjXF）里的文件保存到自己的</span> Team Drive 中的 myfolder 文件夹中</p>
<p>则命令为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 rclone_sa_magic.py -s 10zOvIf8yBmIuZgBfC3rcDKWHIlODZjXF -d 0AICYh4X7BkjVUk9PVA -dp myfolder -b 1 -e 600</span><br></pre></td></tr></table></figure>

<p>详细的使用命令可以看这里：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3h5b3UzNjUvQXV0b1JjbG9uZSNzdGVwLTUtc3RhcnQteW91ci10YXNr">https://github.com/xyou365/AutoRclone#step-5-start-your-task</span></p>
<h4 id="配合-Gclone-使用"><a href="#配合-Gclone-使用" class="headerlink" title="配合 Gclone 使用"></a>配合 Gclone 使用</h4><p>gclone 其实就是 rclone 的加强版，为 Google Drive 操作增加自动切换账户和命令行根目录 id 操作支持，其他功能与原版 rclone 相同</p>
<h5 id="安装-gclone"><a href="#安装-gclone" class="headerlink" title="安装 gclone"></a>安装 gclone</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(wget -qO- https://git.io/gclone.sh)</span><br></pre></td></tr></table></figure>

<p>你可以选择将 gclone 重命名为 rclone，方便使用：cp &#x2F;usr&#x2F;bin&#x2F;gclone &#x2F;usr&#x2F;bin&#x2F;rclone</p>
<p>以下内容都是以没有重命名为例，如果你进行了重命名，将以下命令中出现的 gclone 改为 rclone</p>
<h5 id="配置-gclone"><a href="#配置-gclone" class="headerlink" title="配置 gclone"></a>配置 gclone</h5><p>首先需要先记下 &#x2F;root&#x2F;AutoRclone&#x2F;accounts&#x2F; 中的其中一个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /root/AutoRclone/accounts</span><br></pre></td></tr></table></figure>

<p>回车后会显示很多 .json 后缀的文件名，复制其中一个文件名，记下文件路径，比如：</p>
<p><code>/root/AutoRclone/accounts/0120894537c1c99c605fe240141af661b44d0c22.json</code></p>
<p>然后进行 gclone 的配置</p>
<p>gclone 在使用上跟 rclone 是一致的，配置过程也几乎一样，可以参考 <span class="exturl" data-url="aHR0cHM6Ly9yY2xvbmUub3JnL2RyaXZlLw==">https://rclone.org/drive/</span></p>
<p>运行以下命令进行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gclone config</span><br></pre></td></tr></table></figure>

<p>配置过程中，需要注意的是，当出现 service_account_file 选项时，填入以上记下的 .json 文件</p>
<p>当出现 service_account_file_path 时，填入 &#x2F;root&#x2F;AutoRclone&#x2F;accounts&#x2F;</p>
<p>记住配置的 name：gdrive</p>
<p>之后就配置完成了</p>
<h5 id="使用-gclone-复制文件"><a href="#使用-gclone-复制文件" class="headerlink" title="使用 gclone 复制文件"></a>使用 gclone 复制文件</h5><p>作者 Github 提供的文档：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvbndhL2djbG9uZS9ibG9iL21hc3Rlci9SRUFETUVfemgubWQ=">https://github.com/donwa/gclone/blob/master/README_zh.md</span></p>
<p>复制共享链接文件到团队盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gclone copy gdrive:&#123;目录<span class="built_in">id</span>&#125; gdrive:&#123;目录<span class="built_in">id</span>&#125; --drive-server-side-across-configs -v</span><br></pre></td></tr></table></figure>

<p>以上命令中:</p>
<p>gdrive 是你配置 gclone 时设置的 name</p>
<p>目录 id 是共享链接中链接中的最后部分，比如：<span class="exturl" data-url="aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL3UvMi9mb2xkZXJzLzFnVkFQMjJVZzVmejBwU2U0VEhaVjEwMDc4VWJOYVRvYiVFRiVCQyU4QzFnVkFQMjJVZzVmejBwU2U0VEhaVjEwMDc4VWJOYVRvYg==">https://drive.google.com/drive/u/2/folders/1gVAP22Ug5fz0pSe4THZV10078UbNaTob，1gVAP22Ug5fz0pSe4THZV10078UbNaTob</span> 就是目录 id</p>
<p>–drive-server-side-across-configs 用于谷歌盘之间传输时使用，不走服务器流量，传输速度也更快</p>
<p>-v 用于查看传输过程的 ERROR，NOTICE 和 INFO 消息</p>
<blockquote>
<p> 日志级别<br>-q - 仅生成 ERROR 消息。<br>-v - 生成 ERROR，NOTICE 和 INFO 消息，推荐此项。<br>-vv - 生成 ERROR，NOTICE，INFO和 DEBUG 消息。<br>–log-level LEVEL - 标志控制日志级别。</p>
<p>输出日志到文件<br>使用 –log-file&#x3D;FILE 将 Error，Info 和 Debug 消息以及标准错误重定向到 FILE，这里的 FILE 是你指定的日志文件路径。</p>
</blockquote>
<p>命令使用示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gclone copy gdrive:&#123;18SukoSc0ni0nyU779w82eoo_deLKfbZR&#125; gdrive:&#123;1j4z3UH1thdNB8dOhTUgb0uRHxQaDYL1T&#125; --drive-server-side-across-configs -v</span><br></pre></td></tr></table></figure>

<p>目标位置除了使用 id 外，也可以直接使用目录，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gclone copy gdrive:&#123;18SukoSc0ni0nyU779w82eoo_deLKfbZR&#125; gdrive:movie/电影合集 --drive-server-side-across-configs -v</span><br></pre></td></tr></table></figure>

<p>传输本地文件到团队盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gclone copy /root/Downloads/xxx gdrive:movie/电影合集 -v</span><br></pre></td></tr></table></figure>

<h3 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h3><ul>
<li>报错 <code>Failed to copy: failed to make directory: googleapi: Error 404: File not found: 1n-Ya6sagIrGskenJIzWcmKE1ATjxeqYx., notFound</code></li>
</ul>
<p>有可能是源日流量 10T 被榨干了</p>
<ul>
<li>报错 <code>googleapi: Error 403: The file limit for this shared drive has been exceeded., teamDriveFileLimitExceeded</code></li>
</ul>
<p>团队盘有限制 40w 文件&#x2F;文件夹，回收站中的文件也计算在 40w 之内，可以新增团队盘，或删除小文件并删除回收站</p>
<p>谷歌云端硬盘 API 不公开清空回收站的方法，但它有一个删除方法可以永久删除文件，而不经过回收站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://developers.google.com/drive/v2/reference/files/delete</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Google Drive</tag>
        <tag>AutoRclone</tag>
        <tag>Gclone</tag>
      </tags>
  </entry>
  <entry>
    <title>GoIndex 部署 CloudFlare Workers 实现无需科学上网访问 Google Drive 文件</title>
    <url>/1223.html</url>
    <content><![CDATA[<p>04&#x2F;27 更新 解决 workers 无法正常访问</p>
<p>作者删除了 github 仓库， GoIndex 依赖的 js 资源加载失败，导致网页打开是一片空白</p>
<p>解决方法；</p>
<p>首先到 GitHub Fork 一份 goindex，可以直接 fork <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1aWxvbmdqaW4vZ29pbmRleA==">我的</span>，</p>
<p>登录 CF，打开 workers，选中项目，找到以下代码，我的是在 21 行，替换成有效的即可（可以是你 fork 的，也可以直接使用我的）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/combine/gh/jquery/jquery@3.2/dist/jquery.min.js,gh/donwa/goindex@$&#123;authConfig.version&#125;/themes/$&#123;authConfig.theme&#125;/app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>替换成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/combine/gh/jquery/jquery@3.2/dist/jquery.min.js,gh/cuilongjin/goindex/themes/$&#123;authConfig.theme&#125;/app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原文</p>
<p>利用 GoIndex 程序，以及 CloudFlare，可以将 Google Drive 文件以目录形式（类似 OneIndex 部署 OneDrive 网盘）列出，可直链调用网盘图片、音频、视频文件等，也可以下载，流量走 CloudFlare ，网速由 CloudFlare 决定</p>
<p>项目地址： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvbndhL2dvaW5kZXg=">https://github.com/donwa/goindex</span></p>
<p>demo： <span class="exturl" data-url="aHR0cHM6Ly9pbmRleC5nZC53b3JrZXJzLmRldi8=">https://index.gd.workers.dev/</span></p>
<p>安装部署方案 1</p>
<p>1、在本地安装 rclone<br>2、按照 <span class="exturl" data-url="aHR0cHM6Ly9yY2xvbmUub3JnL2RyaXZlLw==">https://rclone.org/drive/</span> 流程进行授权<br>3、执行 rclone config file 查看 rclone.conf 路径。找到 root_folder_id 和 refresh_token 记录下来<br>4、下载 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvbndhL2dvaW5kZXg=">https://github.com/donwa/goindex</span> 中的 index.js 并填入 root 和 refresh_token<br>5、复制代码 到 CloudFlare 部署</p>
<p>安装部署方案 2</p>
<p>作者不会记录 refresh_token，但为避免纠纷，建议有条件的同学使用方案 1 进行部署<br>1、访问<span class="exturl" data-url="aHR0cHM6Ly9pbnN0YWxsLmdkLndvcmtlcnMuZGV2Lw==">https://install.gd.workers.dev/</span><br>2、授权认证后，生成部署代码<br>3、复制代码 到 CloudFlare 部署</p>
<p>目录 id：例如 google 网盘链接为<code>https://drive.google.com/drive/folders/1rrDnupW_1qxRnQf-jy_0PN_GqNK8SEk2</code>，则目录 id 为 <code>1rrDnupW_1qxRnQf-jy_0PN_GqNK8SEk2</code></p>
<p>部署 CloudFlare</p>
<p>绑定自定义域名</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvbndhL2dvaW5kZXgvaXNzdWVzLzQ=">https://github.com/donwa/goindex/issues/4</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>google TeamDrive 免费无限容量团队盘申请</title>
    <url>/1207.html</url>
    <content><![CDATA[<p>Google Drive 团队盘，不是增加你本身空间，是增加一个团队盘在你名下，你账号是 15G 依然是 15G，但是存在团队盘里的不算你的占用。</p>
<p>申请地址：<br><span class="exturl" data-url="aHR0cDovL2xlb24uZWR1Y2F0aW9uaG9zdC5jbG91ZC8=">http://leon.educationhost.cloud/</span><br><span class="exturl" data-url="aHR0cHM6Ly90ZC5mYXN0aW8ubWUv">https://td.fastio.me/</span><br><span class="exturl" data-url="aHR0cHM6Ly9nZC56eGQud29ya2Vycy5kZXYv">https://gd.zxd.workers.dev/</span> All Saints CofE Junior School<br><span class="exturl" data-url="aHR0cHM6Ly90ZWFtZHJpdmUueGNweC53b3JrZXJzLmRldi8=">https://teamdrive.xcpx.workers.dev/</span> swccd.edu<br><span class="exturl" data-url="aHR0cHM6Ly9nZC40MDRlZHUud29ya2Vycy5kZXYv">https://gd.404edu.workers.dev/</span> 台灣教育部</p>
<p>输入团队盘名称，随便你自己取，建议英文格式。Gmail 邮箱地址建议用自己的小号。弄好这两样后点击提交即可，等提示创建成功就 OK 了。</p>
<p>登陆 Google Drive 后你会发现在 My Drive(我的云端硬盘) 下面多出了一个 Shared drives(共享云端硬盘) 的菜单按钮</p>
<p>无限空间方式：</p>
<ul>
<li>教育版无限空间</li>
</ul>
<ol>
<li>卖给你支持 GApps 的学校的邮箱账号密码，简单直接，没啥好说的，登上去就有了</li>
<li>不给你邮箱，让你提供自己的 Gmail 账号，然后他给你拉进去。详细讲就是他新开一个“share drive”然后把你拉进去，你们俩就共享这个“share drive”的无限空间了。(记得将自己设置成管理员，并把拉你的人从 share drive 中删除)</li>
</ol>
<p>如果买了邮箱也建议自己按照上面方式 2 那样给自己的 Gmail 分配无限空间，因为买的教育邮箱可能来路不正，可能被封，而分配出去的 share drive 是不受影响的。</p>
<ul>
<li>从 G Suit 获取的无限空间<br>跟上面的教育网那个类似的，只是是商业的用途，按月交钱，不同档次支持的用户数不同。同样是把你拉进去就可以用无限空间了。这玩意儿人家只要不续费了你就完犊子了。管理员是可以随意查看账号中的内容</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Google Drive</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 rclone 并挂载 Google drive</title>
    <url>/1243.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">todo:</span><br><span class="line">https://www.cnblogs.com/mysummerday/p/12661263.html#_caption_1</span><br><span class="line"></span><br><span class="line">./rclone.exe mount secret:/  Q: --cache-dir G:\OneDrive --vfs-cache-mode writes &amp;</span><br><span class="line"></span><br><span class="line"> Fatal error: failed to mount FUSE fs: mount stopped before calling Init: mount failed: cgofuse: cannot find winfsp</span><br></pre></td></tr></table></figure>

<h3 id="安装-rclone-并挂载-Googledrive"><a href="#安装-rclone-并挂载-Googledrive" class="headerlink" title="安装 rclone 并挂载 Googledrive"></a>安装 rclone 并挂载 Googledrive</h3><h3 id="安装-rclone"><a href="#安装-rclone" class="headerlink" title="安装 rclone"></a>安装 rclone</h3><p>Linux 环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure>

<p>Windows 环境</p>
<p>直接去 rclone 官网下载 rclone，最好将 rclone.exe 所在目录加入系统环境变量</p>
<h3 id="配置-rclone"><a href="#配置-rclone" class="headerlink" title="配置 rclone"></a>配置 rclone</h3><blockquote>
<p>详细配置参考 <span class="exturl" data-url="aHR0cHM6Ly9yY2xvbmUub3JnL2RyaXZlLw==">https://rclone.org/drive/</span></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No remotes found - make a new one</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n # 新建</span><br><span class="line">name&gt; gdrive # 名称，后面要用到</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ &quot;fichier&quot;</span><br><span class="line"> 2 / Alias for an existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 / Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ &quot;sharefile&quot;</span><br><span class="line"> 9 / Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line">10 / Encrypt/Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">11 / FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">12 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">13 / Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">14 / Google Photos</span><br><span class="line">   \ &quot;google photos&quot;</span><br><span class="line">15 / Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">16 / In memory object storage system.</span><br><span class="line">   \ &quot;memory&quot;</span><br><span class="line">17 / JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">18 / Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">19 / Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">20 / Mail.ru Cloud</span><br><span class="line">   \ &quot;mailru&quot;</span><br><span class="line">21 / Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">22 / Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">23 / Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">24 / OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">25 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">26 / Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">27 / Put.io</span><br><span class="line">   \ &quot;putio&quot;</span><br><span class="line">28 / QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">29 / SSH/SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">30 / Sugarsync</span><br><span class="line">   \ &quot;sugarsync&quot;</span><br><span class="line">31 / Transparently chunk/split large files</span><br><span class="line">   \ &quot;chunker&quot;</span><br><span class="line">32 / Union merges the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line">33 / Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">34 / Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">35 / http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">36 / premiumize.me</span><br><span class="line">   \ &quot;premiumizeme&quot;</span><br><span class="line">Storage&gt; 13 # 选择 13 google drive</span><br><span class="line">** See help for drive backend at: https://rclone.org/drive/ **</span><br><span class="line"></span><br><span class="line">Google Application Client Id</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">See https://rclone.org/drive/#making-your-own-client-id for how to create your own.</span><br><span class="line">If you leave this blank, it will use an internal key which is low performance.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_id&gt; # 默认</span><br><span class="line">Google Application Client Secret</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_secret&gt; # 默认</span><br><span class="line">Scope that rclone should use when requesting access from drive.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 / Full access all files, excluding Application Data Folder.</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line"> 2 / Read-only access to file metadata and file contents.</span><br><span class="line">   \ &quot;drive.readonly&quot;</span><br><span class="line">   / Access to files created by rclone only.</span><br><span class="line"> 3 | These are visible in the drive website.</span><br><span class="line">   | File authorization is revoked when the user deauthorizes the app.</span><br><span class="line">   \ &quot;drive.file&quot;</span><br><span class="line">   / Allows read and write access to the Application Data folder.</span><br><span class="line"> 4 | This is not visible in the drive website.</span><br><span class="line">   \ &quot;drive.appfolder&quot;</span><br><span class="line">   / Allows read-only access to file metadata but</span><br><span class="line"> 5 | does not allow any access to read or download file content.</span><br><span class="line">   \ &quot;drive.metadata.readonly&quot;</span><br><span class="line">scope&gt; 1 # 选1，所有权限</span><br><span class="line">ID of the root folder</span><br><span class="line">Leave blank normally.</span><br><span class="line"></span><br><span class="line">Fill in to access &quot;Computers&quot; folders (see docs), or for rclone to use</span><br><span class="line">a non root folder as its starting point.</span><br><span class="line"></span><br><span class="line">Note that if this is blank, the first time rclone runs it will fill it</span><br><span class="line">in with the ID of the root folder.</span><br><span class="line"></span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">root_folder_id&gt; # 默认</span><br><span class="line">Service Account Credentials JSON file path</span><br><span class="line">Leave blank normally.</span><br><span class="line">Needed only if you want use SA instead of interactive login.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">service_account_file&gt; # 默认</span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; # 默认</span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n # 如果在远程服务器上配置，记得选 n，否则可能无法正常授权</span><br><span class="line">If your browser doesn&#x27;t open automatically go to the following link: http://127.0.0.1:53682/auth</span><br><span class="line">Log in and authorize rclone for access</span><br><span class="line">Waiting for code...</span><br><span class="line">Got code</span><br><span class="line">Configure this as a team drive?</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n</span><br><span class="line">--------------------</span><br><span class="line">[remote]</span><br><span class="line">client_id =</span><br><span class="line">client_secret =</span><br><span class="line">scope = drive</span><br><span class="line">root_folder_id =</span><br><span class="line">service_account_file =</span><br><span class="line">token = &#123;&quot;access_token&quot;:&quot;XXX&quot;,&quot;token_type&quot;:&quot;Bearer&quot;,&quot;refresh_token&quot;:&quot;XXX&quot;,&quot;expiry&quot;:&quot;2014-03-16T13:57:58.955387075Z&quot;&#125;</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y</span><br><span class="line">Current remotes:</span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">gdrive               drive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>如果在远程 linux 安装，有些配置(涉及 oauth2 的配置)需要使用浏览器授权，可以使用一下方法配置</p>
<blockquote>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9yY2xvbmUub3JnL3JlbW90ZV9zZXR1cC8=">https://rclone.org/remote_setup/</span></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n # 这里选择 n，授权链接会变成如下样式，而不再是 http://127.0.0.1</span><br><span class="line">Please go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=offline&amp;client_id=202264815644.apps.googleusercontent.com&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;response_type=code&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&amp;state=J17j_xVz3tAQmV3sMO0xxw</span><br><span class="line">Log in and authorize rclone for access</span><br><span class="line">Enter verification code&gt; # 打开链接登陆授权，将code粘贴到这里</span><br></pre></td></tr></table></figure>

<h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/gdrive</span><br><span class="line"><span class="comment">#gdrive 为上面配置的 name</span></span><br><span class="line"><span class="comment">#/home/gdrive 为挂载到本地的目录</span></span><br><span class="line">/usr/bin/rclone mount gdrive: /home/gdrive \</span><br><span class="line"> --<span class="built_in">umask</span> 0000 \</span><br><span class="line"> --default-permissions \</span><br><span class="line"> --allow-non-empty \</span><br><span class="line"> --allow-other \</span><br><span class="line"> --buffer-size 32M \</span><br><span class="line"> --dir-cache-time 12h \</span><br><span class="line"> --vfs-cache-mode \</span><br><span class="line">  writes &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>报错<br>Fatal error: failed to mount FUSE fs: fusermount: exec: “fusermount”: executable file not found in $PATH<br>解决：安装 fuse<br><code>apt-get install fuse -y</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载磁盘</span></span><br><span class="line">fusermount -qzu LocalFolder  <span class="comment"># LocalFolder 为本地挂载目录</span></span><br></pre></td></tr></table></figure>

<h3 id="查看挂载"><a href="#查看挂载" class="headerlink" title="查看挂载"></a>查看挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">gdrive:         1.0P     0  1.0P   0% /home/gdrive</span><br></pre></td></tr></table></figure>

<p>自动挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/systemd/system/rclone.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Rclone</span><br><span class="line">AssertPathIsDirectory=LocalFolder</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/rclone mount emby: /home/gdrive \</span><br><span class="line"> --umask 0000 \</span><br><span class="line"> --default-permissions \</span><br><span class="line"> --allow-non-empty \</span><br><span class="line"> --allow-other \</span><br><span class="line"> --buffer-size 32M \</span><br><span class="line"> --dir-cache-time 12h \</span><br><span class="line"> --vfs-read-chunk-size 64M \</span><br><span class="line"> --vfs-read-chunk-size-limit 1G</span><br><span class="line">ExecStop=/bin/fusermount -u LocalFolder</span><br><span class="line">Restart=on-abort</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start rclone</span><br></pre></td></tr></table></figure>

<p>开启启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rclone</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Google Drive</tag>
        <tag>rclone</tag>
      </tags>
  </entry>
  <entry>
    <title>支持天翼云，百度云等网盘的挂载工具</title>
    <url>/2024.html</url>
    <content><![CDATA[<h2 id="CTList"><a href="#CTList" class="headerlink" title="CTList"></a>CTList</h2><p>CTList是萌咖大佬基于go语言写的天翼云网盘的目录列表程序。CTList支持多用户，支持WebDav，整个站点目录支持在nPlayer、PotPlayer播放器以及ES文件浏览器中使用。</p>
<p>参考链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9lcmF0cy5jb20vYXJjaGl2ZXMvMTAyOC8=">https://www.moerats.com/archives/1028/</span></p>
<h2 id="sharelist"><a href="#sharelist" class="headerlink" title="sharelist"></a>sharelist</h2><p>sharelist是reruin大佬node.js开发的云盘目录程序，前端页面简洁美观<br>可挂载：Google Drive，One Drive，天翼云，和彩云，蓝奏云，本地文件，WebDAV，SFTP，Teambition，Baidu，Aliyun Drive</p>
<p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlcnVpbi9zaGFyZWxpc3Q=">https://github.com/reruin/sharelist</span></p>
]]></content>
      <tags>
        <tag>天翼云</tag>
      </tags>
  </entry>
  <entry>
    <title>百度网盘资源下载工具合集</title>
    <url>/1966.html</url>
    <content><![CDATA[<p>整理备份百度网盘资源下载工具，低调使用。</p>
<p>2021.01.30 Kinhdown 可用</p>
<p>2020年9月20日 PD卢本伟修改版3.5版本更新</p>
<h2 id="Kinhdown"><a href="#Kinhdown" class="headerlink" title="Kinhdown"></a>Kinhdown</h2><p><span class="exturl" data-url="aHR0cHM6Ly9raW5oZG93bi5raW5oLmNjLw==">Kinhdown</span><br><span class="exturl" data-url="aHR0cHM6Ly90Lm1lL0tpbmhEb3duTG9hZFRH">电报群</span><br><span class="exturl" data-url="aHR0cHM6Ly90Lm1lL0tpbmhEb3duTG9hZA==">电报频道</span><br>下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGFuem91eC5jb20vcy9LaW5oRG93bg==">蓝奏云</span><br>在线解析：<span class="exturl" data-url="aHR0cHM6Ly9wYW4ua2RiYWlkdS5jb20v">KD官方</span></p>
<h2 id="PD卢本伟修改版"><a href="#PD卢本伟修改版" class="headerlink" title="PD卢本伟修改版"></a>PD卢本伟修改版</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BhbkRvd25sb2FkU2VydmVyL1NlcnZlcg==">github</span><br><span class="exturl" data-url="aHR0cHM6Ly9rdXJ1a3VydW1pLnRrLw==">官网</span><br><span class="exturl" data-url="aHR0cHM6Ly90Lm1lL2ZpeHBk">Telegram群</span></p>
<h2 id="无言仰慕不起-稳定版"><a href="#无言仰慕不起-稳定版" class="headerlink" title="无言仰慕不起-稳定版"></a>无言仰慕不起-稳定版</h2><h2 id="PD新城旧梦版"><a href="#PD新城旧梦版" class="headerlink" title="PD新城旧梦版"></a>PD新城旧梦版</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXR4Y2ptLnRvcC83Ni8=">https://www.itxcjm.top/76/</span></p>
<p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d2EubGFuem91cy5jb20vaVRBSDlkd2wyb2g=">蓝奏云</span></p>
<h2 id="6盘小白羊版"><a href="#6盘小白羊版" class="headerlink" title="6盘小白羊版"></a>6盘小白羊版</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXBhbjE4OTAveGlhb2JhaXlhbmc=">github</span></p>
<h2 id="B站MBRjun的网页复刻版"><a href="#B站MBRjun的网页复刻版" class="headerlink" title="B站MBRjun的网页复刻版"></a>B站MBRjun的网页复刻版</h2><p><span class="exturl" data-url="aHR0cHM6Ly9wYW4ubWJyanVuLmNuLw==">https://pan.mbrjun.cn/</span> 不支持文件夹下载</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3l1YW50dW82NjYvYmFpZHV3cC1waHA=">github</span></p>
<h2 id="在线解析-已关闭"><a href="#在线解析-已关闭" class="headerlink" title="在线解析(已关闭)"></a>在线解析(已关闭)</h2><p><span class="exturl" data-url="aHR0cDovL3Bhbi5uYWlmZWkuY2Mv">http://pan.naifei.cc/</span>?</p>
<h2 id="PanDownload"><a href="#PanDownload" class="headerlink" title="PanDownload"></a>PanDownload</h2><p><span class="exturl" data-url="aHR0cDovL3BhbmRvd25sb2FkLmNvbS8=">PanDownload</span></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>百度网盘</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌团队盘使用相关教程合集</title>
    <url>/1944.html</url>
    <content><![CDATA[<h2 id="获取谷歌团队盘"><a href="#获取谷歌团队盘" class="headerlink" title="获取谷歌团队盘"></a>获取谷歌团队盘</h2><p>免费团队盘：<a href="https://wqdy.top/1207.html">https://wqdy.top/1207.html</a></p>
<p>GSuite 教育子号购买：<span class="exturl" data-url="aHR0cHM6Ly9pcC5jaS9wcm9kdWN0LzUuaHRtbA==">https://ip.ci/product/5.html</span></p>
<h2 id="资源转存"><a href="#资源转存" class="headerlink" title="资源转存"></a>资源转存</h2><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JjbG9uZS9yY2xvbmU=">rclone</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2thcGl0YWluc2t5L1JjbG9uZUJyb3dzZXIvcmVsZWFzZXMv">rclone 客户端</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvbndhL2djbG9uZQ==">gclone</span> 为 Google Drive 操作增加自动切换账户和命令行根目录 id 操作支持</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3h5b3UzNjUvQXV0b1JjbG9uZQ==">AutoRclone</span> 解决每日 750G 限制</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2l3ZXN0bGluL2dkLXV0aWxz">gd-utils Google Drive 百宝箱</span> 支持统计、去重、telegram bot</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Z4eGtybGFiL2lDb3B5">iCopy</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhcmFud2FuZy9pY29weS1kb2NrZXI=">iCopy Docker 一键启动版</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvdGdyYW0vc2hlbGwtYm90">shell-bot</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nna2luZ3MvZ2Nsb25lLWFzc2lzdGFudA==">gclone 实用脚本合集</span> 转存 自动分类整理 清空回收站 备份同步</p>
<h3 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h3><p><a href="https://wqdy.top/1472.html">AutoRclone 配合 Gclone 在 Google Drive 账号之间、谷歌团队盘之间快速拷贝、传输学习资料</a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvanV6aS9hcnRpY2xlL2RldGFpbHMvMTA3NDQ0MjE2">iCopy 和 fclone 和 TG-bot 构建 gd 转存保姆教程</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubG9jbWpqLmNvbS8zNjYuaHRtbA==">使用 VPS 搭建 fclone_shell_bot 文章转存 Telegram 机器人教程</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjAwMDcxNC54eXovMjAyMDA3LzE0MTkuaHRtbA==">第四代谷歌网盘 Clone 术：Fclone</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nna2luZ3MvZmNsb25lX3NoZWxsX2JvdA==">FClone 机器人及安装过程</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cueWJ1cmdlci5uZXQvc2tpbGwvaWNvcHkuaHRtbA==">iCopy——让Google Drive文件转存更加简单</span></p>
<h2 id="文件解压"><a href="#文件解压" class="headerlink" title="文件解压"></a>文件解压</h2><p><code>unzip -O GBK -P $(echo -n 密码 | iconv -f utf-8 -t gbk) file.zip</code></p>
<p>解压中文编码文件<br><code>unar -e GBK /gdrive/disk/zidian2/77个WPA密码字典包/\’’*.rar’’</code></p>
<h2 id="在线挂载-GD-网盘"><a href="#在线挂载-GD-网盘" class="headerlink" title="在线挂载 GD 网盘"></a>在线挂载 GD 网盘</h2><p><code>https://github.com/reruin/sharelist</code></p>
<p><code>https://github.com/maple3142/GDIndex</code></p>
<p><code>https://github.com/Aicirou/goindex-theme-acrou</code> 界面不错、多盘、搜索</p>
<p><code>https://github.com/alx-xlx/goindex</code></p>
<p><code>https://github.com/LeeluPradhan/G-Index</code></p>
<p><code>https://github.com/yanzai/goindex</code></p>
<h2 id="资源群组"><a href="#资源群组" class="headerlink" title="资源群组"></a>资源群组</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIWZvcnVtL21haWxhY2lk">https://groups.google.com/forum/#!forum/mailacid</span> 印尼群组</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIWZvcnVtL3Rsb2Jfc2hhcmU=">https://groups.google.com/forum/#!forum/tlob_share</span> TLOB 图库群组</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90Lm1lL25ld1Bhbg==">https://t.me/newPan</span> 150T 已整理刮削的小姐姐团队盘</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90Lm1lL2dkdXJs">https://t.me/gdurl</span> 各种 Google Drive 资源，包括大电影，小电影，电子书，无损音乐等</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Linux 测试网速 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoaWFrZ2UvTGludXgtTmV0U3BlZWQ=">https://github.com/chiakge/Linux-NetSpeed</span></p>
<p>清空及删除团队回收站垃圾箱文件 <code>rclone delete xxx: --drive-trashed-only --drive-use-trash=false --verbose=3 --fast-list</code></p>
<p>在线 查看文件数：<span class="exturl" data-url="aHR0cHM6Ly9nZHVybC52aWVnZy5jb20vYXBpL2dkcml2ZS9jb3VudD9maWQ9MWxEYTdncXY4ZTZ4R0tKZG1ray1iVjBrdDJ3XzA3QTVy">https://gdurl.viegg.com/api/gdrive/count?fid=1lDa7gqv8e6xGKJdmkk-bV0kt2w_07A5r</span></p>
<p>Colaboratory 脚本运行： <span class="exturl" data-url="aHR0cHM6Ly9jb2xhYi5yZXNlYXJjaC5nb29nbGUuY29tLw==">https://colab.research.google.com/</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Google Drive</tag>
      </tags>
  </entry>
  <entry>
    <title>telegram ss ip 名单</title>
    <url>/236.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">91.108.56.0/22</span><br><span class="line">91.108.4.0/22</span><br><span class="line">109.239.140.0/24</span><br><span class="line">149.154.160.0/20</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>v2ray 搭建配置教程</title>
    <url>/226.html</url>
    <content><![CDATA[<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly92MmZseS5vcmcv">v2ray 用户手册</span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3YyZmx5L3YyZmx5LWdpdGh1Yi1pbw==">github</span><br><span class="exturl" data-url="aHR0cHM6Ly9ndWlkZS52MmZseS5vcmcv">V2Ray 白话文指南</span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3YyZmx5L3YycmF5LXN0ZXAtYnktc3RlcC90cmVlL3RyYW5zaWZleC96aF9DTg==">github</span><br><span class="exturl" data-url="aHR0cHM6Ly9pbnRtYWlucmV0dXJuMC5jb20vdjJyYXktY29uZmlnLWdlbi8=">在线配置生成</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nwcm92MDY1L3YyLXVp">v2ray web面板 v2-ui</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FuYW5ra2UvU1NQYW5lbC1VaW0=">SSPanel-Uim</span> 节点管理面板&#x2F;用户管理系统<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmFuYW5rLmtlL3cvU1NQYW5lbF93aXRoX0RST1BfREFUQUJBU0VfQlQ=">使用宝塔部署 SSPanel 魔改版</span></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="一键脚本安装"><a href="#一键脚本安装" class="headerlink" title="一键脚本安装"></a>一键脚本安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>

<p>安装完成后，输入 v2ray 即可管理 V2Ray</p>
<p>管理命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v2ray info <span class="comment"># 查看 V2Ray 配置信息</span></span><br><span class="line">v2ray config <span class="comment"># 修改 V2Ray 配置</span></span><br><span class="line">v2ray <span class="built_in">link</span> <span class="comment"># 生成 V2Ray 配置文件链接</span></span><br><span class="line">v2ray infolink <span class="comment"># 生成 V2Ray 配置信息链接</span></span><br><span class="line">v2ray qr <span class="comment"># 生成 V2Ray 配置二维码链接</span></span><br><span class="line">v2ray ss <span class="comment"># 修改 Shadowsocks 配置</span></span><br><span class="line">v2ray ssinfo <span class="comment"># 查看 Shadowsocks 配置信息</span></span><br><span class="line">v2ray ssqr <span class="comment"># 生成 Shadowsocks 配置二维码链接</span></span><br><span class="line">v2ray status <span class="comment"># 查看 V2Ray 运行状态</span></span><br><span class="line">v2ray start <span class="comment"># 启动 V2Ray</span></span><br><span class="line">v2ray stop <span class="comment"># 停止 V2Ray</span></span><br><span class="line">v2ray restart <span class="comment"># 重启 V2Ray</span></span><br><span class="line">v2ray <span class="built_in">log</span> <span class="comment"># 查看 V2Ray 运行日志</span></span><br><span class="line">v2ray update <span class="comment"># 更新 V2Ray</span></span><br><span class="line">v2ray update.sh <span class="comment"># 更新 V2Ray 管理脚本</span></span><br><span class="line">v2ray uninstall <span class="comment"># 卸载 V2Ray</span></span><br></pre></td></tr></table></figure>

<h3 id="官方脚本"><a href="#官方脚本" class="headerlink" title="官方脚本"></a>官方脚本</h3><p><span class="exturl" data-url="aHR0cHM6Ly92MnJheS5jb20vY2hhcHRlcl8wMC9pbnN0YWxsLmh0bWw=">官方脚本</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后记住 PORT UUID，忘记也没关系可以使用下面命令查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start v2ray</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口 Port</span></span><br><span class="line"><span class="built_in">cat</span> /etc/v2ray/config.json | grep port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 id (UUID)</span></span><br><span class="line"><span class="built_in">cat</span> /etc/v2ray/config.json | grep <span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如果脚本不支持卸载，可使用以下方法手动卸载</p>
<p>其中 systemd 和 sysv 二选一，取决于你的系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停用并卸载服务(systemd)</span></span><br><span class="line">systemctl stop v2ray</span><br><span class="line">systemctl <span class="built_in">disable</span> v2ray</span><br><span class="line"></span><br><span class="line"><span class="comment">#停用并卸载服务(sysv)</span></span><br><span class="line">service v2ray stop</span><br><span class="line">update-rc.d -f v2ray remove</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/v2ray/*</span><br><span class="line"><span class="comment"># 程序</span></span><br><span class="line"><span class="built_in">rm</span> -rf /usr/bin/v2ray/*</span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/log/v2ray/*</span><br><span class="line"><span class="comment"># systemd 启动项</span></span><br><span class="line"><span class="built_in">rm</span> -rf /lib/systemd/system/v2ray.service</span><br><span class="line"><span class="comment"># sysv 启动项</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/init.d/v2ray</span><br></pre></td></tr></table></figure>

<h3 id="Nginx-WebSocket-TLS"><a href="#Nginx-WebSocket-TLS" class="headerlink" title="Nginx + WebSocket + TLS"></a>Nginx + WebSocket + TLS</h3><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9ndWlkZS52MmZseS5vcmcvYWR2YW5jZWQvd3NzX2FuZF93ZWIuaHRtbA==">https://guide.v2fly.org/advanced/wss_and_web.html</span></p>
<p>V2Ray 脚本可直接使用 Caddy 配置 WebSocket + TLS 传输协议，但是如果想在 vps 上同时使用 nginx 跑一个小博客，那么会导致 caddy 和 nginx 监听端口时发生冲突，这显然不是我们想要的</p>
<p>所以就要将 TLS 部分放到 nginx 程序里面去实现</p>
<h4 id="首先使用官方脚本安装好服务端程序"><a href="#首先使用官方脚本安装好服务端程序" class="headerlink" title="首先使用官方脚本安装好服务端程序"></a>首先使用官方脚本安装好服务端程序</h4><h4 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h4><blockquote>
<p>如果使用宝塔面板，可以通过面板一键生成 ssl 证书，快速配置 <code>nginx+ssl</code></p>
</blockquote>
<p>申请免费 SSL 证书参考<a href="https://wqdy.top/1909.html">这里</a></p>
<h4 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h4><blockquote>
<p>如果使用宝塔面板，可以通过面板一键生成 ssl 证书，快速配置 <code>nginx+ssl</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 443 ssl;</span><br><span class="line">  listen [::]:443 ssl;</span><br><span class="line">  server_name           aaa.com; # 域名</span><br><span class="line"></span><br><span class="line">  # 配置ssl</span><br><span class="line">  ssl_certificate       /etc/letsencrypt/aaa.com.crt; # 证书</span><br><span class="line">  ssl_certificate_key   /etc/letsencrypt/aaa.com.key; # 密钥</span><br><span class="line">  ssl_session_timeout 1d;</span><br><span class="line">  ssl_session_cache shared:MozSSL:10m;</span><br><span class="line">  ssl_session_tickets off;</span><br><span class="line">  ssl_protocols         TLSv1.2 TLSv1.3;</span><br><span class="line">  ssl_ciphers           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">  ssl_prefer_server_ciphers off;</span><br><span class="line">  #</span><br><span class="line"></span><br><span class="line">  location /ray &#123; # 与 V2Ray 服务端配置中的 path 保持一致</span><br><span class="line">    if ($http_upgrade != &quot;websocket&quot;) &#123; # WebSocket协商失败时返回404</span><br><span class="line">      return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass http://127.0.0.1:2333; # 假设 WebSocket 监听在环回地址的 2333 端口上</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    # Show real IP in v2ray access.log</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="v2ray-服务端配置"><a href="#v2ray-服务端配置" class="headerlink" title="v2ray 服务端配置"></a>v2ray 服务端配置</h4><p>&#x2F;etc&#x2F;v2ray&#x2F;config.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">2333</span><span class="punctuation">,</span> <span class="comment">// WebSocket 监听端口</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span> <span class="comment">// 只监听 127.0.0.1，避免除本机外的机器探测到开放了 22445 端口</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">32</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ray&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;destOverride&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;http&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;noauth&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aaa.com&quot;</span><span class="punctuation">,</span> <span class="comment">// nginx server_name</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx&quot;</span><span class="punctuation">,</span> <span class="comment">// 同服务端配合</span></span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">32</span> <span class="comment">// 同服务端配合</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ray&quot;</span> <span class="comment">// 与 V2Ray 服务端配置中的 path 保持一致</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Nginx-vmess-ws-tls-x2F-http2-over-tls-一键安装脚本"><a href="#Nginx-vmess-ws-tls-x2F-http2-over-tls-一键安装脚本" class="headerlink" title="Nginx+vmess+ws+tls&#x2F; http2 over tls 一键安装脚本"></a>Nginx+vmess+ws+tls&#x2F; http2 over tls 一键安装脚本</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d1bGFiaW5nL1YyUmF5X3dzLXRsc19iYXNoX29uZWtleQ==">https://github.com/wulabing/V2Ray_ws-tls_bash_onekey</span></p>
<p>证书签发错误的原因是签发服务器已经不认默认的邮箱名:@example.com,</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- curl https://get.acme.sh | sh</span></span><br><span class="line"><span class="addition">+ curl https://get.acme.sh | sh -s email=admin@youremail.com</span></span><br></pre></td></tr></table></figure>
<p>添加-s 参数, 把你的邮箱放进去</p>
<p>另外如果脚本全部正常跑完, 还是不能用的,请用这个网站 <span class="exturl" data-url="aHR0cHM6Ly93d3cubWF0b29scy5jb20vcG9ydA==">https://www.matools.com/port</span> 检查下你的端口是不是已经被封了</p>
<h2 id="v2ray-配置好后无法连接解决办法"><a href="#v2ray-配置好后无法连接解决办法" class="headerlink" title="v2ray 配置好后无法连接解决办法"></a>v2ray 配置好后无法连接解决办法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查端口占用情况</span></span><br><span class="line">yum install net-tools</span><br><span class="line">netstat -apn | grep v2ray</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现v2ray并没有监听我们的公网IP，只监听了一个IPV6：</span></span><br><span class="line"><span class="comment"># tcp6       0      0 :::40682                :::*                    LISTEN      19553/v2ray</span></span><br><span class="line"><span class="comment"># unix  3      [ ]         STREAM     CONNECTED     80938    19553/v2ray</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件添加 listen 字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># v2ray默认配置文件在/etc/v2ray/conf.json</span></span><br><span class="line"><span class="string">&quot;inbound&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;listen&quot;</span>:<span class="string">&quot;12.34.56.78&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># v2ray 测试配置文件是否正确</span></span><br><span class="line">/usr/bin/v2ray/v2ray --<span class="built_in">test</span> --config /etc/v2ray/config.json</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端可以参考<a href="https://wqdy.top/228.html#%E5%AE%A2%E6%88%B7%E7%AB%AF">这里</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>搭建ss服务器</title>
    <url>/224.html</url>
    <content><![CDATA[<h2 id="购买-VPS-服务器"><a href="#购买-VPS-服务器" class="headerlink" title="购买 VPS 服务器"></a>购买 VPS 服务器</h2><p>vultr 注册地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsdHIuY29tLw==">https://www.vultr.com/</span></p>
<p>利用 <code>ipip</code> 这个网站的 实用工具里的 ping 来全国性的 ping 我们的主机，检测连通性</p>
<h2 id="部署-VPS-服务器"><a href="#部署-VPS-服务器" class="headerlink" title="部署 VPS 服务器"></a>部署 VPS 服务器</h2><h3 id="ssh-工具"><a href="#ssh-工具" class="headerlink" title="ssh 工具"></a>ssh 工具</h3><p><strong>Win：</strong><br>使用软件 PuTTY<br>打开软件<br>Host Name (or IP address) 写你服务器的 IP 地址<br>Port 默认 22<br>Connection type 选择 SSH<br>Open</p>
<p><strong>Mac：</strong><br>默认有 SSH 命令<br>ssh root@IP<br>输入用户名和密码,用户名为 root<br>login as: root<br>root@IP’s password:</p>
<h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><p>CentOS&#x2F;Debian&#x2F;Ubuntu ShadowsocksR 单&#x2F;多端口 一键管理脚本<br><span class="exturl" data-url="aHR0cHM6Ly9kb3ViLmlvL3NzLWpjNDIv">https://doub.io/ss-jc42/</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; <span class="built_in">chmod</span> +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>

<p>备用脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; <span class="built_in">chmod</span> +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>

<p>复制上面的代码到 VPS 服务器里，按回车键，脚本会自动安装，以后只需要运行 <code>bash ssr.sh</code> 这个快捷命令就可以出现下图的界面进行设置。</p>
<ol>
<li>安装 SSR 服务端</li>
<li>设置端口和密码</li>
<li>设置的加密方式: aes-256-cfb</li>
<li>选择协议插件: auth_sha1_v4</li>
<li>选择混淆插件 plain</li>
</ol>
<p>ShadowsocksR MudbJSON 模式多用户一键脚本 支持流量限制<br><span class="exturl" data-url="aHR0cHM6Ly9kb3ViLmlvL3NzLWpjNjAv">https://doub.io/ss-jc60/</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://softs.fun/Bash/ssrmu.sh &amp;&amp; <span class="built_in">chmod</span> +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></table></figure>

<p>备用下载地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh &amp;&amp; <span class="built_in">chmod</span> +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash ssrmu.sh</span><br></pre></td></tr></table></figure>

<h2 id="测速脚本官方地址"><a href="#测速脚本官方地址" class="headerlink" title="测速脚本官方地址"></a>测速脚本官方地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/oooldking/script/master/superbench.sh</span><br><span class="line"><span class="built_in">chmod</span> +x superbench.sh</span><br><span class="line">./superbench.sh</span><br></pre></td></tr></table></figure>

<h2 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zc3IudG9vbHMvNjc0">锐速&#x2F;BBR&#x2F;魔改 BBR&#x2F;KCPTUN 加速效果对比测试</span></p>
<p>【原版 BBR】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"><span class="built_in">chmod</span> +x bbr.sh</span><br><span class="line">./bbr.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否安装成功</span></span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br><span class="line"><span class="comment"># 得到如下结果表示安装成功</span></span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>

<p>【魔改 BBR】</p>
<p>只有 centos 和 debain 版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos 版</span></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/tcp-nanqinlang/general/master/General/CentOS/bash/tcp_nanqinlang-1.3.2.sh</span><br><span class="line">bash tcp_nanqinlang-1.3.2.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># debain 版</span></span><br><span class="line">wget --no-check-certificate https://github.com/tcp-nanqinlang/general/releases/download/3.4.2.1/tcp_nanqinlang-fool-1.3.0.sh</span><br><span class="line">bash tcp_nanqinlang-fool-1.3.0.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择 1 安装内核，重启</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 选择 2 安装并开启算法</span></span><br><span class="line">bash tcp_nanqinlang-1.3.2.sh</span><br><span class="line"><span class="comment"># 选择 2 安装并开启算法</span></span><br></pre></td></tr></table></figure>

<p>【BBRPlus（BBR v2.0）】</p>
<p>Github 项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N4OTIwOC9iYnJwbHVz">https://github.com/cx9208/bbrplus</span></p>
<p>一键脚本（仅CentOS）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget &amp;&amp; wget <span class="string">&quot;https://github.com/cx9208/bbrplus/raw/master/ok_bbrplus_centos.sh&quot;</span> &amp;&amp; <span class="built_in">chmod</span> +x ok_bbrplus_centos.sh &amp;&amp; ./ok_bbrplus_centos.sh</span><br></pre></td></tr></table></figure>

<p>等待安装完成，重启，重启之后，按照以下步骤检查是否成功：</p>
<p>执行 uname -r，显示 4.14.129-bbrplus 则切换内核成功</p>
<p>执行 lsmod | grep bbr，显示有 bbrplus 则开启成功</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ss</tag>
      </tags>
  </entry>
  <entry>
    <title>【学习强国】</title>
    <url>/228.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tz">shadowsocks</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJmbHkub3JnLw==">v2ray</span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3YyZmx5">github</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Ryb2phbi1nZncvdHJvamFu">trojan</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RyZWFtYWNyby9jbGFzaA==">clash</span></p>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p><a href="/226.html">v2ray 搭建配置教程</a></p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><blockquote>
<p>仅仅拥有客户端并不能 FQ，还需要在客户端中添加可用的节点，客户端并不提供节点</p>
</blockquote>
<p><strong>iOS</strong></p>
<p>Shadowrocket(小火箭) <span class="exturl" data-url="aHR0cHM6Ly9pb3NpcGEubWwv">在线安装</span> <span class="exturl" data-url="aHR0cHM6Ly9pb3MuZWVlZS5vb28v">在线安装</span> <span class="exturl" data-url="aHR0cHM6Ly93b2hhb2JhbmcuY24v">共享账号</span> 支持 ss、ssr、vmess 协议</p>
<p><strong>macOS</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpY2hlbmdjaGVuL2NsYXNoWC9yZWxlYXNlcw==">clashX</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lhbnVlL1YycmF5VS9yZWxlYXNlcw==">V2rayU</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL1NoYWRvd3NvY2tzWC1ORy9yZWxlYXNlcw==">ShadowsocksX-NG</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZuZHJvaWQvY2xhc2hfZm9yX3dpbmRvd3NfcGtnL3JlbGVhc2Vz">Clash.for.Windows</span></p>
<p><strong>Windows</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzLXdpbmRvd3MvcmVsZWFzZXM=">Shadowsocks</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3YycmF5LXBsdWdpbi9yZWxlYXNlcw==">shadowsockes v2ray插件</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzci1iYWNrdXAvc2hhZG93c29ja3NyLWNzaGFycC9yZWxlYXNlcw==">ShadowsocksR</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJkdXN0L3YycmF5Tg==">v2rayN</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZuZHJvaWQvY2xhc2hfZm9yX3dpbmRvd3NfcGtnL3JlbGVhc2Vz">Clash.for.Windows</span></p>
<p><strong>Android</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJkdXN0L3YycmF5TkcvcmVsZWFzZXM=">V2RayNG</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzLWFuZHJvaWQvcmVsZWFzZXM=">Shadowsocks</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3YycmF5LXBsdWdpbi1hbmRyb2lkL3JlbGVhc2VzLw==">shadowsockes v2ray插件</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V5Y29yc2ljYW4va2l0c3VuZWJpLWFuZHJvaWQvcmVsZWFzZXM=">Kitsunebi</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0tyMzI4L0NsYXNoRm9yQW5kcm9pZA==">ClashForAndroid</span></p>
<h2 id="免费节点订阅"><a href="#免费节点订阅" class="headerlink" title="免费节点订阅"></a>免费节点订阅</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NzcnN1Yi9zc3IvdHJlZS9tYXN0ZXI=">ssrsub&#x2F;ssr</span></p>
<p>参考链接 <span class="exturl" data-url="aHR0cHM6Ly9jb25nY29uZzA4MDYuZ2l0aHViLmlvLzIwMTgvMDQvMjAvU1Mv">https://congcong0806.github.io/2018/04/20/SS/</span></p>
<h2 id="订阅转换"><a href="#订阅转换" class="headerlink" title="订阅转换"></a>订阅转换</h2><p><span class="exturl" data-url="aHR0cHM6Ly9iaWFueXVhbi54eXov">边缘@订阅转换API</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpbmR5MjAxMy9zdWJjb252ZXJ0ZXI=">subconverter</span></p>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hhY2tsMHVzL1NTLVJ1bGUtU25pcHBldA==">Hackl0us&#x2F;SS-Rule-Snippet</span> 搜集、整理、维护 Surge &#x2F; Quantumult (X) &#x2F; Shadowrocket &#x2F; Surfboard &#x2F; clash (Premium) 实用规则。<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dmd2xpc3QvZ2Z3bGlzdA==">gfwlist&#x2F;gfwlist</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xoaWUxL1J1bGVzL3RyZWUvbWFzdGVy">lhie1&#x2F;Rules</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FDTDRTU1IvQUNMNFNTUi90cmVlL21hc3Rlcg==">ACL4SSR&#x2F;ACL4SSR</span> SSR 去广告ACL规则&#x2F;SS完整GFWList规则&#x2F;Clash规则碎片</p>
<h2 id="TG"><a href="#TG" class="headerlink" title="TG"></a>TG</h2><p><span class="exturl" data-url="aHR0cHM6Ly90Lm1lL25nY3Nz">ChinaG（几鸡）</span></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>Adobe Zii 苹果Mac端Adobe软件通用破解工具</title>
    <url>/2021.html</url>
    <content><![CDATA[<p>软件简介：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWRvYmV6aWkuY29tLw==">Adobe Zii</span> 是一个苹果 Ma 端 Adobe 全家桶的通用破解程序，支持 CC 2019，CC 2020，CC 2021。</p>
<p>安装说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 关闭您的互联网连接</span><br><span class="line">2. 安装 Adobe 软件，并点击试用</span><br><span class="line">3. 然后关闭所有 Adobe 软件，启动 Adobe Zii 最新版本</span><br><span class="line">4. 点击“PATCH或DRG”按钮，Zii Patcher 将扫描并修补 MAC 中已安装的所有可访问的 Adobe 软件程序</span><br></pre></td></tr></table></figure>

<p>版本：</p>
<p>Adobe Zii 6.0.6 版本可在 Adobe CC 2021 上运行，完美支持以下版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adobe Acrobat DC v20.012.20048 – 20.013.20074</span><br><span class="line">Adobe After Effects 2020 v17.5-17.6</span><br><span class="line">Adobe Animate 2021 v21.0.0 – 21.0.2</span><br><span class="line">Adobe Audition 2020 v13.0.11 – 13.0.13</span><br><span class="line">Adobe Bridge 2021 v11.0.1</span><br><span class="line">Adobe Character Animator 2020 v3.4</span><br><span class="line">Adobe Dimension v3.4.1</span><br><span class="line">Adobe Dreamweaver 2021 v21.0.0 – 21.1.0</span><br><span class="line">Adobe Illustrator 2021 v25.0.0 – 25.1.0</span><br><span class="line">Adobe InCopy 2021 v16.0.0 – 16.0.2</span><br><span class="line">Adobe InDesign 2021 v16.0.0 – 16.0.2</span><br><span class="line">Adobe Lightroom Classic v10.0 – 10.1.1</span><br><span class="line">Adobe Media Encoder 2020 v14.5 – 14.8</span><br><span class="line">Adobe Photoshop 2021 v22.0.0 – 22.1.1</span><br><span class="line">Adobe Prelude 2020 v9.0.1 – 9.0.3</span><br><span class="line">Adobe Premiere Pro 2020 v14.5 – 14.8</span><br><span class="line">Adobe Premiere Rush v1.5.34 – 1.5.44</span><br><span class="line">Adobe XD v34.0.12 – 36.0.32</span><br><span class="line">Adobe Photoshop Elements 2021</span><br><span class="line">Adobe Premiere Elements 2021</span><br></pre></td></tr></table></figure>

<p>Adobe Zii 5.3.1 版本可在 Adobe CC 2020 上运行，完美支持以下版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adobe Acrobat DC v19.021.20047 – 20.012.20048</span><br><span class="line">Adobe Acrobat DC v19.021.20047 – 20.012.20048</span><br><span class="line">Adobe After Effects 2020 v17.0 – 17.1.4</span><br><span class="line">Adobe Animate 2020 v20.0 – 20.5.1</span><br><span class="line">Adobe Audition 2020 v13.0 – 13.0.10</span><br><span class="line">Adobe Bridge 2020 v10.0 – 10.1.1</span><br><span class="line">Adobe Character Animator 2020 v3.0 – 3.3.1</span><br><span class="line">Adobe Dimension v3.0 – 3.4</span><br><span class="line">Adobe Dreamweaver 2020 v20.0-20.2</span><br><span class="line">Adobe Illustrator 2020 v24.0-24.3</span><br><span class="line">Adobe InCopy 2020 v15.0-15.1.2</span><br><span class="line">Adobe InDesign 2020 v15.0-15.1.2</span><br><span class="line">Adobe Lightroom Classic v9.0 – 9.4</span><br><span class="line">Adobe Media Encoder 2020 v14.0 – 14.4</span><br><span class="line">Adobe Photoshop 2020 v21.0-21.2.4</span><br><span class="line">Adobe Prelude 2020 v9.0 – 9.0.1</span><br><span class="line">Adobe Premiere Pro 2020 v14.0-14.4</span><br><span class="line">Adobe Premiere Rush v1.2.12 – 1.5.29</span><br><span class="line">Adobe XD v24.0 – 33.1.12</span><br><span class="line">Adobe Photoshop Elements 2020 – 2020.1（内部版本20200120.m.139570）</span><br><span class="line">Adobe Premiere Elements 2020 – 2020.1</span><br></pre></td></tr></table></figure>

<p>Adobe Zii 4.5.0 版本可在 Adobe CC 2019 上运行，完美支持以下版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">整个Adobe CC 2015 任何版本</span><br><span class="line">Adobe CC 2017 任何版本</span><br><span class="line">Adobe CC 2018 任何版本</span><br><span class="line">Adobe CC 2019 任何版本</span><br><span class="line">Adobe Acrobat DC 19.x – 19.021.20049</span><br><span class="line">Adobe Illustrator CC 2019 v23.1.1</span><br><span class="line">Adobe InCopy CC 2019 v14.0.2</span><br><span class="line">Adobe InDesign CC 2019 v14.0.3</span><br><span class="line">Adobe Prelude CC 2019 v8.1.1</span><br><span class="line">Adobe Premiere Pro CC 2019 v13.1.5</span><br><span class="line">Adobe Premiere Rush CC v1.2.8</span><br><span class="line">Adobe Photoshop CC 2019 v20.0.7</span><br><span class="line">Adobe After Effects CC 2019 v16.1.3</span><br><span class="line">Adobe Media Encoder CC 2019 v13.1.5</span><br><span class="line">Adobe Lightroom Classic CC 2019 v8.4.1</span><br><span class="line">Adobe Lightroom CC 2019 v2.3</span><br><span class="line">Adobe Audition CC 2019 v12.1.5</span><br><span class="line">Adobe Bridge CC 2019 v9.1.0.338</span><br><span class="line">Adobe Dreamweaver CC 2019 v19.2.1</span><br><span class="line">Adobe XD CC v23.1.32.2</span><br><span class="line">Adobe Character Animator CC 2019 v2.1.1</span><br><span class="line">Adobe Animate CC 2019 v19.2.1</span><br><span class="line">Acrobat DC v19.010.20099</span><br><span class="line">Adobe Dimension CC v2.1</span><br><span class="line">Adobe Premiere Rush CC v1.1</span><br></pre></td></tr></table></figure>

<p>下载链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWtEWXRwSXBOaGMyZW1SWl96Ul92dmc=">百度云</span></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>adobe</tag>
        <tag>软件</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains 系列产品激活工具</title>
    <url>/2016.html</url>
    <content><![CDATA[<p>下载地址：</p>
<p>适用于2020.3.1及以下版本<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVZYVEhhQzJDaHZYYjZsNVlBOWlBcHc=">https://pan.baidu.com/s/1VXTHaC2ChvXb6l5YA9iApw</span><br>提取码：wqdy</p>
]]></content>
      <tags>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat Premium 破解（win&amp;mac）</title>
    <url>/2049.html</url>
    <content><![CDATA[<h2 id="navicat15版本-win"><a href="#navicat15版本-win" class="headerlink" title="navicat15版本(win)"></a>navicat15版本(win)</h2><p>官方安装包下载</p>
<p>32位 <span class="exturl" data-url="aHR0cDovL2Rvd25sb2FkLm5hdmljYXQuY29tLmNuL2Rvd25sb2FkL25hdmljYXQxNTBfcHJlbWl1bV9jc194ODYuZXhl">http://download.navicat.com.cn/download/navicat150_premium_cs_x86.exe</span><br>64位 <span class="exturl" data-url="aHR0cDovL2Rvd25sb2FkLm5hdmljYXQuY29tLmNuL2Rvd25sb2FkL25hdmljYXQxNTBfcHJlbWl1bV9jc194NjQuZXhl">http://download.navicat.com.cn/download/navicat150_premium_cs_x64.exe</span></p>
<p>注册补丁</p>
<p>百度网盘：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVJSMTdRdldCbGVrajJ2RExFSnpaZGc=">https://pan.baidu.com/s/1RR17QvWBlekj2vDLEJzZdg</span> 提取码：wqdy<br>阿里云盘：<br>TG：</p>
<h2 id="navicat16版本-win"><a href="#navicat16版本-win" class="headerlink" title="navicat16版本(win)"></a>navicat16版本(win)</h2><p>官方安装包下载</p>
<p>32位 <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5uYXZpY2F0LmNvbS5jbi9kb3dubG9hZC9uYXZpY2F0MTYwX3ByZW1pdW1fY3NfeDg2LmV4ZQ==">https://download.navicat.com.cn/download/navicat160_premium_cs_x86.exe</span><br>64位 <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5uYXZpY2F0LmNvbS5jbi9kb3dubG9hZC9uYXZpY2F0MTYwX3ByZW1pdW1fY3NfeDY0LmV4ZQ==">https://download.navicat.com.cn/download/navicat160_premium_cs_x64.exe</span></p>
<p>无限试用方法</p>
<p>原理：清除注册表相关信息实现再次试用14天！试用 Navicat Premium 大部分版本</p>
<p>将以下内容保存成 reset.bat 并运行</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Delete HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Registration[version and language]</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;&quot;REG QUERY &quot;HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium&quot; /s | <span class="built_in">findstr</span> /L Registration&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    reg delete <span class="variable">%%i</span> /va /f</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Delete Info folder under HKEY_CURRENT_USER\Software\Classes\CLSID</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;&quot;REG QUERY &quot;HKEY_CURRENT_USER\Software\Classes\CLSID&quot; /s | <span class="built_in">findstr</span> /E Info&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    reg delete <span class="variable">%%i</span> /va /f</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Finish</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<p>参考链接：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hbGFvaHUvcmVzZXQtbmF2aWNhdC1wcmVtaXVt">https://github.com/malaohu/reset-navicat-premium</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FiZWF1dGlmdWxzbm93L25hdmljYXQtcHJlbWl1bS1jcmFjaw==">https://github.com/Abeautifulsnow/navicat-premium-crack</span></p>
<h2 id="navicat15版本-mac"><a href="#navicat15版本-mac" class="headerlink" title="navicat15版本(mac)"></a>navicat15版本(mac)</h2><p>下载</p>
<p>百度网盘：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU10bHRlRWNqOUFlUnJJZmdzX2hPYWc=">https://pan.baidu.com/s/1MtlteEcj9AeRrIfgs_hOag</span> 提取码：wqdy<br>阿里云盘：<br>TG：</p>
]]></content>
      <tags>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO工具之Xenu-网站死链接检测</title>
    <url>/411.html</url>
    <content><![CDATA[<p>网站建立的时间久了，有时候删除过期的文章，会造成链接无法正常访问，或者网站使用了图床，图片不能正常访问等。如果一个网站存在大量死链接，会严重影响用户的正常浏览，也影响搜索引擎爬取网站，对网站优化排名不利</p>
<p>Xenu是一款出色的网站死链接检测工具，检测网页中的链接、图片、js、css等是否存在损坏的链接</p>
<p>xenu 下载 <span class="exturl" data-url="aHR0cDovL2hvbWUuc25hZnUuZGUvdGlsbWFuL3hlbnVsaW5rLmh0bWw=">http://home.snafu.de/tilman/xenulink.html</span></p>
]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>magnetW一款开源的磁力链接聚合搜索工具--支持win/mac</title>
    <url>/1289.html</url>
    <content><![CDATA[<p>开源地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYW5kYW5pbi9tYWduZXRX">https://github.com/xiandanin/magnetW</span><br>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYW5kYW5pbi9tYWduZXRXL3JlbGVhc2Vz">https://github.com/xiandanin/magnetW/releases</span></p>
<p>欢迎 star</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203211.gif"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>收集整理一些微软windows和office激活工具</title>
    <url>/936.html</url>
    <content><![CDATA[<h2 id="HWIDGEN"><a href="#HWIDGEN" class="headerlink" title="HWIDGEN"></a>HWIDGEN</h2><p>是一款由国外 Nsane 论坛会员 s1ave77 制作的 Windows 10 数字权利激活工具，可以自动获取 Windows 10 数字许可证</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vemgtY24vaGVscC8xMjQ0MC93aW5kb3dzLTEwLWFjdGl2YXRl">数字许可证</span>（在 Windows 10 版本 1511 中称为数字授权）是 Windows 10 的一种激活方法，该方法不需要输入产品密钥。在同一台电脑上主要硬件（应该是 CPU 和主板）不变化的情况下，重新安装系统时无需再次输入密钥，系统会在自动连接到微软服务器进行激活。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203303.png"></p>
<p>下载地址</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWlvd2FyZXMuY29tL3Nob3d0aHJlYWQucGhwP3RpZD0yNDY=">https://www.aiowares.com/showthread.php?tid=246</span><br>百度网盘：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTExckpaSGFPRkpycE9kT0tYVzVWY3c=">https://pan.baidu.com/s/111rJZHaOFJrpOdOKXW5Vcw</span> 提取码：3o1c<br>阿里云盘：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvckRSalppcGV6S3M=">https://www.aliyundrive.com/s/rDRjZipezKs</span> 提取码：f99y</p>
<h2 id="离线-KMS-激活工具-HEU-KMS-Activator-v19-6-2-正式版"><a href="#离线-KMS-激活工具-HEU-KMS-Activator-v19-6-2-正式版" class="headerlink" title="离线 KMS 激活工具 HEU KMS Activator v19.6.2 正式版"></a>离线 KMS 激活工具 HEU KMS Activator v19.6.2 正式版</h2><p>支持 Office2010&#x2F;2013&#x2F;2016&#x2F;2019 、Windows10&#x2F;8.1&#x2F;8 等版本KMS激活<br>支持 Win10 数字许可证激活</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203343.png"></p>
<p>下载地址</p>
<p>百度网盘：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWdBR3FFSEVNalVhNElEeDR0WU5YYWc=">https://pan.baidu.com/s/1gAGqEHEMjUa4IDx4tYNXag</span> 提取码：vrfc<br>阿里云盘：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvUVV6VG9FUGlkQjc=">https://www.aliyundrive.com/s/QUzToEPidB7</span> 提取码: f99y</p>
<h2 id="Microsoft-激活脚本（MAS）："><a href="#Microsoft-激活脚本（MAS）：" class="headerlink" title="Microsoft 激活脚本（MAS）："></a>Microsoft 激活脚本（MAS）：</h2><p>一组脚本，用于使用 HWID &#x2F; KMS38 &#x2F;在线 KMS 激活方法激活 Microsoft 产品，重点是开放源代码，较少的防病毒检测和用户友好性。<br>原贴地址（需要登录）：<span class="exturl" data-url="aHR0cHM6Ly93d3cubnNhbmVmb3J1bXMuY29tL3RvcGljLzMxNjY2OC1taWNyb3NvZnQtYWN0aXZhdGlvbi1zY3JpcHRzLw==">https://www.nsaneforums.com/topic/316668-microsoft-activation-scripts/</span></p>
<p>下载地址</p>
<p>github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hc3NncmF2ZWwvTWljcm9zb2Z0LUFjdGl2YXRpb24tU2NyaXB0cw==">https://github.com/massgravel/Microsoft-Activation-Scripts</span><br>gitlab：<span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuY29tL21hc3NncmF2ZS9taWNyb3NvZnQtYWN0aXZhdGlvbi1zY3JpcHRz">https://gitlab.com/massgrave/microsoft-activation-scripts</span><br>百度网盘：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUpLRVlBZmdKajltc2ZXODFiaGJLanc=">https://pan.baidu.com/s/1JKEYAfgJj9msfW81bhbKjw</span> 提取码：21di<br>阿里云盘：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvWlU3YW03U3dWeDg=">https://www.aliyundrive.com/s/ZU7am7SwVx8</span> 提取码：f99y</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>office</tag>
        <tag>windows</tag>
        <tag>激活</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrcpy - 开源免费在电脑显示手机画面并控制手机的工具(投屏/录屏/免Root)</title>
    <url>/1813.html</url>
    <content><![CDATA[<h2 id="Scrcpy"><a href="#Scrcpy" class="headerlink" title="Scrcpy"></a>Scrcpy</h2><p>github: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlbnltb2JpbGUvc2NyY3B5">https://github.com/Genymobile/scrcpy</span></p>
<p>Scrcpy 可以将安卓手机的画面投屏到电脑桌面显示上并进行操控。简单地说，就是可以让你在电脑上控制手机！它支持鼠标控制、键盘输入、电脑剪切板复制粘贴、拖放文件传输到手机、以及拖放 APK 文件进行安装。跨平台支持 Win、Mac、Linux，可通过 USB 数据线或 WiFi 进行连接</p>
<p>Scrcpy 投屏效果非常理想，画面清晰流畅，基本无明显延迟，可以自定义视频码率，支持自动横屏，操作很灵敏，实用性非常的高</p>
<p>你可以方便地利用 Scrcpy 来测试 APP 应用、玩游戏、高效完成一些需要在手机上进行的复杂工作、更高效地办公；也能更方便地进行 Android 屏幕录像、截屏；甚至还能方便你上班时摸鱼划水。应用场景非常多，无论是开发者还是普通个人用户都相当的实用。如果经常有电脑上操控手机的需求，那么 Scrcpy 可谓是妥妥的神器！</p>
<p>Scrcpy 是一款命令行工具，没有图形界面，无需 ROOT 手机，也不需在手机上安装 APP，只需在系统设置里启用“USB 调试”( adb 调试) 即可</p>
<h2 id="几款-Scrcpy-GUI-工具"><a href="#几款-Scrcpy-GUI-工具" class="headerlink" title="几款 Scrcpy-GUI 工具"></a>几款 Scrcpy-GUI 工具</h2><p>Scrcpy 本身是个命令行软件，对很多人来说用起来并不是那么方便……。</p>
<p><strong>Scrcpy-GUI</strong></p>
<p>Scrcpy-GUI 是一个能专门为 Scrcpy 提供可视化的操作界面的外挂工具</p>
<p>Scrcpy-GUI 也是免费开源的，同时也能跨平台支持 Windows、macOS 和 Linux 等系统</p>
<p>github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RvbW90b2VzL3NjcmNweS1ndWk=">https://github.com/Tomotoes/scrcpy-gui</span></p>
<p>使用文档： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RvbW90b2VzL3NjcmNweS1ndWkvYmxvYi9tYXN0ZXIvUkVBRE1FLnpoX0NOLm1k">https://github.com/Tomotoes/scrcpy-gui/blob/master/README.zh_CN.md</span></p>
<p>Scrcpy-GUI 只是图形界面（它不包含 Scrcpy 本身），你需要先安装好 Scrcpy，之后就能使用 GUI 界面进行连接使用了</p>
<p><strong>Scrcpy_GUI 酷安@晨钟酱</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203423.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203440.png"></p>
<p>下载链接</p>
<p>百度云：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTRmOGZmQ2FwdlByVTJlTVd3QldLMEE=">https://pan.baidu.com/s/14f8ffCapvPrU2eMWwBWK0A</span> 提取码：64l0</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29vbGFway5jb20vZmVlZC8xNTk3MzkzOD9zaGFyZUtleT1ZV0U1TldGa01UZzFOMlkyTldVMU9ERmxPV1F+JnNoYXJlVWlkPTczOTk4MiZzaGFyZUZyb209Y29tLmNvb2xhcGsubWFya2V0XzEwLjAuMQ==">https://www.coolapk.com/feed/15973938?shareKey=YWE5NWFkMTg1N2Y2NWU1ODFlOWQ~&amp;shareUid=739982&amp;shareFrom=com.coolapk.market_10.0.1</span></p>
<p><strong>安卓投屏</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203457.png"></p>
<p>下载地址</p>
<p>蓝奏云：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGFuem91cy5jb20vYjAwOXZrOHpl">https://www.lanzous.com/b009vk8ze</span> 密码:gu2t</p>
<p>百度云：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUU0MUlJZ3lVMXZ2RVJraHhGaDBlR2c=">https://pan.baidu.com/s/1E41IIgyU1vvERkhxFh0eGg</span> 提取码：zfqd</p>
<p><strong>QtScrcpy</strong></p>
<p>开源地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhcnJ5LXJhbi9RdFNjcmNweQ==">https://github.com/barry-ran/QtScrcpy</span></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>安卓</tag>
        <tag>投屏</tag>
      </tags>
  </entry>
  <entry>
    <title>Snap2HTML – 生成 html 文件列表</title>
    <url>/1857.html</url>
    <content><![CDATA[<p>Snap2HTML 可以帮你将硬盘下的文件整理成一个 html 格式的树状视图列表，类似于 Windows 资源管理器，带有文件大小、日期、数量等常用信息，右上角还提供了搜索功能，方便你去整理或查找，或者是向基友们分享一下你的收藏</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203522.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102203541.png"></p>
<p>github地址 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jsdi1kYW4vU25hcDJIVE1M">https://github.com/rlv-dan/Snap2HTML</span></p>
<p>官网地址 <span class="exturl" data-url="aHR0cHM6Ly93d3cucmx2aXNpb24uY29tL3NuYXAyaHRtbC9hYm91dC5waHA=">https://www.rlvision.com/snap2html/about.php</span></p>
<p>百度云链接: <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVhWdmdNWDRUS1RPWlN2RWF5OHh2blE=">https://pan.baidu.com/s/1XVvgMX4TKTOZSvEay8xvnQ</span> 提取码: pbi3</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
  </entry>
  <entry>
    <title>VMware Workstation Pro v16.1.0 虚拟机软件及永久许可证</title>
    <url>/2015.html</url>
    <content><![CDATA[<p>VMware Workstation</p>
<p>官网下载地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VMware Workstation Pro 16.1.0 Build 17198959</span><br><span class="line">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.0-17198959.exe</span><br><span class="line"></span><br><span class="line">VMware Workstation Pro 16.0.0 Build 16894299</span><br><span class="line">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.0.0-16894299.exe</span><br><span class="line"></span><br><span class="line">VMware Workstation Pro 15.0.0 Build 10134415</span><br><span class="line">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.0.0-10134415.exe</span><br><span class="line"></span><br><span class="line">VMware Workstation Pro 14.1.3 Build 9474260</span><br><span class="line">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-14.1.3-9474260.exe</span><br><span class="line"></span><br><span class="line">VMware Workstation Pro 12.5.9 Build 7535481</span><br><span class="line">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.5.9-7535481.exe</span><br><span class="line"></span><br><span class="line">VMware Workstation 10.0.7 Build 2844087</span><br><span class="line">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-10.0.7-2844087.exe</span><br></pre></td></tr></table></figure>

<p>激活许可证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VMware Workstation Pro 16 激活许可证</span><br><span class="line">ZF3R0-FHED2-M80TY-8QYGC-NPKYF</span><br><span class="line">YF390-0HF8P-M81RQ-2DXQE-M2UT6</span><br><span class="line">ZF71R-DMX85-08DQY-8YMNC-PPHV8</span><br><span class="line"></span><br><span class="line">VMware Workstation Pro 15 激活许可证</span><br><span class="line">UY758-0RXEQ-M81WP-8ZM7Z-Y3HDA</span><br><span class="line">VF750-4MX5Q-488DQ-9WZE9-ZY2D6</span><br><span class="line">UU54R-FVD91-488PP-7NNGC-ZFAX6</span><br><span class="line">YC74H-FGF92-081VZ-R5QNG-P6RY4</span><br><span class="line">YC34H-6WWDK-085MQ-JYPNX-NZRA2</span><br><span class="line">FG78K-0UZ15-085TQ-TZQXV-XV0CD</span><br><span class="line">ZA11U-DVY97-M81LP-4MNEZ-X3AW0</span><br><span class="line">YU102-44D86-48D2Z-Z4Q5C-MFAWD</span><br><span class="line">FC7D0-D1YDL-M8DXZ-CYPZE-P2AY6</span><br><span class="line"></span><br><span class="line">VMware Workstation Pro 14 激活许可证</span><br><span class="line">FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA</span><br><span class="line">CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD</span><br><span class="line"></span><br><span class="line">VMware Workstation Pro 12 激活许可证</span><br><span class="line">5A02H-AU243-TZJ49-GTC7K-3C61N</span><br><span class="line">VF5XA-FNDDJ-085GZ-4NXZ9-N20E6</span><br><span class="line">UC5MR-8NE16-H81WY-R7QGV-QG2D8</span><br><span class="line">ZG1WH-ATY96-H80QP-X7PEX-Y30V4</span><br><span class="line">AA3E0-0VDE1-0893Z-KGZ59-QGAVF</span><br><span class="line">ZC3TK-63GE6-481JY-WWW5T-Z7ATA</span><br><span class="line"></span><br><span class="line">VMware Workstation Pro 10 激活许可证</span><br><span class="line">1Z0G9-67285-FZG78-ZL3Q2-234JG</span><br><span class="line">4C4EK-89KDL-5ZFP9-1LA5P-2A0J0</span><br><span class="line">HY086-4T01N-CZ3U0-CV0QM-13DNU</span><br></pre></td></tr></table></figure>

<p>解锁安装 macos</p>
<p>Auto-Unlocker 支持 Pro 16：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bhb2xvLXByb2plY3RzL2F1dG8tdW5sb2NrZXIvcmVsZWFzZXM=">https://github.com/paolo-projects/auto-unlocker/releases</span></p>
<p>下载完成后，解压 Unlocker.zip 文件放置于 VMware 根目录，并选择以管理员身份运行 Unlocker.exe 文件</p>
<p>可能需要关闭VMware的一切服务，包括正在运行的VMware</p>
<p>下载地址：<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXB5VEM4OWtJVmpJREFvY01BWmJQNFE=">https://pan.baidu.com/s/1pyTC89kIVjIDAocMAZbP4Q</span><br>提取码：wqdy</p>
<p>unlocker<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RyRG9uay91bmxvY2tlcg==">https://github.com/DrDonk/unlocker</span></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>下载神器 Internet Download Manager 中文破解版</title>
    <url>/366.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cDovL3d3dy5pbnRlcm5ldGRvd25sb2FkbWFuYWdlci5jb20v">Internet Download Manager</span> (简称IDM)  是 Windows 平台老牌而功能强大的多线程下载工具，支持多媒体下载、自动捕获链接、自动识别文件名、静默下载、批量下载、计划下载任务、站点抓取、队列，支持IE, Opera, Firefox, Chrome等所有流行的浏览器，如果启用高级集成，则可以捕获和接管从任何程序的下载。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210130211514.jpg"></p>
<p>安装说明</p>
<p>下载完成后解压，运行安装程序，安装完就是注册版</p>
<p>配合插件使用</p>
<p>谷歌浏览器插件安装方法：找到你的 IMD 安装目录 注意是安装好后 找到 <code>IDMGCExt.crx</code> <code>IDMGCExt59.crx</code>2 个文件,<br>选择 IDMGCExt.crx 拖动到谷歌浏览器,如果装不上选择 IDMGCExt59.crx 能装上!</p>
<p>提醒：某些网盘无法使用 IDM 下载的解决办法：下载时，按住 Alt 键，再点击下载按钮就不会调用 IDM 了！</p>
<p>有能力的建议支持<span class="exturl" data-url="aHR0cHM6Ly9zZWN1cmUuaW50ZXJuZXRkb3dubG9hZG1hbmFnZXIuY29tL2J1eV9pZG0uaHRtbA==">正版</span></p>
<p>破解版下载地址</p>
<p>百度网盘：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU5RbW5xRUdBZkN1NDE2ekN3WC1BVEE=">https://pan.baidu.com/s/1NQmnqEGAfCu416zCwX-ATA</span> 提取码：wqdy<br>阿里云盘：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvQnJMajNSQVhKM3Y=">https://www.aliyundrive.com/s/BrLj3RAXJ3v</span> 提取码：f99y<br>TG：<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL3dxZHlfY2hhbm5lbC8zNg==">https://t.me/wqdy_channel/36</span></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>idm</tag>
      </tags>
  </entry>
  <entry>
    <title>常用软件及破解资源合集</title>
    <url>/691.html</url>
    <content><![CDATA[<p>部分破解软件可在<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL3dxZHlfY2hhbm5lbA==">TG频道</span>里下载</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>平台</th>
<th>版本</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://wqdy.top/366.html">Internet Download Manager</a></td>
<td>Win</td>
<td>6.38.16</td>
<td>下载工具</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU1MbkROS0EzWkJpWS14dVpDak1WX3c=">Eagle</span></td>
<td>Win&#x2F;Mac</td>
<td>1.8.2</td>
<td>图片管理工具</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly93aW5zY3AubmV0L2VuZy9kb2NzL2xhbmc6Y2hz">WinScp</span></td>
<td>Win</td>
<td>5.17.10</td>
<td>Windows 环境下开源图形化 SFTP 客户端</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cDovL3d3dy5jaHV5dS5tZS96aC1IYW5zL2luZGV4Lmh0bWw=">Dism++</span></td>
<td>Win</td>
<td>10.1.1001.10(2020-01-18)</td>
<td>系统优化备份工具</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUZKYWluSW5YaWd3SlhxR0tTaHhyQXc=">ADSafe</span></td>
<td>Win</td>
<td>5.1.921.1800</td>
<td>广告屏蔽工具</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVFZc0ZDY21iUnh5cHN2RVlza1pBdWc=">synergy</span> <span class="exturl" data-url="aHR0cHM6Ly9zeW1sZXNzLmNvbS9zeW5lcmd5">官网</span></td>
<td>Win</td>
<td>1.5.0-r2278</td>
<td>多台计算机之间共享你的鼠标和键盘</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMURwdVBzamlQeHRwYm5EUnZXZDNGalE=">Parallels Desktop</span></td>
<td>Mac</td>
<td>16.1.1</td>
<td>虚拟机</td>
</tr>
<tr>
<td><a href="https://wqdy.top/2015.html">VMware Workstation Pro</a></td>
<td>Win</td>
<td>16.1.0 Build 17198959</td>
<td>虚拟机</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly96aC5zbmlwYXN0ZS5jb20v">Snipaste</span></td>
<td>Win&#x2F;Mac</td>
<td>v2.5.6</td>
<td>截图工具</td>
</tr>
<tr>
<td><a href="https://wqdy.top/1966.html">百度网盘资源下载工具</a></td>
<td>Win</td>
<td></td>
<td>百度网盘资源下载工具合集</td>
</tr>
<tr>
<td><a href="https://wqdy.top/2021.html">Adobe Zii Mac – Universal Adobe CC Patcher</a></td>
<td>Mac</td>
<td>6.0.6</td>
<td>苹果Mac端Adobe软件通用破解工具</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsbGZpc2guY24v">Billfish</span></td>
<td>Win</td>
<td>v1.4.6.12</td>
<td>支持多种格式素材的管理工具</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXBRQjAxZ0xiM0pOVUw0dTlYS2dyeFE=">fiddler</span></td>
<td>Win</td>
<td>5.0</td>
<td>抓包工具</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2NyZWVudG9naWYuY29tLw==">ScreenToGif</span></td>
<td>Win</td>
<td>2.3.2</td>
<td>开源屏幕，摄像头和画板录像</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cDovL3BvdHBsYXllci5kYXVtLm5ldC8=">potplayer</span></td>
<td>Win</td>
<td></td>
<td>音视频播放器</td>
</tr>
</tbody></table>
<p>待整理</p>
<p>嬴政天下 Adobe 全家桶<br>视频剪辑<br>图片<br>录屏<br>fluent terminal<br>Mem Reduct</p>
<p>RaiDrive<br>typora<br>allavsoft 视频下载<br>Mobile Debug</p>
<p>MorphVOX Pro 变声器</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>Fixed 定位脱离 Viewport 的 bug</title>
    <url>/393.html</url>
    <content><![CDATA[<h3 id="Fixed-定位脱离-Viewport-的-bug"><a href="#Fixed-定位脱离-Viewport-的-bug" class="headerlink" title="Fixed 定位脱离 Viewport 的 bug"></a>Fixed 定位脱离 Viewport 的 bug</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.mid</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于声明 transfrom 值非 none 元素，其子元素中若存在 position: fixed 将以声明 transform 的最近祖先作为基准而定位，这是因为 transfrom 值非 none 的元素<span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy0yZC10cmFuc2Zvcm1zLyN0cmFuc2Zvcm0tcmVuZGVyaW5n">定义了一个局部坐标系统</span>，导致 postion: fixed 以此坐标系统计算布局。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-z-index 堆叠顺序</title>
    <url>/392.html</url>
    <content><![CDATA[<h3 id="9-3-2-堆叠顺序（z-index）"><a href="#9-3-2-堆叠顺序（z-index）" class="headerlink" title="9.3.2 堆叠顺序（z-index）"></a>9.3.2 堆叠顺序（z-index）</h3><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。加了定位的盒子，默认<strong>后来者居上</strong>， 后面的盒子会压住前面的盒子。</p>
<p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。</p>
<p><code>z-index</code> 的特性如下：</p>
<ol>
<li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上</li>
<li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong></li>
<li><strong>数字后面无单位</strong></li>
<li>只应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效</li>
<li><strong>层叠水平仅在直接父级层叠上下文中进行比较，即层叠上下文 A 中的子元素的层叠水平不会和另一个层叠上下文中的子元素进行比较</strong></li>
</ol>
<p><strong>层叠上下文（stacking context）</strong>：创建层叠上下文的元素自己会成为一个<code>参考对象</code></p>
<p><strong>层叠水平（stacking level）</strong></p>
<p><strong>层叠顺序（stacking order）</strong></p>
<p><strong>满足下面规则的元素将会构造出一个 Stacking Context 结构：</strong></p>
<ul>
<li><code>html</code> 根元素默认会创建层叠上下文</li>
<li><code>position</code>不为<code>static</code>且<code>z-index</code>不是 auto 的元素</li>
<li><code>display</code>为<code>flex</code>且<code>z-index</code>不是 auto 的元素</li>
<li><code>opacity</code>不等于 1</li>
<li><code>transform</code>不等于 none</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204249.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;me&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;you&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.me</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.you</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>you 在这里和 me 做比较，比较开始，首先 you 寻找参考对象，上一层 me 是吗？显然不是，因为 me 没有触发上面任一条件创建层叠上下文，所以继续往上寻找，找到 html。对于 me，也直接往上找到 html，所以这个例子里 me 和 you 是在以 html 为参考对象进行比较，<strong>换句话说就是在 html 创建的层叠上下文环境中进行比较</strong>！然后按照七阶图，负值 index 在 block 元素之下！所以 me 在 you 之上。</p>
<p>然后我们修改下 me，加个<code>z-index:0;</code> 按照之前的思路演算一遍，you 的参考对象变成 me 了！而 me 仍然是 html，然后 me 和 html 再做比较，me 参考对象是 html，html 的参考对象是 html，OK，在同一上下文了，me 明显高于 html，所以 you 高于 me。</p>
<p>参考链接</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNTM1NDE3NT91dG1fc291cmNlPXRhZy1uZXdlc3Q=">元素上下层叠关系总结</span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9iZmdpcy9wLzU0NDA5NTYuaHRtbA=="> 北风吹雪：不起眼的 z-index 却能牵扯出这么大的学问</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhhbmd4aW54dS5jb20vd29yZHByZXNzLzIwMTYvMDEvdW5kZXJzdGFuZC1jc3Mtc3RhY2tpbmctY29udGV4dC1vcmRlci16LWluZGV4Lw==">张鑫旭:深入理解 CSS 中的层叠上下文和层叠顺序</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础</title>
    <url>/1616.html</url>
    <content><![CDATA[<h2 id="1-CSS-初识"><a href="#1-CSS-初识" class="headerlink" title="1.CSS 初识"></a>1.CSS 初识</h2><ul>
<li><p>概念：CSS(Cascading Style Sheets) ，通常称为 CSS 样式表或层叠样式表（级联样式表）</p>
</li>
<li><p>作用：</p>
<ul>
<li>主要用于<strong>设置</strong> HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及<strong>版面的布局和外观显示样式。</strong></li>
<li>CSS 以 HTML 为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</li>
</ul>
</li>
</ul>
<h2 id="2-引入-CSS-样式表（书写位置）"><a href="#2-引入-CSS-样式表（书写位置）" class="headerlink" title="2. 引入 CSS 样式表（书写位置）"></a>2. 引入 CSS 样式表（书写位置）</h2><h3 id="2-1-行内式（内联样式）"><a href="#2-1-行内式（内联样式）" class="headerlink" title="2.1 行内式（内联样式）"></a>2.1 行内式（内联样式）</h3><ul>
<li>又称行内样式、行间样式。是通过标签的 style 属性来设置元素的样式</li>
</ul>
<ul>
<li>其基本语法格式如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上任何 HTML 标签都拥有 style 属性，用来设置行内式</p>
<ul>
<li>案例：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">color</span>: red; <span class="attribute">font-size</span>: <span class="number">12px</span>;&quot;&gt;青春不常在，抓紧谈恋爱&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<ul>
<li>style 其实就是标签的属性</li>
<li>样式属性和值中间是 <code>:</code></li>
<li>多组属性值之间用 <code>;</code> 隔开</li>
<li>只能控制当前的标签和以及嵌套在其中的子标签，造成代码冗余</li>
</ul>
</li>
<li>缺点：<ul>
<li>没有实现样式和结构相分离</li>
</ul>
</li>
</ul>
<h3 id="2-2-内部样式表（内嵌样式表）"><a href="#2-2-内部样式表（内嵌样式表）" class="headerlink" title="2.2 内部样式表（内嵌样式表）"></a>2.2 内部样式表（内嵌样式表）</h3><ul>
<li><p>又称内嵌式，是将 CSS 代码集中写在 HTML 文档的 head 头部标签中，并且用 style 标签定义</p>
</li>
<li><p>其基本语法格式如下：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<ul>
<li>style 标签一般位于 head 标签中</li>
<li>type&#x3D;”text&#x2F;css” 在 html5 中可以省略</li>
<li>只能控制当前的页面</li>
</ul>
</li>
<li><p>缺点：</p>
<p>没有彻底分离</p>
</li>
</ul>
<h3 id="2-3-外部样式表（外链式）"><a href="#2-3-外部样式表（外链式）" class="headerlink" title="2.3 外部样式表（外链式）"></a>2.3 外部样式表（外链式）</h3><ul>
<li><p>又称链入式，是将所有的样式放在一个或多个以 .CSS 为扩展名的外部样式表文件中，通过 link 标签将外部样式表文件链接到 HTML 文档中</p>
</li>
<li><p>其基本语法格式如下：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<ul>
<li>link 是个单标签</li>
<li>link 标签需要放在 head 头部标签中，并且指定 link 标签的三个属性</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>rel</td>
<td align="left">定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</td>
</tr>
<tr>
<td>type</td>
<td align="left">定义所链接文档的类型，在这里需要指定为“text&#x2F;CSS”，表示链接的外部文件为 CSS 样式表。我们都可以省略</td>
</tr>
<tr>
<td>href</td>
<td align="left">定义所链接外部样式表文件的 URL，可以是相对路径，也可以是绝对路径。</td>
</tr>
</tbody></table>
<h3 id="2-4-三种样式表总结（位置）"><a href="#2-4-三种样式表总结（位置）" class="headerlink" title="2.4 三种样式表总结（位置）"></a>2.4 三种样式表总结（位置）</h3><table>
<thead>
<tr>
<th>样式表</th>
<th>优点</th>
<th>缺点</th>
<th>使用情况</th>
<th>控制范围</th>
</tr>
</thead>
<tbody><tr>
<td>行内样式表</td>
<td>书写方便，权重高</td>
<td>没有实现样式和结构相分离</td>
<td>较少</td>
<td>控制一个标签（少）</td>
</tr>
<tr>
<td>内部样式表</td>
<td>部分结构和样式相分离</td>
<td>没有彻底分离</td>
<td>较多</td>
<td>控制一个页面（中）</td>
</tr>
<tr>
<td>外部样式表</td>
<td>完全实现结构和样式相分离</td>
<td>需要引入</td>
<td>最多，强烈推荐</td>
<td>控制整个站点（多）</td>
</tr>
</tbody></table>
<h2 id="3-CSS-样式规则"><a href="#3-CSS-样式规则" class="headerlink" title="3. CSS 样式规则"></a>3. CSS 样式规则</h2><ol>
<li>选择器用于指定 CSS 样式作用的 HTML 标签，花括号内是对该对象设置的具体样式。</li>
<li>属性和属性值以“键值对”的形式出现。</li>
<li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</li>
<li>属性和属性值之间用英文 <code>:</code> 连接。</li>
<li>多个“键值对”之间用英文 <code>;</code> 进行区分。</li>
</ol>
<h2 id="4-CSS-选择器（重点）"><a href="#4-CSS-选择器（重点）" class="headerlink" title="4. CSS 选择器（重点）"></a>4. CSS 选择器（重点）</h2><h3 id="4-1-CSS-基础选择器"><a href="#4-1-CSS-基础选择器" class="headerlink" title="4.1 CSS 基础选择器"></a>4.1 CSS 基础选择器</h3><h4 id="4-1-1-标签选择器"><a href="#4-1-1-标签选择器" class="headerlink" title="4.1.1 标签选择器"></a>4.1.1 标签选择器</h4><ul>
<li><p>概念：</p>
<p>标签选择器（元素选择器）是指用<strong>HTML 标签名</strong>称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</p>
</li>
<li><p>语法：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-类选择器"><a href="#4-1-2-类选择器" class="headerlink" title="4.1.2 类选择器"></a>4.1.2 类选择器</h4><p>类选择器使用 <code>.</code>（英文点号）进行标识，后面紧跟类名.</p>
<ul>
<li><p>语法：</p>
<ul>
<li>类名选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.类名  &#123;</span><br><span class="line">    属性1:属性值1;</span><br><span class="line">    属性2:属性值2;</span><br><span class="line">    属性3:属性值3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;类名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优点：</p>
<ul>
<li>可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>可以使用字母，数字，<code>-</code> ，<code>_</code></li>
<li>必须以字母开头，区分大小写，不要纯数字、中文等命名</li>
<li>一个 class 可以出现多次，一个元素可以有多个 class，<strong>各个类名中间用空格隔开</strong></li>
</ul>
</li>
</ul>
<h4 id="4-1-3-id-选择器"><a href="#4-1-3-id-选择器" class="headerlink" title="4.1.3 id 选择器"></a>4.1.3 id 选择器</h4><p>id 选择器使用 <code>#</code> 进行标识，后面紧跟 id 名</p>
<ul>
<li><p>其基本语法格式如下：</p>
</li>
<li><p>id 选择器</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#id名 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意</p>
<ul>
<li>必须以字母开头</li>
<li>区分大小写</li>
<li>只可出现一次</li>
</ul>
</li>
</ul>
<h4 id="4-1-4-通配符选择器"><a href="#4-1-4-通配符选择器" class="headerlink" title="4.1.4 通配符选择器"></a>4.1.4 通配符选择器</h4><p>通配符选择器用 <code>*</code> 号表示，选择所有的标签。</p>
<ul>
<li>其基本语法格式如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>

<p>例如下面的代码，使用通配符选择器定义 CSS 样式，清除所有 HTML 标记的默认边距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>; <span class="comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<p>会匹配页面所有的元素，降低页面响应速度，不建议随便使用</p>
</li>
</ul>
<h3 id="4-2-CSS-复合选择器"><a href="#4-2-CSS-复合选择器" class="headerlink" title="4.2 CSS 复合选择器"></a>4.2 CSS 复合选择器</h3><h4 id="4-2-1-后代选择器（重点）"><a href="#4-2-1-后代选择器（重点）" class="headerlink" title="4.2.1 后代选择器（重点）"></a>4.2.1 后代选择器（重点）</h4><ul>
<li>后代选择器又称为包含选择器（标签有<strong>直接或间接嵌套</strong>关系，可隔代选择）</li>
<li>中间用 <code>空格</code> 连接</li>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">父级 子级 &#123;</span><br><span class="line">  属性: 属性值;</span><br><span class="line">  属性: 属性值;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-子元素-子代-选择器"><a href="#4-2-2-子元素-子代-选择器" class="headerlink" title="4.2.2 子元素(子代)选择器"></a>4.2.2 子元素(子代)选择器</h4><ul>
<li>子元素选择器只能选择作为某元素**子元素(亲儿子)**的元素（直接嵌套，不能隔代）。</li>
<li>其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 <code>&gt;</code> 进行连接</li>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &gt; <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>白话：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">比如:  .demo &gt; h3 &#123;<span class="attribute">color</span>: red;&#125;   说明 <span class="selector-tag">h3</span> 一定是 demo 亲儿子  demo 元素包含着<span class="selector-tag">h3</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-交集选择器"><a href="#4-2-3-交集选择器" class="headerlink" title="4.2.3 交集选择器"></a>4.2.3 交集选择器</h4><ul>
<li><p>由两个选择器构成，找到的标签必须满足：既有标签一的特点，也有标签二的特点。</p>
</li>
<li><p>两个选择器之间 <strong>不能有空格</strong>，如 h3.special。</p>
</li>
</ul>
<p><strong>记忆技巧：</strong></p>
<p>交集选择器 是 并且的意思。 即…又…的意思</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">比如: p.one 选择的是类名为 .one 的 p 标签;</span><br></pre></td></tr></table></figure>

<p>用的相对来说比较少，不太建议使用。</p>
<h4 id="4-2-4-并集选择器（重点）"><a href="#4-2-4-并集选择器（重点）" class="headerlink" title="4.2.4 并集选择器（重点）"></a>4.2.4 并集选择器（重点）</h4><ul>
<li><p>并集选择器（CSS 选择器分组）是各个选择器通过<code>,</code>连接而成的，通常用于集体声明。</p>
</li>
<li><p>任何形式的选择器（包括标签选择器、class 类选择器 id 选择器等），都可以作为并集选择器的一部分。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">比如  <span class="selector-class">.one</span>, <span class="selector-tag">p</span> , <span class="selector-id">#test</span> &#123;<span class="attribute">color</span>: <span class="number">#F00</span>;&#125;</span><br><span class="line">表示   <span class="selector-class">.one</span> 和 <span class="selector-tag">p</span> 和 <span class="selector-id">#test</span> 这三个选择器都会执行颜色为红色</span><br><span class="line">通常用于集体声明</span><br></pre></td></tr></table></figure>

<h4 id="4-2-5-伪类选择器"><a href="#4-2-5-伪类选择器" class="headerlink" title="4.2.5 伪类选择器"></a>4.2.5 伪类选择器</h4><p>伪类选择器实质上是让设计师可以根据元素特定的状态，设置不同的视觉效果。具体有<code>:link</code>、<code>:visited</code>、<code>:hover</code>、<code>:active</code>、<code>:focus</code>、<code>:focus-within</code>、<code>:target</code>、<code>:root</code>和<code>:checked</code>。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>a:link</td>
<td></td>
<td>用于设置链接初始状态时的样式</td>
</tr>
<tr>
<td>a:visited</td>
<td></td>
<td>用于设置链接被点击过后的样式 设置 font-size 不起作用</td>
</tr>
<tr>
<td>a:hover</td>
<td></td>
<td>用于设置鼠标悬停在链接上方时，链接的样式</td>
</tr>
<tr>
<td>a:active</td>
<td></td>
<td>用于设置鼠标按键按下，但未释放时，链接的样式</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>:first-child</td>
<td>li:first-child</td>
<td>选择属于其父元素的第一个子元素(不一定是 li 元素)</td>
</tr>
<tr>
<td>:last-child</td>
<td>li:last-child</td>
<td>选择属于其父元素的最后一个子元素</td>
</tr>
<tr>
<td>:nth-child(2)</td>
<td>li:nth-child(2)</td>
<td>选择属于其父元素的第二个子元素</td>
</tr>
<tr>
<td>:nth-child(even)</td>
<td>li:nth-child(even)</td>
<td>选择属于其父元素的偶数项的子元素</td>
</tr>
<tr>
<td>:nth-child(3n+1)</td>
<td>li:nth-child(3n+1)</td>
<td>选择属于其父元素的正向 3n+1 项(n 从 0 开始)的子元素</td>
</tr>
<tr>
<td>nth-last-child(3n+1)</td>
<td>li:nth-last-child(-n+5)</td>
<td>选择属于其父元素的反向-n+5 项(n 从 0 开始)的子元素<br>(即选择最后五个 li 元素)</td>
</tr>
<tr>
<td>:only-child</td>
<td>li:only-child</td>
<td>选择属于其父元素的唯一子元素的每个 <code>&lt;li&gt;</code> 元素</td>
</tr>
<tr>
<td>:only-of-type</td>
<td>li:only-of-type</td>
<td>选择属于其父元素唯一 <code>&lt;li&gt;</code> 元素的每个 <code>&lt;li&gt;</code> 元素</td>
</tr>
<tr>
<td>:first-of-type</td>
<td>li:first-of-type</td>
<td>选择属于其父元素的第一个<code>&lt;li&gt;</code> 元素</td>
</tr>
<tr>
<td>:last-of-type</td>
<td>li:last-of-type</td>
<td>选择属于其父元素的最后一个 <code>&lt;li&gt;</code> 元素</td>
</tr>
<tr>
<td>:nth-of-type(2)</td>
<td>li:nth-of-type(2)</td>
<td>选择属于其父元素的第二个 <code>&lt;li&gt;</code> 元素</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>:enabled</td>
<td>input:enabled</td>
<td>选择每个启用的 <code>&lt;input&gt;</code> 元素</td>
</tr>
<tr>
<td>:disabled</td>
<td>input:disabled</td>
<td>选择每个禁用的 <code>input&gt;</code> 元素</td>
</tr>
<tr>
<td>:checked</td>
<td>input:checked</td>
<td>选择每个被选中的 <code>&lt;input&gt;</code> 元素</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>:focus</td>
<td></td>
<td>用于设置元素处于 focus 状态下的样式。</td>
</tr>
<tr>
<td>:focus-within</td>
<td></td>
<td>用于设置当子元素处于 focus 状态时，该元素的样式。</td>
</tr>
<tr>
<td>:empty</td>
<td>p:empty</td>
<td>选择没有子元素的每个 <code>&lt;p&gt;</code> 元素（包括文本节点）</td>
</tr>
<tr>
<td>:target</td>
<td><code>#news:target</code></td>
<td>选择当前活动的 <code>#news</code> 元素</td>
</tr>
<tr>
<td>:root</td>
<td></td>
<td>选择文档的根元素</td>
</tr>
<tr>
<td>:not(p)</td>
<td>li:not(:last-of-type)</td>
<td>选择最后一个 li 之外其他所有 li</td>
</tr>
<tr>
<td>:placeholder-shown</td>
<td></td>
<td>用于设置元素 placeholder 显示时的样式</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>伪元素</td>
<td></td>
<td></td>
</tr>
<tr>
<td>::selection</td>
<td>::selection</td>
<td>选择被用户选取的元素部分</td>
</tr>
<tr>
<td>::first-letter</td>
<td>p::first-letter</td>
<td>选择每个 <code>&lt;p&gt;</code> 元素的首字母。</td>
</tr>
<tr>
<td>::first-line</td>
<td>p::first-line</td>
<td>选择每个 <code>&lt;p&gt;</code> 元素的首行</td>
</tr>
<tr>
<td>::placeholder</td>
<td>input::placeholder</td>
<td>选择 input 内部的占位符，给其设置样式</td>
</tr>
<tr>
<td>::before</td>
<td>div::before</td>
<td>在每个 <code>&lt;div&gt;</code> 元素的内容之前插入内容</td>
</tr>
<tr>
<td>::after</td>
<td>div::after</td>
<td>在每个 <code>&lt;div&gt;</code> 元素的内容之后插入内容</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>属性选择器</td>
<td></td>
<td></td>
</tr>
<tr>
<td>[attribute]</td>
<td>[disabled]</td>
<td>选择带有 disabled 属性所有元素。</td>
</tr>
<tr>
<td>[attribute&#x3D;value]</td>
<td>[target&#x3D;_blank]</td>
<td>选择 target&#x3D;”_blank” 的所有元素。</td>
</tr>
<tr>
<td>[attribute~&#x3D;value]</td>
<td>[title~&#x3D;flower]</td>
<td>选择 title 属性包含单词 “flower” 的所有元素。</td>
</tr>
<tr>
<td>[attribute|&#x3D;value]</td>
<td>[lang|&#x3D;en]</td>
<td>选择 lang 属性值以 “en” 开头后续以-分隔的所有元素。</td>
</tr>
<tr>
<td>:lang(language)</td>
<td>p:lang(it)</td>
<td>选择带有以 “it” 开头的 lang 属性值的每个 <code>&lt;p&gt;</code> 元素</td>
</tr>
<tr>
<td>[attribute^&#x3D;value]</td>
<td>a[src^&#x3D;”https”]</td>
<td>选择其 src 属性值以 “https” 开头的每个 <code>&lt;a&gt;</code> 元素</td>
</tr>
<tr>
<td>[attribute$&#x3D;value]</td>
<td>a[src$&#x3D;”.pdf”]</td>
<td>选择其 src 属性以 “.pdf” 结尾的所有 <code>&lt;a&gt;</code> 元素</td>
</tr>
<tr>
<td>[attribute*&#x3D;value]</td>
<td>a[src*&#x3D;”abc”]</td>
<td>选择其 src 属性中包含 “abc” 子串的每个 <code>&lt;a&gt;</code> 元素</td>
</tr>
</tbody></table>
<p><code>#nav == [id=nav]</code> 选择 id&#x3D;nav 的所有元素</p>
<blockquote>
<p><code>li:last-child</code> 是选择 li 元素的父元素下的最后一个子元素，不一定是 li</p>
<p><code>li:last-of-type</code> 是选择 li 元素的父元素的最后一个 li 元素</p>
<p><code>li:not(:last-of-type)</code> 选择最后一个 li 之外其他所有 li</p>
<p><code>::before</code> <code>::after</code> 必须指定 content 属性，否则无效；生成的伪元素默认是行内样式；生成的伪元素无法被找到，更不能被 hover 等；一般用来清除浮动(只有::after 可以)或添加小图标</p>
</blockquote>
<p>关于单冒号和双冒号问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于:before与::before的区别</span><br><span class="line">:before是css2中伪元素的写法，但是呢，在css3中严格规定，伪类采用单冒号，伪元素需要使用双冒号。为了兼容旧的代码，当浏览器碰到了:before之后，会自动的转换成::before。</span><br><span class="line">如果需要兼容老的浏览器，比如IE678，推荐使用:before</span><br><span class="line">如果不需要兼容老的浏览器，比如移动端，推荐使用::before</span><br></pre></td></tr></table></figure>

<h4 id="链接伪类注意"><a href="#链接伪类注意" class="headerlink" title="链接伪类注意"></a>链接伪类注意</h4><ul>
<li>写的时候，他们的顺序尽量不要颠倒 按照 lvha 的顺序。否则可能引起错误。</li>
<li>记忆法<ul>
<li><strong>l</strong>o<strong>v</strong>e <strong>ha</strong>te 爱上了讨厌</li>
<li>**lv **包包 非常 <strong>ha</strong>o</li>
</ul>
</li>
<li>因为叫链接伪类，所以都是 利用交集选择器 a:link a:hover</li>
<li>因为 a 链接浏览器具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</li>
<li>实际工作开发中，我们很少写全四个状态，一般我们写法如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line">  <span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-CSS-属性"><a href="#5-CSS-属性" class="headerlink" title="5. CSS 属性"></a>5. CSS 属性</h2><h3 id="5-1-font-字体"><a href="#5-1-font-字体" class="headerlink" title="5.1 font:字体"></a>5.1 font:字体</h3><h4 id="5-1-1-font-size-大小"><a href="#5-1-1-font-size-大小" class="headerlink" title="5.1.1 font-size:大小"></a>5.1.1 font-size:大小</h4><ul>
<li><p>作用：</p>
<p>font-size 属性用于设置字号</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>谷歌浏览器默认的文字大小为 16px，最小为 12px。</li>
<li>em、百分比 相对父元素大小</li>
<li>设置 body 默认字体大小为 100%，其他文字大小以此为基础设置百分比值</li>
</ul>
</blockquote>
<h4 id="5-1-2-font-family-字体"><a href="#5-1-2-font-family-字体" class="headerlink" title="5.1.2 font-family:字体"></a>5.1.2 font-family:字体</h4><ul>
<li><p>作用：</p>
<p>font-family 属性用于设置哪一种字体。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p&#123; font-family:&quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以同时指定多个字体，<strong>中间以逗号隔开</strong>，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体， 如果都没有，则以我们电脑默认的字体为准。</li>
<li>中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</li>
<li>如果字体名中包含空格、#、$ 等符号，则该字体必须加英文状态下的单引号或双引号，例如 font-family: “Times New Roman”;。</li>
<li>尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p&#123;font-family: Arial,&quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CSS Unicode 字体</p>
<ul>
<li><p>为什么使用 Unicode 字体</p>
</li>
<li><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</p>
</li>
<li><p>xp 系统不支持 类似微软雅黑的中文。</p>
</li>
</ul>
<p>解决：</p>
<ul>
<li><p>方案一： 你可以使用英文来替代。 比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。</p>
</li>
<li><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: &quot;\5FAE\8F6F\96C5\9ED1&quot;;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure></li>
</ul>
<table>
<thead>
<tr>
<th>字体名称</th>
<th>英文名称</th>
<th>Unicode 编码</th>
</tr>
</thead>
<tbody><tr>
<td>宋体</td>
<td>SimSun</td>
<td>\5B8B\4F53</td>
</tr>
<tr>
<td>新宋体</td>
<td>NSimSun</td>
<td>\65B0\5B8B\4F53</td>
</tr>
<tr>
<td>黑体</td>
<td>SimHei</td>
<td>\9ED1\4F53</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Microsoft YaHei</td>
<td>\5FAE\8F6F\96C5\9ED1</td>
</tr>
<tr>
<td>楷体_GB2312</td>
<td>KaiTi_GB2312</td>
<td>\6977\4F53_GB2312</td>
</tr>
<tr>
<td>隶书</td>
<td>LiSu</td>
<td>\96B6\4E66</td>
</tr>
<tr>
<td>幼园</td>
<td>YouYuan</td>
<td>\5E7C\5706</td>
</tr>
<tr>
<td>华文细黑</td>
<td>STXihei</td>
<td>\534E\6587\7EC6\9ED1</td>
</tr>
<tr>
<td>细明体</td>
<td>MingLiU</td>
<td>\7EC6\660E\4F53</td>
</tr>
<tr>
<td>新细明体</td>
<td>PMingLiU</td>
<td>\65B0\7EC6\660E\4F53</td>
</tr>
</tbody></table>
</blockquote>
<h4 id="5-1-3-font-weight-字体粗细"><a href="#5-1-3-font-weight-字体粗细" class="headerlink" title="5.1.3 font-weight:字体粗细"></a>5.1.3 font-weight:字体粗细</h4><ul>
<li>在 html 中如何将字体加粗我们可以用标签来实现<ul>
<li>使用 b 和 strong 标签是文本加粗。</li>
</ul>
</li>
<li>可以使用 CSS 来实现，但是 CSS 是没有语义的。</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td align="left">默认值（不加粗的）</td>
</tr>
<tr>
<td>bold</td>
<td align="left">定义粗体（加粗的）</td>
</tr>
<tr>
<td>100~900</td>
<td align="left">400 等同于 normal，而 700 等同于 bold 我们重点记住这句话</td>
</tr>
</tbody></table>
<h4 id="5-1-4-font-style-字体风格"><a href="#5-1-4-font-style-字体风格" class="headerlink" title="5.1.4 font-style:字体风格"></a>5.1.4 font-style:字体风格</h4><ul>
<li>在 html 中如何将字体倾斜我们可以用标签来实现<ul>
<li>字体倾斜除了用 i 和 em 标签，</li>
</ul>
</li>
<li>可以使用 CSS 来实现，但是 CSS 是没有语义的</li>
</ul>
<p>font-style 属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td align="left">默认值，浏览器会显示标准的字体样式 font-style: normal;</td>
</tr>
<tr>
<td>italic</td>
<td align="left">浏览器会显示斜体的字体样式。</td>
</tr>
</tbody></table>
<h4 id="5-1-5-line-height-文字行高"><a href="#5-1-5-line-height-文字行高" class="headerlink" title="5.1.5 line-height:文字行高"></a>5.1.5 line-height:文字行高</h4><ul>
<li><p>作用：</p>
<p>设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p>
<p>使用行高实现<strong>单行文字垂直居中</strong></p>
</li>
<li><p>单位：</p>
<ul>
<li>line-height 常用的属性值单位有三种，分别为像素 px，相对值 em 和百分比%，实际工作中使用最多的是像素 px</li>
</ul>
</li>
</ul>
<blockquote>
<p>技巧：</p>
<ul>
<li>一般情况下，行距比字号大 7.8 像素左右就可以了。line-height: 24px;</li>
<li>文字垂直居中就设置行高等于他外部元素的高度</li>
<li>line-height 不要代替 height ，height 不写 line-height 会把盒子撑起来，不建议这样， height 该写也得写</li>
</ul>
</blockquote>
<p><strong>行高测量</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102183819.png"></p>
<p><strong>行高和高度的三种关系</strong></p>
<ul>
<li>如果 行高 等 高度 文字会 垂直居中</li>
<li>如果行高 大于 高度 文字会 偏下</li>
<li>如果行高小于高度 文字会 偏上</li>
</ul>
<p><strong>300%、3em、3 之间区别</strong></p>
<ul>
<li>300% 先计算后继承</li>
<li>3 先继承后计算</li>
<li>3em</li>
</ul>
<h4 id="5-1-6-font-综合设置字体样式-重点"><a href="#5-1-6-font-综合设置字体样式-重点" class="headerlink" title="5.1.6 font: 综合设置字体样式 (重点)"></a>5.1.6 font: 综合设置字体样式 (重点)</h4><p>font 属性用于对字体样式进行综合设置</p>
<ul>
<li>基本语法格式如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: [&lt;font-style&gt;||&lt;font-weight&gt;]?&lt;font-size&gt;[/&lt;line-height&gt;]?&lt;font-family&gt;(必不可少，否则无效)</span><br><span class="line"></span><br><span class="line">font:italic bold <span class="number">20px</span>/<span class="number">2</span> arial,serif;</span><br><span class="line">//表示<span class="attribute">font-style</span>:italic  font-weight:bold    font-size:<span class="number">20px</span>  line-height:<span class="number">2</span>   font-family:arial,serif</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<ul>
<li>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以<strong>空格</strong>隔开。</li>
<li>其中不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用。</li>
<li>line-height 值如果不写，浏览器会默认添加 <code>normal</code></li>
</ul>
</li>
</ul>
<h3 id="5-2-text-属性"><a href="#5-2-text-属性" class="headerlink" title="5.2 text 属性"></a>5.2 text 属性</h3><h4 id="5-2-1-color-文本颜色"><a href="#5-2-1-color-文本颜色" class="headerlink" title="5.2.1 color:文本颜色"></a>5.2.1 color:文本颜色</h4><ul>
<li><p>作用：</p>
<p>color 属性用于定义文本的颜色，</p>
</li>
<li><p>其取值方式有如下 3 种：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">表示表示</th>
<th align="left">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">预定义的颜色值</td>
<td align="left">red，green，blue 等等</td>
</tr>
<tr>
<td align="left">十六进制</td>
<td align="left">#FF0000，#FF6600，#29D794</td>
</tr>
<tr>
<td align="left">RGB 代码</td>
<td align="left">rgb(255,0,0)或 rgb(100%,0%,0%)<br />rgba(255,0,0,1)1 表示不透明，0 表示全透明<br />全透明也可以用 color：transparent</td>
</tr>
</tbody></table>
<ul>
<li><p>注意</p>
<p>我们实际工作中， 用 16 进制的写法是最多的，而且我们更喜欢简写方式比如 #f00 代表红色</p>
</li>
</ul>
<h4 id="5-2-2-text-align-文本水平对齐方式"><a href="#5-2-2-text-align-文本水平对齐方式" class="headerlink" title="5.2.2 text-align:文本水平对齐方式"></a>5.2.2 text-align:文本水平对齐方式</h4><ul>
<li><p>作用：</p>
<p>text-align 属性用于设置当前这个标签内部的 <strong>内容</strong>（可以是文字 、行内标签、行内块标签）的水平对齐方式</p>
</li>
<li><p>其可用属性值如下：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td align="center">左对齐（默认值）</td>
</tr>
<tr>
<td>right</td>
<td align="center">右对齐</td>
</tr>
<tr>
<td>center</td>
<td align="center">居中对齐</td>
</tr>
<tr>
<td>justify</td>
<td align="center">两端对齐</td>
</tr>
</tbody></table>
<ul>
<li><p>注意：</p>
<p>是让盒子里面的 <strong>内容水平居中</strong> ， 而不是让盒子居中对齐</p>
</li>
</ul>
<h4 id="5-2-3-text-indent-首行缩进"><a href="#5-2-3-text-indent-首行缩进" class="headerlink" title="5.2.3 text-indent:首行缩进"></a>5.2.3 text-indent:首行缩进</h4><ul>
<li><p>作用：</p>
<p>text-indent 属性用于设置首行文本的缩进，</p>
</li>
<li><p>属性值</p>
<ul>
<li>其属性值可为不同单位的数值、em 字符宽度的倍数、或相对于父元素宽度的百分比%，允许使用负值（设置成很大的负值可以用来隐藏文字）</li>
<li>建议使用 em 作为设置单位。</li>
<li>可以继承</li>
</ul>
</li>
</ul>
<p><strong>1em 就是一个字的宽度 如果是汉字的段落， 1em 就是一个汉字的宽度</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/*行间距*/</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="comment">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span></span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-4-text-decoration-文本的装饰"><a href="#5-2-4-text-decoration-文本的装饰" class="headerlink" title="5.2.4 text-decoration 文本的装饰"></a>5.2.4 text-decoration 文本的装饰</h4><p>text-decoration 通常我们用于给链接修改装饰效果</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认。定义标准的文本。 取消下划线（最常用）</td>
</tr>
<tr>
<td>underline</td>
<td>定义文本下的一条线。下划线 也是我们链接自带的（常用）</td>
</tr>
<tr>
<td>overline</td>
<td>定义文本上的一条线。（不用）</td>
</tr>
<tr>
<td>line-through</td>
<td>定义穿过文本的一条线。（不常用）</td>
</tr>
</tbody></table>
<blockquote>
<p>多个属性值写在同一个 text-decoration 里会叠加<br>多个属性值写在不同的 text-decoration 里，<strong>属性不会累加</strong>，优先级高的会完全取代优先级低的</p>
</blockquote>
<h4 id="5-2-5-CSS-外观属性总结"><a href="#5-2-5-CSS-外观属性总结" class="headerlink" title="5.2.5 CSS 外观属性总结"></a>5.2.5 CSS 外观属性总结</h4><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">表示</th>
<th align="left">注意点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">color</td>
<td align="left">颜色</td>
<td align="left">我们通常用 十六进制 比如 而且是简写形式 #fff</td>
</tr>
<tr>
<td align="left">line-height</td>
<td align="left">行高</td>
<td align="left">控制行与行之间的距离</td>
</tr>
<tr>
<td align="left">text-align</td>
<td align="left">水平对齐</td>
<td align="left">可以设定文字水平的对齐方式</td>
</tr>
<tr>
<td align="left">text-indent</td>
<td align="left">首行缩进</td>
<td align="left">通常我们用于段落首行缩进 2 个字的距离 text-indent: 2em;</td>
</tr>
<tr>
<td align="left">text-decoration</td>
<td align="left">文本修饰</td>
<td align="left">记住 添加 下划线 underline 取消下划线 none</td>
</tr>
</tbody></table>
<h3 id="5-3-背景-background-属性"><a href="#5-3-背景-background-属性" class="headerlink" title="5.3 背景(background)属性"></a>5.3 背景(background)属性</h3><h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景颜色 */</span></span><br><span class="line"><span class="attribute">background-color</span>: 颜色值; <span class="comment">/* 默认的值是transparent透明的inherit继承 */</span></span><br><span class="line"><span class="comment">/* 半透明背景 */</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line"><span class="comment">/* 只作用于盒子背景颜色，不会影响文本和背景图片 */</span></span><br><span class="line"><span class="comment">/* 最后一个参数是 alpha 透明度 取值范围 0~1 之间 */</span></span><br><span class="line"><span class="comment">/* 0.3 的 0 可以省略 */</span></span><br><span class="line"><span class="comment">/* C3 属性，低于 ie9 的版本不支持 */</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>opacity</strong> 属性 设置整个标签的透明度，取值范围 <code>0~1</code>之间</p>
</blockquote>
<h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景图片 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">none</span>(默认) <span class="built_in">url</span>(<span class="string">图片地址</span>) <span class="built_in">url</span>(<span class="string">&#x27;demo1.png&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;demo2.png&#x27;</span>); <span class="comment">/* demo1 在 demo2 上层 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在 background-color 上层</p>
</li>
<li><p>推荐背景图片 url 加引号</p>
</li>
<li><p>多个背景图片，使用逗号隔开</p>
</li>
</ul>
<p><strong>img 和背景图片的区别：</strong></p>
<ul>
<li>img 直接可以显示在页面，不需要设置宽高，但是背景图片必须要给盒子设置宽高才能显示，背景图片撑不开容器</li>
<li>img 上面写不了内容（除非后期使用定位），而背景图片完全可以</li>
<li>在实际工作中：img 一般用来做产品图片展示（经常更新），而背景图片一般用来做背景或者一些很少更新的小 icon</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>; <span class="comment">/* 插入图片更改位置 可以用 margin 或 padding  盒模型 */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入的图片也是一个盒子 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">&#x27;images/sun.jpg&#x27;</span>) no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更改位置用 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景平铺 */</span></span><br><span class="line"><span class="attribute">background-repeat</span>: repeat：背景图像在纵向和横向上平铺（默认的） no-repeat：背景图像不平铺（常用） repeat-x：背景图像在横向上平铺 repeat-y：背景图像在纵向平铺 space：中间有空白，保证显示每个图片完整 round：通过缩放保证每个图片显示完整，有可能图片会被拉伸;</span><br></pre></td></tr></table></figure>

<h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景位置 */</span></span><br><span class="line"><span class="attribute">background-position</span>: length：百分数 | 由浮点数字和单位标识符组成的长度值 position：top | center | bottom | left | center | right 方位名词;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>必须先指定 background-image 属性</li>
<li>x 轴向右为正方向，y 轴向下为正方向，z 轴向屏幕外是正方向</li>
<li>如果 position 后面是精确坐标， 那么第一个是 x ，第二的一定是 y</li>
<li>如果指定的两个值是精确单位和方位名字混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</li>
<li>如果指定两个值都是方位名字，则两个值前后顺序无关，比如 left top 和 top left 效果一致</li>
<li>如果只指定了一个方位名词，另一个值默认<strong>居中对齐</strong>。如果只指定一个数值，那该数值一定是 x 坐标，另一个默认<strong>垂直居中</strong></li>
<li>可设置像素值或百分比（百分比对应容器百分比位置，50% 50% 等价于 center center 即居中）</li>
<li>right 10px top 20px 表示距离右边 10px 距离上边 20px</li>
</ul>
<h4 id="attachment"><a href="#attachment" class="headerlink" title="attachment"></a>attachment</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景附着就是解释背景是滚动的还是固定的 */</span></span><br><span class="line"><span class="attribute">background-attachment</span>: scroll：背景图像是随对象内容滚动 fixed：背景图像固定 inherit;</span><br></pre></td></tr></table></figure>

<h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><ul>
<li>跟  width  或者  height  属性是一致的，其实就是设置背景图片的宽高</li>
<li>设置百分比则是相对于容器的百分比，而不是图片，50% 不是将图片缩小一半</li>
<li>特殊值：cover 和 contain 图片等比缩放恰好覆盖整个元素<ul>
<li>cover 某一边正好 100%，另一边等于或者大于元素对应方向的长度</li>
<li>contain 某一边正好 100%，另一边等于或者小于元素对应方向的长度</li>
</ul>
</li>
</ul>
<h4 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置背景零点参考的盒模型即设置（0.0）坐标位置 */</span></span><br><span class="line"><span class="attribute">background-origin</span>: padding-box（默认值） | border-box | content-box;</span><br></pre></td></tr></table></figure>

<h4 id="clip"><a href="#clip" class="headerlink" title="clip"></a>clip</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置背景裁剪参考的盒模型 */</span></span><br><span class="line"><span class="attribute">background-clip</span>: border-box （默认值）背景区域：border + padding + content padding-box 背景区域：padding + content content-box 背景区域：content text (需要加 -webkit- 前缀) 背景区域 ：文字;</span><br></pre></td></tr></table></figure>

<h4 id="背景属性简写"><a href="#背景属性简写" class="headerlink" title="背景属性简写"></a>背景属性简写</h4><p>!&gt; background: bg-image || bg-position&#x2F;bg-size || repeat-style || bg-attachment || bg-origin|| bg-clip(origin 和 clip 只设置一个值时则他俩为同一个值) || bg-color</p>
<p>多重背景：background 设置背景的时候，可以设置多个背景图片，使用逗号隔开。注意颜色只能设置一次，并且颜色通常都是在最后面进行设置。</p>
<p>background 是一个合写的属性，如果在 background 之前设置了 background 相关的样式，会被覆盖掉</p>
<h3 id="5-4-display-属性（重点）"><a href="#5-4-display-属性（重点）" class="headerlink" title="5.4 display 属性（重点）"></a>5.4 display 属性（重点）</h3><p>属性值：<br>​ none  此元素不会被显示，不占空间，后续元素会补充上去（visibility：hidden    不显示，但空间保留）<br>​ block  显示为块级元素<br>​ inline  显示为内联元素<br>​ inline-block   显示为行内块</p>
<h4 id="5-4-1-块级元素-block"><a href="#5-4-1-块级元素-block" class="headerlink" title="5.4.1 块级元素(block)"></a>5.4.1 块级元素(block)</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: block;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常见的块元素有 <code>&lt;h1&gt;~&lt;h6&gt;</code> 、<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code> 、<code>dl</code>、 <code>dt</code> 、<code>dd</code>、 <code>header</code> 、 <code>footer</code> 、<code>aside</code>、 <code>nav</code> 、 <code>article</code> 、 <code>section</code> …等，其中<code>&lt;div&gt;</code>标签是最典型的块元素。</p>
</blockquote>
<ul>
<li>块级元素的特点</li>
</ul>
<p>（1）独占一行</p>
<p>（2）高度，宽度、外边距以及内边距都可以控制。</p>
<p>（3）继承父元素的宽度，高度不继承</p>
<p>（4）是一个容器及盒子，里面可以放行内或者块级元素。</p>
<ul>
<li>注意：<ul>
<li>只有文字才能组成段落 因此 p 里面不能放块级元素，特别是 p 不能放 div</li>
<li>同理还有这些标签 h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li>
</ul>
</li>
</ul>
<h4 id="5-4-2-行内元素-inline"><a href="#5-4-2-行内元素-inline" class="headerlink" title="5.4.2 行内元素(inline)"></a>5.4.2 行内元素(inline)</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: inline;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常见的行内元素有<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>lable</code> 、<code>&lt;span&gt;</code> 等，其中 <code>&lt;span&gt;</code> 标签最典型的行内元素。有的地方也成内联元素</p>
</blockquote>
<p><strong>行内元素的特点：</strong></p>
<p>（1）相邻行内元素在一行上，一行可以显示多个。</p>
<p>（2）高、宽直接设置是无效的。</p>
<p>（3）默认宽度就是它本身内容的宽度。</p>
<p>（4）<strong>不可设置竖直方向的 marging 和 padding</strong>,但是可以设置水平方向的 margin 和 padding</p>
<p>（5）<strong>行内元素只能容纳文本或则其他行内元素。</strong></p>
<p>注意：</p>
<ul>
<li><code>&lt;a&gt;</code> 不能直接嵌套 <code>&lt;a&gt;</code></li>
<li>特殊情况 a 里面可以放块级元素，但是给 a 转换一下块级模式最安全。</li>
</ul>
<h4 id="5-4-3-行内块元素（inline-block）"><a href="#5-4-3-行内块元素（inline-block）" class="headerlink" title="5.4.3 行内块元素（inline-block）"></a>5.4.3 行内块元素（inline-block）</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: inline-block;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在行内元素中有几个特殊的标签——<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;td&gt;</code>、<code>textarea</code> ，<code>select</code> ，<code>button</code>，可以对它们设置宽高和对齐属性，这些元素把它们称为行内块元素。</p>
</blockquote>
<ul>
<li><p>行内块元素的特点：</p>
<p>（1）和相邻行内元素（行内块）在一行上。一行可以显示多个，超出范围会整块换行<br>（2）默认宽度就是它本身内容的宽度。<br>（3）高度，行高、外边距以及内边距都可以控制。<br>（4）可以设置垂直居中  {vertical-align：middle；}</p>
</li>
</ul>
<h3 id="5-5-盒子阴影-box-shadow-CSS3"><a href="#5-5-盒子阴影-box-shadow-CSS3" class="headerlink" title="5.5 盒子阴影 box-shadow (CSS3)"></a>5.5 盒子阴影 box-shadow (CSS3)</h3><ul>
<li>语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: 水平阴影 垂直阴影 模糊距离（虚实） 阴影尺寸（影子大小） 阴影颜色 内/外阴影；;</span><br></pre></td></tr></table></figure>

<ul>
<li>前两个属性是必须写的，其余的可以省略。</li>
<li>水平阴影、垂直阴影、阴影尺寸可为负值，模糊距离不能为负</li>
<li>外阴影 (outset) 是默认的 但是不能写 想要内阴影可以写 inset</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">  <span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line">  <span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>颜色如果没设置则为 border 或文字颜色，阴影不占空间，内外阴影可以叠加，中间用逗号隔开</p>
<h2 id="6-CSS-三大特性"><a href="#6-CSS-三大特性" class="headerlink" title="6. CSS 三大特性"></a>6. CSS 三大特性</h2><p>目标：</p>
<ul>
<li>理解<ul>
<li>能说出 css 样式冲突采取的原则</li>
<li>能说出哪些常见的样式会有继承</li>
</ul>
</li>
<li>应用<ul>
<li>能写出 CSS 优先级的算法</li>
<li>能会计算常见选择器的叠加值</li>
</ul>
</li>
</ul>
<h3 id="6-1-CSS-层叠性"><a href="#6-1-CSS-层叠性" class="headerlink" title="6.1 CSS 层叠性"></a>6.1 CSS 层叠性</h3><ul>
<li><p>概念：</p>
<p>所谓层叠性是指多种 CSS 样式的叠加。</p>
<p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p>
</li>
<li><p>原则：</p>
<ul>
<li>样式冲突，遵循的原则是<strong>就近原则。</strong></li>
<li>同一标签同一属性，后面的会覆盖前面的</li>
<li>样式不冲突，不会层叠</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS层叠性最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</span><br></pre></td></tr></table></figure>

<h3 id="6-2-CSS-继承性"><a href="#6-2-CSS-继承性" class="headerlink" title="6.2 CSS 继承性"></a>6.2 CSS 继承性</h3><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102183947.png"></p>
<ul>
<li><p>概念：</p>
<p>子标签会继承父标签的某些样式，如文本颜色和字号。</p>
<p>想要设置一个可继承的属性，只需将它应用于父元素即可。</p>
</li>
</ul>
<p>简单的理解就是： 子承父业。</p>
<ul>
<li><strong>注意</strong>：<ul>
<li>恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。比如有很多子级孩子都需要某个样式，可以给父级指定一个，这些孩子继承过来就好了。</li>
<li>子元素可以继承父元素的样式（<strong>text-，font-，line- 这些元素开头的可以继承，以及 color 属性</strong>）</li>
<li>a 标签不会继承 color， text-decoration <code>none</code> 属性值不会继承，其他属性值会继承</li>
<li>h 标签会继承的父元素的 font-size，但是具体的值是继承下来的 font-size 的值* 2</li>
</ul>
</li>
</ul>
<h3 id="6-3-CSS-优先级（重点）"><a href="#6-3-CSS-优先级（重点）" class="headerlink" title="6.3 CSS 优先级（重点）"></a>6.3 CSS 优先级（重点）</h3><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184033.png"></p>
<ul>
<li><p>概念：</p>
<p>定义 CSS 样式时，经常出现两个或更多规则应用在同一元素上，此时，</p>
<ul>
<li>选择器相同，则执行层叠性</li>
<li>选择器不同，就会出现优先级的问题。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">!important &gt; style &gt; id &gt; 类/伪类 &gt; 标签 &gt; * &gt; 继承</span><br></pre></td></tr></table></figure>

<h4 id="1-权重计算公式"><a href="#1-权重计算公式" class="headerlink" title="1). 权重计算公式"></a>1). 权重计算公式</h4><p>关于 CSS 权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</p>
<table>
<thead>
<tr>
<th>标签选择器</th>
<th>计算权重公式</th>
</tr>
</thead>
<tbody><tr>
<td>继承或者 *</td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>每个元素（标签选择器），伪元素选择器</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>每个类，伪类，属性选择器</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>每个 ID</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>每个行内样式 style&#x3D;””</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>每个!important 重要的</td>
<td>∞ 无穷大</td>
</tr>
</tbody></table>
<ul>
<li><p>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</p>
</li>
<li><p>关于 CSS 权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</p>
</li>
<li><p>div { color: pink!important; }</p>
</li>
</ul>
<h4 id="2-权重叠加"><a href="#2-权重叠加" class="headerlink" title="2). 权重叠加"></a>2). 权重叠加</h4><p>我们经常用交集选择器，后代选择器等，是有多个基础选择器组合而成，那么此时，就会出现权重叠加。</p>
<p>就是一个简单的加法计算</p>
<ul>
<li>div ul li ——&gt; 0,0,0,3</li>
<li>.nav ul li ——&gt; 0,0,1,2</li>
<li>a:hover —–—&gt; 0,0,1,1</li>
<li>.nav a ——&gt; 0,0,1,1</li>
</ul>
<p>注意：</p>
<ol>
<li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 &#x3D;0,0,0,10 而不是 0,0, 1, 0， 所以不会存在 10 个 div 能赶上一个类选择器的情况。</li>
</ol>
<h4 id="3-继承的权重是-0"><a href="#3-继承的权重是-0" class="headerlink" title="3). 继承的权重是 0"></a>3). 继承的权重是 0</h4><p>这个不难，但是忽略很容易绕晕。其实，我们修改样式，一定要看该标签有没有被选中。</p>
<p>1） 如果选中了，那么以上面的公式来计权重。谁大听谁的。<br>2） 如果没有选中，那么权重是 0，因为继承的权重为 0.（**!important 也无效**）</p>
<h2 id="7-盒子模型（CSS-重点）"><a href="#7-盒子模型（CSS-重点）" class="headerlink" title="7. 盒子模型（CSS 重点）"></a>7. 盒子模型（CSS 重点）</h2><p>css 学习三大重点： css 盒子模型 、 浮动 、 定位</p>
<p>主题思路：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184059.png"></p>
<p>目标：</p>
<ul>
<li>理解：<ul>
<li>能说出盒子模型有哪四部分组成</li>
<li>能说出内边距的作用以及对盒子的影响</li>
<li>能说出 padding 设置不同数值个数分别代表的意思</li>
<li>能说出块级盒子居中对齐需要的 2 个条件</li>
<li>能说出外边距合并的解决方法</li>
</ul>
</li>
<li>应用：<ul>
<li>能利用边框复合写法给元素添加边框</li>
<li>能计算盒子的实际大小</li>
<li>能利用盒子模型布局模块案例</li>
</ul>
</li>
</ul>
<h3 id="7-1-盒子模型（Box-Model）"><a href="#7-1-盒子模型（Box-Model）" class="headerlink" title="7.1 盒子模型（Box Model）"></a>7.1 盒子模型（Box Model）</h3><ul>
<li><p>所谓盒子模型：</p>
<ul>
<li>就是把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li>
</ul>
</li>
</ul>
<p><strong>总结:</strong></p>
<ul>
<li>盒子模型有元素的内容（）、边框（border）、内边距（padding）、和外边距（margin）组成。</li>
<li>盒子里面的文字和图片等元素是 内容区域</li>
<li>盒子的厚度 我们成为 盒子的边框</li>
<li>盒子内容与边框的距离是内边距（类似单元格的 cellpadding)</li>
<li>盒子与盒子之间的距离是外边距（类似单元格的 cellspacing）</li>
<li>css 中设置的宽高默认是内容部分</li>
</ul>
<h3 id="7-2-盒子边框（border）​"><a href="#7-2-盒子边框（border）​" class="headerlink" title="7.2 盒子边框（border）​"></a>7.2 盒子边框（border）​</h3><ul>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: border-width || border-style || border-color || none;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>border-width</td>
<td align="center">定义边框粗细，单位是 px</td>
</tr>
<tr>
<td>border-style</td>
<td align="center">边框的样式</td>
</tr>
<tr>
<td>border-color</td>
<td align="center">边框颜色</td>
</tr>
</tbody></table>
<ul>
<li>边框的样式：<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线</li>
<li>dotted：边框为点线</li>
</ul>
</li>
</ul>
<h4 id="7-2-1-盒子边框写法总结表"><a href="#7-2-1-盒子边框写法总结表" class="headerlink" title="7.2.1 盒子边框写法总结表"></a>7.2.1 盒子边框写法总结表</h4><p>很多情况下，我们不需要指定 4 个边框，我们是可以单独给 4 个边框分别指定的。</p>
<table>
<thead>
<tr>
<th align="left">上边框</th>
<th align="left">下边框</th>
<th align="left">左边框</th>
<th align="left">右边框</th>
</tr>
</thead>
<tbody><tr>
<td align="left">border-top-style:样式;</td>
<td align="left">border-bottom-style:样式;</td>
<td align="left">border-left-style:样式;</td>
<td align="left">border-right-style:样式;</td>
</tr>
<tr>
<td align="left">border-top-width:宽度;</td>
<td align="left">border- bottom-width:宽度;</td>
<td align="left">border-left-width:宽度;</td>
<td align="left">border-right-width:宽度;</td>
</tr>
<tr>
<td align="left">border-top-color:颜色;</td>
<td align="left">border- bottom-color:颜色;</td>
<td align="left">border-left-color:颜色;</td>
<td align="left">border-right-color:颜色;</td>
</tr>
<tr>
<td align="left">border-top:宽度 样式 颜色;</td>
<td align="left">border-bottom:宽度 样式 颜色;</td>
<td align="left">border-left:宽度 样式 颜色;</td>
<td align="left">border-right:宽度 样式 颜色;</td>
</tr>
</tbody></table>
<h4 id="7-2-2-表格的细线边框"><a href="#7-2-2-表格的细线边框" class="headerlink" title="7.2.2 表格的细线边框"></a>7.2.2 表格的细线边框</h4><ul>
<li><p>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为 0，</p>
</li>
<li><p>但是两个单元格之间的边框会出现重叠，从而使边框变粗</p>
</li>
<li><p>通过 css 属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table&#123; border-collapse:collapse; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>collapse 单词是合并的意思</li>
<li>border-collapse:collapse; 表示相邻边框合并在一起。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	<span class="selector-tag">table</span> &#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">td</span> &#123;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">		<span class="attribute">text-align</span>: center;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">table</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">		<span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*合并相邻边框*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="7-2-3-圆角边框-CSS3"><a href="#7-2-3-圆角边框-CSS3" class="headerlink" title="7.2.3 圆角边框(CSS3)"></a>7.2.3 圆角边框(CSS3)</h4><ul>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: length; <span class="comment">/*圆角的半径*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中每一个值可以为数值或百分比的形式。</p>
</li>
<li><p>四个值的顺序是：左上、右上、右下、左下，依旧是顺时针旋转。每个角又有水平半径垂直半径，前四个代表水平，后四个代表垂直，中间用&#x2F;隔开</p>
</li>
<li><p>技巧：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>; <span class="comment">/*让一个正方形  变成圆圈 */</span></span><br><span class="line"><span class="attribute">border-top-left-radius</span>：<span class="number">10px</span>; <span class="comment">/*单独设置一个角*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-3-内边距（padding）"><a href="#7-3-内边距（padding）" class="headerlink" title="7.3 内边距（padding）"></a>7.3 内边距（padding）</h3><h4 id="7-3-1-内边距"><a href="#7-3-1-内边距" class="headerlink" title="7.3.1 内边距"></a>7.3.1 内边距</h4><p>padding 属性用于设置内边距。 <strong>是指 边框与内容之间的距离。</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>padding-left</td>
<td align="left">左内边距</td>
</tr>
<tr>
<td>padding-right</td>
<td align="left">右内边距</td>
</tr>
<tr>
<td>padding-top</td>
<td align="left">上内边距</td>
</tr>
<tr>
<td>padding-bottom</td>
<td align="left">下内边距</td>
</tr>
</tbody></table>
<p>当我们给盒子指定 padding 值之后， 发生了 2 件事情：</p>
<ol>
<li>内容和边框 有了距离，添加了内边距。</li>
<li>盒子会变大。</li>
</ol>
<blockquote>
<p>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定 padding， 则不会撑开盒子。</p>
</blockquote>
<p><strong>注意： 后面跟几个数值表示的意思是不一样的。</strong></p>
<table>
<thead>
<tr>
<th>值的个数</th>
<th>表达意思</th>
</tr>
</thead>
<tbody><tr>
<td>1 个值</td>
<td>padding：上下左右内边距;</td>
</tr>
<tr>
<td>2 个值</td>
<td>padding: 上下内边距 左右内边距 ；</td>
</tr>
<tr>
<td>3 个值</td>
<td>padding：上内边距 左右内边距 下内边距；</td>
</tr>
<tr>
<td>4 个值</td>
<td>padding: 上内边距 右内边距 下内边距 左内边距 ；</td>
</tr>
</tbody></table>
<h4 id="7-3-2-内盒尺寸计算（元素实际大小）"><a href="#7-3-2-内盒尺寸计算（元素实际大小）" class="headerlink" title="7.3.2 内盒尺寸计算（元素实际大小）"></a>7.3.2 内盒尺寸计算（元素实际大小）</h4><ul>
<li><p>宽度</p>
<p>Element Height &#x3D; content height + padding + border （Height 为内容高度）</p>
</li>
<li><p>高度</p>
<p>Element Width &#x3D; content width + padding + border （Width 为内容宽度）</p>
</li>
<li><p>盒子的实际的大小 &#x3D; 内容的宽度和高度 + 内边距 + 边框</p>
<blockquote>
<p>会撑大原来的盒子</p>
</blockquote>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: content-box（为默认，宽高不包含padding和border）</span><br><span class="line">box-sizing: border-box; 此时宽高包含<span class="attribute">border</span>在内</span><br></pre></td></tr></table></figure>

<h3 id="7-4-外边距（margin）"><a href="#7-4-外边距（margin）" class="headerlink" title="7.4 外边距（margin）"></a>7.4 外边距（margin）</h3><h4 id="7-4-1-外边距"><a href="#7-4-1-外边距" class="headerlink" title="7.4.1 外边距"></a>7.4.1 外边距</h4><p>margin 属性用于设置外边距。 margin 就是控制<strong>盒子和盒子之间的距离</strong>，可以为负值</p>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>margin-left</td>
<td align="left">左外边距</td>
</tr>
<tr>
<td>margin-right</td>
<td align="left">右外边距</td>
</tr>
<tr>
<td>margin-top</td>
<td align="left">上外边距</td>
</tr>
<tr>
<td>margin-bottom</td>
<td align="left">下外边距</td>
</tr>
</tbody></table>
<blockquote>
<p>margin 值的简写 （复合写法）代表意思 跟 padding 完全相同。</p>
</blockquote>
<p><strong>行内元素设置 margin-top&#x2F;bottom 无效</strong></p>
<h4 id="7-4-2-块级盒子水平居中"><a href="#7-4-2-块级盒子水平居中" class="headerlink" title="7.4.2 块级盒子水平居中"></a>7.4.2 块级盒子水平居中</h4><ul>
<li>可以让一个块级盒子实现水平居中必须：<ul>
<li>盒子必须指定了宽度（width）</li>
<li>然后就给<strong>左右的外边距都设置为 auto</strong>，</li>
</ul>
</li>
</ul>
<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见的写法，以下下三种都可以。</p>
<ul>
<li>margin-left: auto; margin-right: auto;</li>
<li>margin: auto;</li>
<li>margin: 0 auto;</li>
</ul>
<h4 id="7-4-3-文字居中和盒子居中区别"><a href="#7-4-3-文字居中和盒子居中区别" class="headerlink" title="7.4.3 文字居中和盒子居中区别"></a>7.4.3 文字居中和盒子居中区别</h4><ol>
<li>盒子内的文字水平居中是 text-align: center, 而且还可以让 行内元素和行内块居中对齐</li>
<li>块级盒子水平居中 左右 margin 改为 auto</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center; <span class="comment">/*  文字 行内元素 行内块元素水平居中 */</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> auto; <span class="comment">/* 块级盒子水平居中  左右margin 改为 auto 就阔以了 上下margin都可以 */</span></span><br></pre></td></tr></table></figure>

<h4 id="7-4-4-外边距合并（塌陷）"><a href="#7-4-4-外边距合并（塌陷）" class="headerlink" title="7.4.4 外边距合并（塌陷）"></a>7.4.4 外边距合并（塌陷）</h4><p>使用 margin 定义块元素的<strong>垂直外边距</strong>时，可能会出现外边距的合并。</p>
<p><strong>(1). 相邻块元素垂直外边距的合并</strong></p>
<ul>
<li>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和而是<strong>取两个值中的较大者</strong>，这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184124.png"></p>
<p><strong>解决方案：尽量只给一个盒子添加 margin 值</strong>。</p>
<p><strong>(2). 嵌套块元素垂直外边距的合并（塌陷）</strong></p>
<ul>
<li>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，父元素的上外边距会与子元素的上外边距发生合并（父元素会跟着下来），合并后的外边距为两者中的较大者</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184202.png"></p>
<p><strong>解决方案：</strong></p>
<ol>
<li>可以为父元素定义上边框。</li>
<li>可以为父元素定义上内边距</li>
<li>可以为父元素添加 overflow:hidden。</li>
</ol>
<p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p>
<h4 id="7-4-5-清除元素的默认内外边距-重要"><a href="#7-4-5-清除元素的默认内外边距-重要" class="headerlink" title="7.4.5 清除元素的默认内外边距(重要)"></a>7.4.5 清除元素的默认内外边距(重要)</h4><p>为了更灵活方便地控制网页中的元素，制作网页时，我们需要将元素的默认内外边距清除</p>
<p>代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 清除内边距 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>; <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>行内元素为了照顾兼容性， 尽量只设置左右内外边距， 不要设置上下内外边距。</li>
</ul>
<h2 id="8-CSS-浮动-float"><a href="#8-CSS-浮动-float" class="headerlink" title="8. CSS 浮动(float)"></a>8. CSS 浮动(float)</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li><strong>记忆</strong><ul>
<li>能够说出 CSS 的布局的三种机制</li>
</ul>
</li>
<li><strong>理解</strong><ul>
<li>能够说出普通流在布局中的特点</li>
<li>能够说出我们为什么用浮动</li>
<li>能够说出我们为什么要清除浮动</li>
</ul>
</li>
<li><strong>应用</strong><ul>
<li>能够利用浮动完成导航栏案例</li>
<li>能够清除浮动</li>
</ul>
</li>
</ul>
<h3 id="8-1-浮动"><a href="#8-1-浮动" class="headerlink" title="8.1 浮动"></a>8.1 浮动</h3><h4 id="8-1-1-CSS-布局的三种机制"><a href="#8-1-1-CSS-布局的三种机制" class="headerlink" title="8.1.1 CSS 布局的三种机制"></a>8.1.1 CSS 布局的三种机制</h4><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置，分别是<strong>普通流</strong>（标准流）、<strong>浮动</strong>和<strong>定位</strong>，其中：</p>
<ol>
<li><strong>普通流</strong>（标准流）<ul>
<li><strong>块级元素</strong>会独占一行，<strong>从上向下</strong>顺序排列；<ul>
<li>常用元素：div、hr、p、h1~h6、ul、ol、dl</li>
</ul>
</li>
<li><strong>行内元素</strong>会按照顺序，<strong>从左到右</strong>顺序排列，碰到父元素边缘则自动换行；<ul>
<li>常用元素：span、a、i、em 等</li>
</ul>
</li>
</ul>
</li>
<li><strong>浮动</strong><ul>
<li>让盒子从普通流中<strong>浮</strong>起来,主要作用让多个块级盒子一行显示。</li>
</ul>
</li>
<li><strong>定位</strong><ul>
<li>将盒子<strong>定</strong>在浏览器的某一个<strong>位</strong>置——CSS 离不开定位，特别是后面的 js 特效。</li>
</ul>
</li>
</ol>
<h4 id="8-1-2-为什么需要浮动？"><a href="#8-1-2-为什么需要浮动？" class="headerlink" title="8.1.2 为什么需要浮动？"></a>8.1.2 为什么需要浮动？</h4><p>思考题：</p>
<p>我们首先要思考以下 2 个布局中最常见的问题？</p>
<ol>
<li>如何让多个盒子(div)水平排列成一行？</li>
<li>如何实现盒子的左右对齐？</li>
</ol>
<p>虽然我们前面学过行内块（inline-block） 但是他却有自己的缺陷：</p>
<ol>
<li>它可以实现多个元素一行显示，但是中间会有空白缝隙，不能满足以上第一个问题。</li>
<li>它不能实现以上第二个问题，盒子左右对齐</li>
</ol>
<p><strong>pink 老师一句话总结他们</strong></p>
<blockquote>
<p>因为一些网页布局要求，标准流不能满足我们的需要了，因此我们需要浮动来完成网页布局。</p>
</blockquote>
<h4 id="8-1-3-什么是浮动-float"><a href="#8-1-3-什么是浮动-float" class="headerlink" title="8.1.3 什么是浮动(float)"></a>8.1.3 什么是浮动(float)</h4><p><strong>概念</strong>：元素的浮动是指<strong>设置了浮动属性的元素</strong>会</p>
<ol>
<li>脱离标准普通流的控制</li>
<li>移动到指定位置。</li>
</ol>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ol>
<li><strong>让多个盒子(div)水平排列成一行</strong>，使得浮动成为布局的重要手段。</li>
<li>可以实现盒子的左右对齐等等..</li>
<li>浮动最早是用来<strong>控制图片</strong>，实现<strong>文字环绕图片的效果</strong>。</li>
</ol>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>在 CSS 中，通过 <code>float</code> 属性定义浮动，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; float: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>none</strong></td>
<td>元素不浮动（<strong>默认值</strong>）</td>
</tr>
<tr>
<td><strong>left</strong></td>
<td>元素向<strong>左</strong>浮动</td>
</tr>
<tr>
<td><strong>right</strong></td>
<td>元素向<strong>右</strong>浮动</td>
</tr>
</tbody></table>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li><code>float</code> 属性会让盒子漂浮在标准流的上面，所以第二个标准流的盒子跑到浮动盒子的底下，遮挡起来了</li>
<li>原来的位置漏给下面标准流的盒子，就是不占有原来位置，是脱离标准流的，我们俗称 “脱标”。</li>
<li>元素不在受标准流显示模式的限制,<strong>块级元素不再继承父元素的宽度，行内元素可以直接设置宽高</strong></li>
<li><strong>浮动的元素互相贴靠一起的，中间没有空白，但是如果父级宽度装不下这些浮动的盒子， 多出的盒子会</strong>掉下来（掉下来的位置会根据上一个浮动盒子的高度决定, 会以<strong>上一个盒子的底边线为基准线</strong>水平移动，如果在移动的过程里面被挡住了，那么就会卡在这里地方）</li>
<li>左浮从左往右排，右浮从右往左排</li>
<li>文字和 img 标签不会和浮动元素重叠</li>
<li>margin 的 auto 值对于脱标元素没有作用</li>
</ul>
<blockquote>
<p>实际重要的导航栏中，我们不会直接用链接 a 而是用 li 包含链接(li+a)的做法。</p>
<ol>
<li>li+a 语义更清晰，一看这就是有条理的列表型内容。</li>
<li>如果直接用 a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</li>
</ol>
</blockquote>
<h3 id="8-2-清除浮动"><a href="#8-2-清除浮动" class="headerlink" title="8.2 清除浮动"></a>8.2 清除浮动</h3><ul>
<li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li>
<li>准确地说，所谓的清除浮动，是<strong>清除浮动后造成的影响</strong></li>
<li>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为 0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</li>
</ul>
<h4 id="8-2-1-清除浮动的方法"><a href="#8-2-1-清除浮动的方法" class="headerlink" title="8.2.1 清除浮动的方法"></a>8.2.1 清除浮动的方法</h4><p>在 CSS 中，clear 属性用于清除浮动</p>
<ul>
<li>语法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;   clear 清除</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>
</tr>
<tr>
<td>right</td>
<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>
</tr>
<tr>
<td>both</td>
<td>同时清除左右两侧浮动的影响</td>
</tr>
</tbody></table>
<p>但是我们实际工作中， 几乎只用 clear: both;</p>
<h5 id="1-额外标签法-隔墙法"><a href="#1-额外标签法-隔墙法" class="headerlink" title="1).额外标签法(隔墙法)"></a>1).额外标签法(隔墙法)</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;”clear:both”&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>优点： 通俗易懂，书写方便</li>
<li>缺点： 添加许多无意义的标签，结构化较差。</li>
</ul>
<h5 id="2-父级添加-overflow-属性方法"><a href="#2-父级添加-overflow-属性方法" class="headerlink" title="2).父级添加 overflow 属性方法"></a>2).父级添加 overflow 属性方法</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">可以给父级添加: overflow为 hidden| auto| scroll 都可以实现。;</span><br></pre></td></tr></table></figure>

<p>优点： 代码简洁</p>
<p>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p>
<h5 id="3-使用-after-伪元素清除浮动"><a href="#3-使用-after-伪元素清除浮动" class="headerlink" title="3).使用 after 伪元素清除浮动"></a>3).使用 after 伪元素清除浮动</h5><p><strong>::after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</strong></p>
<p>使用方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*content: &quot;&quot;; display: block; clear: both; 这三个必须写*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125; <span class="comment">/* IE6、7 专有 */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>优点： 符合闭合浮动思想 结构语义化正确</li>
<li>缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。</li>
</ul>
<h4 id="8-2-2-清除浮动总结"><a href="#8-2-2-清除浮动总结" class="headerlink" title="8.2.2 清除浮动总结"></a>8.2.2 清除浮动总结</h4><ol>
<li>父级没高度</li>
<li>子盒子浮动了</li>
<li>影响下面布局了，我们就应该清除浮动了。</li>
</ol>
<table>
<thead>
<tr>
<th>清除浮动的方式</th>
<th align="left">优点</th>
<th align="left">缺点</th>
</tr>
</thead>
<tbody><tr>
<td>额外标签法（隔墙法）</td>
<td align="left">通俗易懂，书写方便</td>
<td align="left">添加许多无意义的标签，结构化较差。</td>
</tr>
<tr>
<td>父级 overflow:hidden;</td>
<td align="left">书写简单</td>
<td align="left">溢出隐藏</td>
</tr>
<tr>
<td>父级 after 伪元素</td>
<td align="left">结构语义化正确</td>
<td align="left">由于 IE6-7 不支持:after，兼容性问题</td>
</tr>
</tbody></table>
<h2 id="9-定位-position"><a href="#9-定位-position" class="headerlink" title="9. 定位(position)"></a>9. 定位(position)</h2><p>定位也是用来布局的，它有两部分组成：</p>
<blockquote>
<p><code>定位 = 定位模式 + 边偏移</code></p>
</blockquote>
<h3 id="9-1-边偏移"><a href="#9-1-边偏移" class="headerlink" title="9.1 边偏移"></a>9.1 边偏移</h3><p>通过 <code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code> 属性定义元素的<strong>边偏移</strong>：</p>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th align="left">示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td align="left"><code>top: 80px</code></td>
<td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td>
</tr>
<tr>
<td><code>bottom</code></td>
<td align="left"><code>bottom: 80px</code></td>
<td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td>
</tr>
<tr>
<td><code>left</code></td>
<td align="left"><code>left: 80px</code></td>
<td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td>
</tr>
<tr>
<td><code>right</code></td>
<td align="left"><code>right: 80px</code></td>
<td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td>
</tr>
</tbody></table>
<p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p>
<h3 id="9-2-定位模式-position"><a href="#9-2-定位模式-position" class="headerlink" title="9.2 定位模式 (position)"></a>9.2 定位模式 (position)</h3><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  <span class="attribute">position</span>: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p>
<table>
<thead>
<tr>
<th>值</th>
<th align="center">语义</th>
</tr>
</thead>
<tbody><tr>
<td><code>static</code></td>
<td align="center"><strong>静态</strong>定位</td>
</tr>
<tr>
<td><code>relative</code></td>
<td align="center"><strong>相对</strong>定位</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td align="center"><strong>绝对</strong>定位</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td align="center"><strong>固定</strong>定位</td>
</tr>
</tbody></table>
<h4 id="9-2-1-静态定位-static-了解"><a href="#9-2-1-静态定位-static-了解" class="headerlink" title="9.2.1 静态定位(static) - 了解"></a>9.2.1 静态定位(static) - 了解</h4><ul>
<li><strong>静态定位</strong>是元素的默认定位方式，无定位的意思。它相当于 border 里面的 none， 不要定位的时候用。</li>
<li>静态定位 按照标准流特性摆放位置，它没有边偏移。</li>
<li>静态定位在布局时我们几乎不用的</li>
</ul>
<h4 id="9-2-2-相对定位-relative-重要"><a href="#9-2-2-相对定位-relative-重要" class="headerlink" title="9.2.2 相对定位(relative) - 重要"></a>9.2.2 相对定位(relative) - 重要</h4><ul>
<li><strong>相对定位</strong>是元素<strong>相对</strong>于它原来在标准流中的位置来说的。（自恋型）</li>
<li>原来<strong>在标准流的区域继续占有</strong>，后面的盒子仍然以标准流的方式对待它。</li>
</ul>
<h4 id="9-2-3-绝对定位-absolute-重要"><a href="#9-2-3-绝对定位-absolute-重要" class="headerlink" title="9.2.3 绝对定位(absolute) - 重要"></a>9.2.3 绝对定位(absolute) - 重要</h4><ul>
<li>依据最近的已经定位的父级元素（<strong>默认父元素的 padding 部分</strong>）来进行定位（拼爹型）</li>
<li>不保留原来的位置，完全是脱标的。</li>
</ul>
<p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p>
<p><strong>定位口诀</strong> —— <strong>子绝父相</strong>—— <strong>子级</strong>是<strong>绝对</strong>定位，<strong>父级</strong>要用<strong>相对</strong>定位。</p>
<blockquote>
<p>子元素的 0 点为 margin-box 右上角，父元素的 0 点为 padding-box 右上角</p>
</blockquote>
<h4 id="9-2-4-固定定位-fixed-重要"><a href="#9-2-4-固定定位-fixed-重要" class="headerlink" title="9.2.4 固定定位(fixed) - 重要"></a>9.2.4 固定定位(fixed) - 重要</h4><ol>
<li><strong>完全脱标</strong> —— 完全不占位置；</li>
<li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul>
<li>跟父元素没有任何关系；单独使用的</li>
<li>不随滚动条滚动。</li>
</ul>
</li>
</ol>
<h3 id="9-3-定位-position-的扩展"><a href="#9-3-定位-position-的扩展" class="headerlink" title="9.3 定位(position)的扩展"></a>9.3 定位(position)的扩展</h3><h4 id="9-3-1-绝对定位的盒子居中"><a href="#9-3-1-绝对定位的盒子居中" class="headerlink" title="9.3.1 绝对定位的盒子居中"></a>9.3.1 绝对定位的盒子居中</h4><blockquote>
<p><strong>注意</strong>：<strong>绝对定位&#x2F;固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p>
</blockquote>
<p>在使用<strong>绝对定位</strong>时要想实现水平居中，可以按照如下方法（垂直居中同理）：</p>
<ol>
<li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>；</li>
<li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li>
</ol>
<p>居中还可以这样：{margin: auto; left: 0; right: 0; top: 0; bottom: 0;}</p>
<h4 id="9-3-2-堆叠顺序（z-index）"><a href="#9-3-2-堆叠顺序（z-index）" class="headerlink" title="9.3.2 堆叠顺序（z-index）"></a>9.3.2 堆叠顺序（z-index）</h4><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。加了定位的盒子，默认<strong>后来者居上</strong>， 后面的盒子会压住前面的盒子。</p>
<p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。</p>
<p><code>z-index</code> 的特性如下：</p>
<ol>
<li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上；</li>
<li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong>；</li>
<li><strong>数字后面不能加单位</strong>。</li>
<li>兄弟元素间相互比较（若 A 在 B 上面，B 的子元素不管怎么设置都不可能覆盖 A）</li>
</ol>
<p><strong>注意</strong>：<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p>
<h4 id="9-3-3-定位改变-display-属性"><a href="#9-3-3-定位改变-display-属性" class="headerlink" title="9.3.3 定位改变 display 属性"></a>9.3.3 定位改变 display 属性</h4><p>前面我们讲过，display 是显示模式， 可以改变显示模式有以下方式:</p>
<ul>
<li>可以用 inline-block 转换为行内块</li>
<li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li>
<li>绝对定位和固定定位也和浮动类似， 默认转换的特性转换为<strong>行内块</strong>。</li>
</ul>
<p>所以说， 一个行内的盒子，如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p>
<p><strong>同时注意：</strong></p>
<p>浮动元素、绝对定位(固定定位）元素不再有外边距合并（塌陷）的问题。</p>
<h3 id="9-4-定位小结"><a href="#9-4-定位小结" class="headerlink" title="9.4 定位小结"></a>9.4 定位小结</h3><table>
<thead>
<tr>
<th>定位模式</th>
<th>是否脱标占有位置</th>
<th align="left">移动位置基准</th>
<th>模式转换（行内块）</th>
<th>使用情况</th>
</tr>
</thead>
<tbody><tr>
<td>静态 static</td>
<td>不脱标，正常模式</td>
<td align="left">正常模式</td>
<td>不能</td>
<td>几乎不用</td>
</tr>
<tr>
<td>相对定位 relative</td>
<td>不脱标，占有位置</td>
<td align="left">相对自身位置移动</td>
<td>不能</td>
<td>基本单独使用</td>
</tr>
<tr>
<td>绝对定位 absolute</td>
<td>完全脱标，不占有位置</td>
<td align="left">相对于定位父级移动位置</td>
<td>能</td>
<td>要和定位父级元素搭配使用</td>
</tr>
<tr>
<td>固定定位 fixed</td>
<td>完全脱标，不占有位置</td>
<td align="left">相对于浏览器移动位置</td>
<td>能</td>
<td>单独使用，不需要父级</td>
</tr>
</tbody></table>
<h2 id="10-CSS-书写规范"><a href="#10-CSS-书写规范" class="headerlink" title="10. CSS 书写规范"></a>10. CSS 书写规范</h2><h3 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h3><p>【强制】 选择器 与 { 之间必须包含空格。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【强制】 属性名与之后的 : 之间不允许包含空格， : 与 属性值之间必须包含空格。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h3><p>【强制】 并集选择器，每个选择器声明必须独占一行。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【建议】 一般情况下，选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h3><p>【强制】 属性定义必须另起一行。以分号结尾</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-CSS-补充知识"><a href="#11-CSS-补充知识" class="headerlink" title="11. CSS 补充知识"></a>11. CSS 补充知识</h2><h3 id="11-1-元素的显示与隐藏"><a href="#11-1-元素的显示与隐藏" class="headerlink" title="11.1 元素的显示与隐藏"></a>11.1 元素的显示与隐藏</h3><ul>
<li><p>目的</p>
<p>让一个元素在页面中消失或者显示出来</p>
</li>
<li><p>场景</p>
<p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p>
</li>
</ul>
<h4 id="11-1-1-display-显示（重点）"><a href="#11-1-1-display-显示（重点）" class="headerlink" title="11.1.1 display 显示（重点）"></a>11.1.1 display 显示（重点）</h4><ul>
<li>display 设置或检索对象是否及如何显示。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: none; <span class="comment">/*隐藏对象*/</span></span><br><span class="line"><span class="attribute">display</span>: block; <span class="comment">/*除了转换为块级元素之外，同时还有显示元素的意思。*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>特点： 隐藏之后，不再保留位置。</li>
</ul>
<p>实际开发场景：</p>
<blockquote>
<p>配合后面 js 做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p>
</blockquote>
<h4 id="11-1-2-visibility-可见性-了解"><a href="#11-1-2-visibility-可见性-了解" class="headerlink" title="11.1.2 visibility 可见性 (了解)"></a>11.1.2 visibility 可见性 (了解)</h4><ul>
<li>设置或检索是否显示对象。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: visible; 　<span class="comment">/*对象可视*/</span></span><br><span class="line"><span class="attribute">visibility</span>: hidden; 　  <span class="comment">/*对象隐藏*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>特点： 隐藏之后，继续保留原有位置。（停职留薪）</li>
</ul>
<h4 id="11-1-3-overflow-溢出-重点"><a href="#11-1-3-overflow-溢出-重点" class="headerlink" title="11.1.3 overflow 溢出(重点)"></a>11.1.3 overflow 溢出(重点)</h4><ul>
<li>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>visible</strong></td>
<td>不剪切内容也不添加滚动条（默认）</td>
</tr>
<tr>
<td><strong>hidden</strong></td>
<td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td>
</tr>
<tr>
<td><strong>scroll</strong></td>
<td>不管超出内容否，总是显示滚动条，包括上下和左右</td>
</tr>
<tr>
<td><strong>auto</strong></td>
<td>超出自动显示滚动条，不超出不显示滚动条</td>
</tr>
</tbody></table>
<p>实际开发场景：</p>
<ol>
<li>清除浮动</li>
<li>隐藏超出内容，隐藏掉, 不允许内容超过父盒子。</li>
</ol>
<h4 id="11-1-4-显示与隐藏总结"><a href="#11-1-4-显示与隐藏总结" class="headerlink" title="11.1.4 显示与隐藏总结"></a>11.1.4 显示与隐藏总结</h4><table>
<thead>
<tr>
<th>属性</th>
<th>区别</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><strong>display</strong></td>
<td>隐藏对象，不保留位置</td>
<td>配合后面 js 做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td>
</tr>
<tr>
<td><strong>visibility</strong></td>
<td>隐藏对象，保留位置</td>
<td>使用较少</td>
</tr>
<tr>
<td><strong>overflow</strong></td>
<td>只是隐藏超出大小的部分</td>
<td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td>
</tr>
</tbody></table>
<h3 id="11-2-鼠标样式-cursor"><a href="#11-2-鼠标样式-cursor" class="headerlink" title="11.2 鼠标样式 cursor"></a>11.2 鼠标样式 cursor</h3><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>default</strong></td>
<td>小白 默认</td>
</tr>
<tr>
<td><strong>pointer</strong></td>
<td>小手</td>
</tr>
<tr>
<td><strong>move</strong></td>
<td>移动</td>
</tr>
<tr>
<td><strong>text</strong></td>
<td>文本</td>
</tr>
<tr>
<td><strong>not-allowed</strong></td>
<td>禁止</td>
</tr>
<tr>
<td>url()</td>
<td>图片</td>
</tr>
<tr>
<td>none</td>
<td>鼠标消失</td>
</tr>
<tr>
<td>help</td>
<td>问号</td>
</tr>
<tr>
<td>zoom-in</td>
<td>放大镜</td>
</tr>
<tr>
<td>zoom-out</td>
<td>缩小镜</td>
</tr>
</tbody></table>
<h3 id="11-3-轮廓线-outline"><a href="#11-3-轮廓线-outline" class="headerlink" title="11.3 轮廓线 outline"></a>11.3 轮廓线 outline</h3><p>是绘制于元素周围的一条线，位于 border 的外围，不占空间，不影响元素布局，可起到突出元素的作用。如 input 输入框</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">outline</span>: outline-color ||outline-style || outline-width;</span><br></pre></td></tr></table></figure>

<p>四个边不能单独设置</p>
<p>但是我们都不关心可以设置多少，我们平时都是去掉的。</p>
<p>最直接的写法是 ： outline: 0; 或者 outline: none;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;outline: 0;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11-4-防止拖拽文本域-resize"><a href="#11-4-防止拖拽文本域-resize" class="headerlink" title="11.4 防止拖拽文本域 resize"></a>11.4 防止拖拽文本域 resize</h3><p>实际开发中，我们文本域右下角是不可以拖拽：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11-5-vertical-align-了解不推荐使用"><a href="#11-5-vertical-align-了解不推荐使用" class="headerlink" title="11.5 vertical-align (了解不推荐使用)"></a>11.5 vertical-align (了解不推荐使用)</h3><p><strong>行内</strong>、<strong>行内块</strong>、表单元格 垂直方向的对齐方式: vertical-align</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184232.jpg"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: baseline | sub | super | <span class="built_in">top</span>(对齐line) | <span class="built_in">text-top</span>(对齐文字) | middle | bottom | text-bottom | &lt;percentage&gt;(参照line-height向上) | &lt;length&gt;(参照baseline向上);</span><br><span class="line">baseline: 当前元素的基线和父元素的基线对齐;</span><br><span class="line">middle: 当前元素的中线和父元素的基线加上x高度的一半对齐;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<p>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p>
<p>但是由于操作非常复杂,我们工作中基本不使用</p>
</li>
</ul>
<p><strong>去除图片底侧空白缝隙</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102184254.png"></p>
<ul>
<li><p>原因：</p>
<pre><code>图片或者表单等行内块元素，他的基线会和父级盒子的基线对齐。就是图片底侧会有一个空白缝隙。
</code></pre>
</li>
<li><p>解决方法：</p>
<ul>
<li>给 img vertical-align:middle 等等。 让图片不要和基线对齐。</li>
<li>给 img 添加 display：block; 转换为块级元素就不会存在问题了。<strong>推荐使用</strong></li>
</ul>
</li>
</ul>
<h3 id="文字溢出省略号显示"><a href="#文字溢出省略号显示" class="headerlink" title="文字溢出省略号显示"></a>文字溢出省略号显示</h3><h4 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a><code>white-space</code></h4><p>设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>:</span><br><span class="line">  normal;  <span class="comment">/* 默认处理方式 */</span></span><br><span class="line">  nowrap;　<span class="comment">/* 强制在同一行内显示所有文本，直到文本结束或者遭遇 br 标签才换行 */</span></span><br></pre></td></tr></table></figure>

<h4 id="text-overflow"><a href="#text-overflow" class="headerlink" title="text-overflow"></a><code>text-overflow</code></h4><p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span>:</span><br><span class="line">  clip; 不显示省略标记(...)，而是简单的裁切</span><br><span class="line">  ellipsis; 当对象内文本溢出时显示省略标记(...)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：一定要首先强制一行内显示，再次和 overflow 属性搭配使用</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 强制一行内显示文本 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/* 超出的部分隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/* 文字用省略号替代超出的部分 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 强制最多三行显示文本 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>

<h3 id="换行方式"><a href="#换行方式" class="headerlink" title="换行方式"></a>换行方式</h3><p>浏览器默认情况下，如果一个单词很长，导致一行中剩下的空间已经放不下时，浏览器会把这个单词挪到下一行去</p>
<p>word-wrap: break-word 标明是否允许浏览器在单词内进行断句，他会首先尝试挪到下一行，看看下一行的宽度够不够，不够的话就进行单词内的断句。</p>
<p>word-break 属性规定自动换行的处理方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">word-break: normal|break-all|keep-all</span><br><span class="line">normal：使用浏览器默认的换行规则</span><br><span class="line">break-all：允许在单词内换行，它不会尝试把长单词挪到下一行，而是直接进行单词内的断句</span><br><span class="line">keep-all：只能在半角空格或连字符处换行</span><br></pre></td></tr></table></figure>

<p>white-space：normal | pre | nowrap | pre-wrap | pre-line</p>
<p>normal：连续的空白符会被合并，换行符会被当作空白符来处理。填充 line 盒子时，必要的话会换行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nowrap：和 normal 一样，连续的空白符会被合并。但换行符无效，除非手动添加换行标签</span><br><span class="line">pre：所有空白符都会被保留。不会自动换行，原样输出</span><br><span class="line">pre-wrap：保留空白符序列，但是正常地进行换行</span><br><span class="line">pre-line：合并空白符序列，但是保留换行符</span><br></pre></td></tr></table></figure>

<h3 id="pre-标签换行"><a href="#pre-标签换行" class="headerlink" title="pre 标签换行"></a>pre 标签换行</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">pre &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: pre-wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="11-7-CSS-精灵技术（sprite-重点"><a href="#11-7-CSS-精灵技术（sprite-重点" class="headerlink" title="11.7 CSS 精灵技术（sprite) 重点"></a>11.7 CSS 精灵技术（sprite) 重点</h3><p>CSS 精灵技术（也称 CSS Sprites、CSS 雪碧）。</p>
<p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），通过 background 属性精确定位到精灵图中的某个小图。</p>
<h3 id="11-8-滑动门"><a href="#11-8-滑动门" class="headerlink" title="11.8 滑动门"></a>11.8 滑动门</h3><p>各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 核心技术就是利用 CSS 精灵（主要是背景位置）和 盒子 padding 撑开宽度, 以便能适应不同字数的导航栏。</p>
<p>一般的经典布局都是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css 样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/wx.jpg</span>) repeat-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/to.png</span>) no-repeat left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/to.png</span>) no-repeat right;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/ao.png</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>a 设置 背景左侧，padding 撑开合适宽度。</li>
<li>span 设置背景右侧， padding 撑开合适宽度 剩下由文字继续撑开宽度。</li>
<li>之所以 a 包含 span 就是因为 整个导航都是可以点击的。</li>
</ol>
<h2 id="12-CSS-三角形"><a href="#12-CSS-三角形" class="headerlink" title="12. CSS 三角形"></a>12. CSS 三角形</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>; <span class="comment">/*宽度高度为0*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>; <span class="comment">/*照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;*/</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">10px</span> solid red;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">10px</span> solid green;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid blue;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3 基础</title>
    <url>/1632.html</url>
    <content><![CDATA[<p>如同人类的的进化一样，CSS3 是 CSS2 的“进化”版本，在 CSS2 基础上，<strong>增强</strong>  或 <strong>新增</strong>  了许多特性， 弥补了 CSS2 的众多不足之处，使得 Web 开发变得更为高效和便捷。</p>
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><ul>
<li>PC 端浏览器支持程度差，需要添加私有前缀</li>
<li>移动端支持优于 PC 端</li>
<li>不断改进中</li>
<li>应用相对广泛</li>
</ul>
<p>关于私有前缀：</p>
<blockquote>
<p>在标准还未确定时，部分浏览器已经根据最初草案实现了部分功能，为了与之后确定下来的标准进行兼容，所以每种浏览器使用了自己的私有前缀与标准进行区分，当标准确立后，各大浏览器将逐步支持不带前缀的 css3 新属性</p>
<p>目前已有很多私有前缀可以不写了，但为了兼容老版本的浏览器，可以仍沿用私有前缀和标准方法，逐渐过渡</p>
<p>一般来说，CSS3 主要是为移动端而生的，因此我们在移动端没必要写太多的前缀，因为移动端的 ios 和 Android 的浏览器都是 webkit 内核</p>
<p>谷歌、苹果浏览器：<code>-webkit-</code><br>火狐浏览器：<code>-moz-</code><br>IE 浏览器：<code>-ms-</code><br>欧朋浏览器：<code>-o-</code></p>
<p>一般工作中不用去加，会通过打包工具 webpack 自动添加</p>
</blockquote>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><ul>
<li>text-shadow: 文字阴影</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：text-shadow：none | &lt;shadow&gt; [ , &lt;shadow&gt; ]*</span><br><span class="line">  &lt;shadow&gt; =&gt; &lt;length&gt;&#123;2,3&#125; &amp;&amp; &lt;color&gt;?</span><br><span class="line">text-shadow：水平偏移 垂直偏移 羽化大小 颜色</span><br><span class="line">水平偏移 垂直偏移 可以为负值，羽化大小可选且不可为负</span><br><span class="line">可以设置多组阴影值，用逗号隔开</span><br></pre></td></tr></table></figure>

<ul>
<li>box-shadow: 边框阴影</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：box-shadow：none | &lt;shadow&gt; [ , &lt;shadow&gt; ]*</span><br><span class="line">  &lt;shadow&gt; =&gt; inset? &amp;&amp; &lt;length&gt;&#123;2,4&#125; &amp;&amp; &lt;color&gt;?</span><br><span class="line"></span><br><span class="line">box-shadow：水平偏移 垂直偏移 羽化大小 阴影外延 颜色</span><br><span class="line">水平偏移、垂直偏移、阴影外延可以为负值，羽化大小、阴影外延可选，羽化大小不允许负值</span><br><span class="line">可以设置多组阴影值，用逗号隔开</span><br><span class="line">inset：设置对象的阴影类型为内阴影。该值为空时，则对象的阴影类型为外阴影</span><br></pre></td></tr></table></figure>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>background-size</p>
<p>bakground-clip</p>
<p>background-origin</p>
<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><blockquote>
<p>linear-gradient() 指沿着某条直线朝一个方向产生的渐变效果</p>
<p>渐变实际上相当与一张图片，因为需要加给 background-image 才会生效</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 最简单的渐变 颜色至少两个 方向默认从上到下 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red, green);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设定渐变的方向 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, red, green);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 也可以设定渐变的角度 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, red, green);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设定渐变的范围 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, red <span class="number">20%</span>, green <span class="number">80%</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 每一个区间表示渐变颜色的范围 */</span></span><br><span class="line">background-image: <span class="built_in">linear-gradient</span>(to right, red <span class="number">20%</span>, green <span class="number">20%</span>)</span><br></pre></td></tr></table></figure>

<h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><blockquote>
<p>radial-gradient 指从一个中心点开始沿着四周产生渐变效果</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 最简单的渐变 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(red, green);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定圆的半径和圆心 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(<span class="number">200px</span> at center, red, green);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定椭圆 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(<span class="number">200px</span> <span class="number">80px</span> at center, red, green);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定范围 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(<span class="number">200px</span> at center, green <span class="number">50%</span>, red <span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><blockquote>
<p>CSS3 中可以通过 box-sizing 来指定盒模型，即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变</p>
</blockquote>
<p>可以分成两种情况：</p>
<ul>
<li>box-sizing: border-box 计算方式为 content &#x3D; width – border - padding</li>
<li>box-sizing: content-box 计算方式为 content &#x3D; width</li>
</ul>
<h2 id="calc-函数"><a href="#calc-函数" class="headerlink" title="calc() 函数"></a>calc() 函数</h2><p>用于动态计算长度值</p>
<ul>
<li>注意：运算符前后都需要保留一个空格，例如：<code>width: calc(100% - 10px)</code></li>
<li>任何长度值都可以使用 calc() 函数进行计算</li>
<li>calc() 函数支持 <code>+</code> 、<code>-</code>、 <code>*</code> 、<code>/</code> 运算</li>
<li>calc() 函数使用标准的数学运算优先级规则</li>
</ul>
<h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><ul>
<li>过渡的属性</li>
</ul>
<p>如果两个状态发生改变，没有过渡，效果是瞬间变化的，如果加上了过渡，那么这个过程就会有动画的效果，整个状态变化的过程是由浏览器来完成的，我们只需要关注开始状态与结束状态即可</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* transition-property：设置过渡属性 默认值为 all 表示全部*/</span></span><br><span class="line"><span class="comment">/* 多个用逗号分隔 */</span></span><br><span class="line"><span class="attribute">transition-property</span>: all;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* transition-duration:设置过渡时间 */</span></span><br><span class="line"><span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* transition-delay：设置过渡延时 */</span></span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* transition-timing-function:设置过渡的速度 */</span></span><br><span class="line"><span class="comment">/* linear(匀速)，ease(平滑)，ease-in，ease-out，ease-in-out， steps(10)(分步动画) */</span></span><br><span class="line"><span class="attribute">transition-timing-function</span>: linear;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li>过渡必须要有两个状态的变化</li>
<li>过渡除了可以加到初始的状态，可以加到 hover 状态，但效果不一样，如果加到 hover 状态，回来就没有过渡了</li>
</ol>
</blockquote>
<ul>
<li>属性合写</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 属性 时间 延时 速度 */</span></span><br><span class="line"><span class="comment">/* 多个过渡用逗号隔开 */</span></span><br><span class="line"><span class="attribute">transition</span>: width <span class="number">1s</span> <span class="number">3s</span> linear, border-radius <span class="number">3s</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2D-转换"><a href="#2D-转换" class="headerlink" title="2D 转换"></a>2D 转换</h2><blockquote>
<p>transform: 转换，是 CSS3 最具颠覆性的几个特性之一，既可以用于 2D 转换，也可以用于 3D 转换</p>
<p>transform: 2D 转换，元素在平面上实现移动、旋转、缩放、斜切等操作</p>
</blockquote>
<h3 id="scale-缩放"><a href="#scale-缩放" class="headerlink" title="scale 缩放"></a>scale 缩放</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0.5</span>); <span class="comment">/* 让宽度变化 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>); <span class="comment">/* 让高度变化，注意不能写多个transform，不然会覆盖 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>); <span class="comment">/* 让宽度和高度同时变化 */</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>scale 接收的值是倍数，因此没有单位</p>
</li>
<li><p>scale 是一个值时，宽度高度会等比例同事缩放</p>
</li>
<li><p>scale 缩放时内部内容也会缩放</p>
</li>
<li><blockquote>
<p>可以通过 transition-origin 设定缩放原点 （可以是数值或方位词 top、left…)</p>
</blockquote>
</li>
</ul>
<h3 id="translate-平移"><a href="#translate-平移" class="headerlink" title="translate 平移"></a>translate 平移</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">100px</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50%</span>, <span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>translate 的值可以是 px，也可以是百分比，如果是百分比，那么参照的是<strong>自身的宽高</strong></li>
<li>translate 移动的元素并不会影响其他盒子，类似于相对定位</li>
</ul>
<h3 id="rotate-旋转"><a href="#rotate-旋转" class="headerlink" title="rotate 旋转"></a>rotate 旋转</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="comment">/* 旋转360度 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">360deg</span>); <span class="comment">/* 逆时针旋转360度 */</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>单位是 deg，角度，不是 px</li>
<li>正值顺时针转，负值逆时针转</li>
<li>可以通过 transition-origin 设定旋转原点</li>
</ul>
<blockquote>
<p>rotate 旋转会让坐标轴也跟着旋转</p>
</blockquote>
<h3 id="skew-斜切-变形"><a href="#skew-斜切-变形" class="headerlink" title="skew 斜切(变形)"></a>skew 斜切(变形)</h3><p>skew 在实际开发中，是用的最少的一个属性。一般来说，x 和 y 只会倾斜其中的一个</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在水平方向倾斜30deg */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">30deg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在垂直方向倾斜30deg */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br></pre></td></tr></table></figure>

<p>【案例：扫光效果.html】</p>
<h3 id="transform-origin-转换原点"><a href="#transform-origin-转换原点" class="headerlink" title="transform-origin 转换原点"></a>transform-origin 转换原点</h3><blockquote>
<p>通过 transform-origin 可以设置转换的中心原点</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: center center;</span><br><span class="line"><span class="attribute">transform-origin</span>: <span class="number">40px</span> <span class="number">40px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="转换合写问题"><a href="#转换合写问题" class="headerlink" title="转换合写问题"></a>转换合写问题</h3><blockquote>
<p>transform 属性只能写一个，如果写了多个会覆盖，属性的值可以写多个， 用空格隔开即可</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">800px</span>) <span class="built_in">scale</span>(<span class="number">1.5</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>transform 属性可以连写，但是顺序对效果影响的，因为它会在第一个效果的基础上执行第二个效果，然后执行第三个效果（通常会把 rotate 放后面）</li>
<li>如果对 transform 进行过度效果的时候，初始状态和结束状态要一一对应</li>
</ul>
<p>【案例：盾牌打散与合并效果.html】</p>
<h2 id="3D-转换"><a href="#3D-转换" class="headerlink" title="3D 转换"></a>3D 转换</h2><p>思考：2D 与 3D 的区别？</p>
<h3 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h3><blockquote>
<p>用 X、Y、Z 分别表示空间的 3 个维度，三条轴互相垂直。<strong>注意+Y 是向下的</strong></p>
</blockquote>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204311.png"></p>
<h3 id="perspective-透视"><a href="#perspective-透视" class="headerlink" title="perspective 透视"></a>perspective 透视</h3><blockquote>
<p>电脑显示屏是一个 2D 的平面，因为我们看不出来旋转的方向，通过 perspective 属性，可以定义 3D 元素距视图的距离，单位是 px。</p>
<p>说白了，设置了 perspective 属性后，就有了进大远小的效果了，在视觉上，让我们能看出来 3d 的效果。</p>
<p>注意：当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">perspective</span>：<span class="number">500px</span>;</span><br></pre></td></tr></table></figure>

<p>对于我们眼睛来说，离我们越近的房子，我们会感觉到这个房子越大，离我们越远的房子，就会感觉越小，其实房子的大小都是一样的，只是在视觉上的一种不同。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204343.png"></p>
<h3 id="rotate-旋转-1"><a href="#rotate-旋转-1" class="headerlink" title="rotate 旋转"></a>rotate 旋转</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>); <span class="comment">/* 让元素在平面2D中旋转，相当于沿着Z轴旋转 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>); <span class="comment">/* 让元素沿着X轴转45度 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>); <span class="comment">/* 让元素沿着Y轴转45度 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>); <span class="comment">/* 让元素沿着Z轴转45度 */</span></span><br></pre></td></tr></table></figure>

<p>【3D 旋转.html】</p>
<h3 id="translate-平移-1"><a href="#translate-平移-1" class="headerlink" title="translate 平移"></a>translate 平移</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 沿着X轴的正方向移动45px */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">45px</span>);</span><br><span class="line"><span class="comment">/* 沿着Y轴的正方向移动45px */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">45px</span>);</span><br><span class="line"><span class="comment">/* 沿着Z轴的正方向移动45px */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">45px</span>);</span><br></pre></td></tr></table></figure>

<p>【3D 平移.html】</p>
<p>【立方体.html】</p>
<h3 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h3><p>transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素。注意这个属性只能给父元素添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">flat: 默认值，<span class="number">2</span>d显示</span><br><span class="line">preserve-<span class="number">3</span>d: <span class="number">3</span>d显示</span><br></pre></td></tr></table></figure>

<p>transform-style 与 perspective 区别</p>
<ul>
<li>透视：透视只是相当于设置了一个距离，辅助我们查看 3D 效果的工具</li>
<li>preserve-3d：给父盒子添加，让子元素保留 3D 的位置，说白了，只有设置了 preserve-3d，这个元素才能被称之为 3d 元素</li>
<li>一个 3d 元素可以没有 perspective，但是不能没有 transform-style</li>
</ul>
<p>【3D 导航案例.html】</p>
<p>【切割轮播图案例】</p>
<p>【3D 相册案例】</p>
<h3 id="过渡结束事件"><a href="#过渡结束事件" class="headerlink" title="过渡结束事件"></a>过渡结束事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给最后一个ul添加过渡结束事件（节流阀）</span></span><br><span class="line">uls[uls.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;transitionend&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isCanAnimate = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><blockquote>
<p>动画可以通过设置多个节点来精确控制一个或者一组动画，常用来实现复杂的动画效果</p>
</blockquote>
<p>动画与过渡的区别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过渡必须触发，需要两个状态的改变。</span><br><span class="line">动画可以一直运行下去，不需要触发。实现效果与过渡差不多</span><br></pre></td></tr></table></figure>

<p>使用一个动画的基本步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.通过 @keyframes 指定动画序列</span><br><span class="line">2.通过百分比或者 from/to 将动画分割成多个节点</span><br><span class="line">3.在各个节点中分别定义样式</span><br><span class="line">4.通过 animation 将动画应用于相应的元素</span><br></pre></td></tr></table></figure>

<h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>animation 是一个复合属性，一共有 8 个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">animation-name: 动画名称，由@keyframes定义的</span><br><span class="line">animation-duration: 动画的持续时间 默认0s</span><br><span class="line">animation-timing-function: 动画的过渡类型 ease(默认) linear steps</span><br><span class="line">animation-delay: 动画的延迟时间 默认0s</span><br><span class="line">animation-iteration-count: 动画的循环次数 默认1次  infinite：无限循环</span><br><span class="line">animation-direction: 设置动画在循环中的方向 normal：正向(默认) reverse(反向) alternate(往复循环)</span><br><span class="line">animation-fill-mode: 设置动画结束时的状态 none：默认 backwards：动画结束时停留在开始状态 forwards: 动画结束时停留在结束的状态</span><br><span class="line">animation-play-state: 设置动画的状态。running：运动(默认) paused：暂停</span><br></pre></td></tr></table></figure>

<h3 id="动画库的使用"><a href="#动画库的使用" class="headerlink" title="动画库的使用"></a>动画库的使用</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kYW5lZGVuLmdpdGh1Yi5pby9hbmltYXRlLmNzcy8=">https://daneden.github.io/animate.css/</span></p>
<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>我们经常把网页常用的一些小的图标，做成精灵图，然后通过 background-position 去调整位置，但是这个需要引入图片，并且图片大小改变之后会失真。在 CSS3 中可以使用字体图片，即使用图标跟使用文字一样</p>
<p>优点：</p>
<p>1、将所有图标打包成字体库，减少请求</p>
<p>2、具有矢量性，可保证清晰度，可以修改文字的颜色或者样式</p>
<p>3、使用灵活，便于维护</p>
<p>阿里巴巴矢量图标：<span class="exturl" data-url="aHR0cDovL3d3dy5pY29uZm9udC5jbi8=">http://www.iconfont.cn/</span></p>
<p>Font Awesome 使用 <span class="exturl" data-url="aHR0cDovL2ZvbnRhd2Vzb21lLmRhc2hnYW1lLmNvbS8=">http://fontawesome.dashgame.com/</span></p>
<h2 id="弹性布局-伸缩布局"><a href="#弹性布局-伸缩布局" class="headerlink" title="弹性布局(伸缩布局)"></a>弹性布局(伸缩布局)</h2><blockquote>
<p>布局：其实就是调整元素在水平和垂直方向上的布局方式</p>
</blockquote>
<p>CSS3 在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p>
<p>当给一个盒子设置了 display：flex 之后，这个盒子就有了 <strong>主轴</strong> 和 <strong>侧轴</strong> 的概念<br>主轴：默认是水平方向向右，子元素在主轴上排列<br>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向向下</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204407.png"></p>
<h3 id="给容器设置的样式"><a href="#给容器设置的样式" class="headerlink" title="给容器设置的样式"></a>给容器设置的样式</h3><ul>
<li>flex-direction</li>
</ul>
<p>用来调整主轴的方向，默认是水平方向，可选值有：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">row：主轴方向为水平向右（默认）</span><br><span class="line">column：主轴方向为竖直向下</span><br><span class="line">row-reverse: 主轴方向为水平向左</span><br><span class="line">column-reverse: 主轴方向是竖直向上</span><br></pre></td></tr></table></figure>

<ul>
<li>justify-content</li>
</ul>
<p>用来设置子元素在 <strong>主轴方向的对齐方式</strong> ，可选的值有：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>-start: 弹性盒子元素将向起始位置对齐</span><br><span class="line">flex-end: 弹性盒子元素将向结束位置对齐</span><br><span class="line">center: 弹性盒子元素将向行中间位置对齐</span><br><span class="line">space-between: 第一个贴左边，最后一个贴右边，其他盒子均分，保证每个盒子之间的空隙是相等的</span><br><span class="line">space-around: 弹性盒子元素会平均地分布在行里（不会贴边）</span><br></pre></td></tr></table></figure>

<ul>
<li>align-items</li>
</ul>
<p>用于调整 <strong>侧轴的对其方式</strong> ，可选的值有：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>-start：元素在侧轴的起始位置对其</span><br><span class="line"><span class="attribute">flex</span>-end：元素在侧轴的结束位置对其</span><br><span class="line">center：元素在侧轴上居中对其</span><br><span class="line">stretch：元素的高度会被拉伸到最大（不能给死高度）</span><br></pre></td></tr></table></figure>

<ul>
<li>flex-wrap</li>
</ul>
<p>控制 flex 容器是单行或者多行，默认不换行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">nowrap：不换行（默认），会压缩子盒子的宽度</span><br><span class="line">wrap：当宽度不够的时候，会换行</span><br></pre></td></tr></table></figure>

<ul>
<li>align-content</li>
</ul>
<p>用来设置多行时侧轴的排列方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>-start：各行向侧轴的起始位置堆叠</span><br><span class="line"><span class="attribute">flex</span>-end：各行向弹性盒容器的结束位置堆叠</span><br><span class="line">center：各行向弹性盒容器的中间位置堆叠</span><br><span class="line">space-between：第一行贴上边，最后一个行贴下边,其他行在弹性盒容器中平均分布</span><br><span class="line">space-around：各行在侧轴中平均分布</span><br><span class="line">stretch：拉伸，不设置高度的情况下</span><br></pre></td></tr></table></figure>

<p>align-items 与 align-content 的区别</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-items</span>调整的是侧轴的对其方式，不换行一般用align-itemsalign-<span class="attribute">content</span>: 必须是多行才生效，如果单行，没有效果。换行了就用 align-content;</span><br></pre></td></tr></table></figure>

<p>!&gt; 上述属性都是给父盒子设置的，这些样式影响的是所有的子元素，接下来的几个属性是给子盒子设置的，用来单独设置子元素的样式</p>
<h3 id="给子元素设置的样式"><a href="#给子元素设置的样式" class="headerlink" title="给子元素设置的样式"></a>给子元素设置的样式</h3><ul>
<li>flex</li>
</ul>
<p>用来设置子盒子如何分配主轴剩余空间</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>order</li>
</ul>
<p>定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">order</span>: <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>align-self</li>
</ul>
<p>align-self 用于设置当前元素在侧轴的位置，是给子元素设置，优先级比 align-items 的优先级高</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">取值与 <span class="attribute">align-items</span> 的取值一样</span><br></pre></td></tr></table></figure>

<p>阮一峰的博客<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTUvMDcvZmxleC1ncmFtbWFyLmh0bWw=">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</span></p>
<p>【案例：6 面神骰】</p>
<p>【案例：携程网】</p>
<p>【案例：360 浏览器】</p>
<h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><p>微调元素</p>
<ul>
<li>margin-top: - ;</li>
<li>transform: translateY();</li>
<li>position: relative; top: - ;</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基础</title>
    <url>/394.html</url>
    <content><![CDATA[<h1 id="文档类型-lt-DOCTYPE-gt"><a href="#文档类型-lt-DOCTYPE-gt" class="headerlink" title="文档类型&lt;!DOCTYPE&gt;"></a>文档类型&lt;!DOCTYPE&gt;</h1><p><code>&lt;!DOCTYPE html&gt;</code> 声明告诉浏览器按照HTML5规范解析页面</p>
<h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>告诉浏览器当前 html 文档使用 UTF-8 进行的字符编码</p>
<h1 id="link-标签-ref-属性值-prefetch-preload-用于预加载"><a href="#link-标签-ref-属性值-prefetch-preload-用于预加载" class="headerlink" title="link 标签 ref 属性值 prefetch preload 用于预加载"></a>link 标签 ref 属性值 prefetch preload 用于预加载</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">ref</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;*.js&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- preload需要写上正确的as属性,如果不写或错误，等同于XHR请求，优先级非常低 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;font.woff&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span> <span class="attr">crossorigin</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 预加载字体你还必须设置crossorigin 属性 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>preload 是用于预加载当前页的资源，浏览器会优先加载它们(加载后并不执行，在需要执行的时候再执行)</li>
</ul>
<p>将加载和执行分离开，可不阻塞渲染和 document 的 onload 事件<br>提前加载指定资源，不再出现依赖的 font 字体隔了一段时间才刷出</p>
<ul>
<li><p>prefetch 是用于预加载后续页面使用的资源，浏览器也会加载它们，但优先级不高</p>
</li>
<li><p>避免混用 preload 和 prefetch，混用的话，并不会复用资源，而是会重复加载</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 浏览器会加载两次改字体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://at.alicdn.com/t/font.woff&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://at.alicdn.com/t/font.woff&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>插入的脚本（无论在什么位置）在网络优先级中是很低级</p>
<h1 id="script-标签的-defer-和-async-异步加载"><a href="#script-标签的-defer-和-async-异步加载" class="headerlink" title="script 标签的 defer 和 async 异步加载"></a>script 标签的 defer 和 async 异步加载</h1><p>这两个属性都告诉浏览器，它可以 “在后台” 加载脚本的同时继续解析 HTML，并在脚本加载完之后再执行。这样，脚本下载就不会阻塞 DOM 构建和页面渲染了</p>
<p>defer 和 async 之间的不同是他们开始执行脚本的时机的不同</p>
<p>async(H5) 一旦脚本可用，则会异步执行（仅适用于外部脚本） 脚本在它们完成下载完成后的第一时间执行，如果一个指定 async 的脚本很快就完成了下载，那么它的执行会阻塞 DOM 构建以及所有在之后才完成下载的同步脚本。</p>
<p>defer 规定当页面已完成解析后，执行脚本（仅适用于外部脚本） 脚本会按照它在 HTML 中出现的顺序执行，并且不会阻塞解析。</p>
<h1 id="表格标签-table"><a href="#表格标签-table" class="headerlink" title="表格标签 table"></a>表格标签 table</h1><p>table 属性 重点记住 cellspacing 、 cellpadding</p>
<ul>
<li><code>cellspacing</code> 设置单元格与单元格边框之间的空白距离</li>
<li><code>cellpadding</code> 设置单元格内容与单元格边框之间的空白距离</li>
</ul>
<p>table 合并单元格</p>
<ul>
<li>跨行合并（向下合并）：rowspan&#x3D;”合并单元格的个数”</li>
<li>跨列合并（向右合并）：colspan&#x3D;”合并单元格的个数”</li>
</ul>
<h1 id="input-file-控件"><a href="#input-file-控件" class="headerlink" title="input file 控件"></a>input file 控件</h1><p>使用 input file 进行文件上传时，重复选择相同文件时，change 事件不再触发<br>解决方式：手动将 file 的 value 值设置为空</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/gif,image/jpeg&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;uploadFile($event)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$event.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">file.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="HTML5-语义化标签"><a href="#HTML5-语义化标签" class="headerlink" title="HTML5 语义化标签"></a>HTML5 语义化标签</h1><p>HTML5 新的语义化标签</p>
<p><code>header</code> 头部、<code>nav</code> 导航、<code>footer</code> 底部、<code>aside</code> 侧边栏、<code>article</code> 文章、<code>section</code> 区块、<code>main</code> 主体区域</p>
<h1 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h1><blockquote>
<p>js 在 H5 中给所有的 DOM 对象新增了一个属性 classList<br>classList 是一个集合，会存储某个元素上所有的类名，使用 classList 来替代 className 操作 class 类</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加类</span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;classname&#x27;</span>)</span><br><span class="line"><span class="comment">// 移除类</span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;classname&#x27;</span>)</span><br><span class="line"><span class="comment">// 切换类</span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;classname&#x27;</span>)</span><br><span class="line"><span class="comment">// 判断类</span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;classname&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h1><blockquote>
<p>H5 规定，以后但凡给标签增加自定义属性，都应该用 <code>data-</code> 开头<br>H5 给所有的 DOM 对象增加了一个 <code>dataset</code> 的属性，这个属性中会包含所有 data- 开头的属性</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;zs&quot;</span> <span class="attr">data-age</span>=<span class="string">&quot;10&quot;</span> <span class="attr">data-user-name</span>=<span class="string">&quot;ls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>) <span class="comment">// DOMStringMap &#123;name: &#x27;zs&#x27;, age: &#x27;10&#x27;, userName: &#x27;ls&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">dataset</span>.<span class="property">aaBb</span> = <span class="string">&#x27;cc&#x27;</span> <span class="comment">// 在html结构中或添加 data-aa-bb=&quot;cc&quot; 的自定义属性</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>html 中属性是忽略大小写的，如果需要，应使用中划线 <code>-</code> 进行分隔，在 js 中会转换成驼峰的形式，如<code>data-user-name ==&gt; userName</code></p>
<h1 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h1><p><code>navigator.onLine</code> 属性，是一个布尔值：脱机状态返回 false，在线状态返回 true</p>
<p><strong>注意：返回 true 不代表不一定能访问互联网，因为有可能连接的是局域网。但是返回 false 则表示一定连不上网。</strong></p>
<h2 id="监听网络变化"><a href="#监听网络变化" class="headerlink" title="监听网络变化"></a>监听网络变化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 网络连接时会被调用</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;online&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;online&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当网络断开时会被调用</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;offline&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;offline&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="web-存储"><a href="#web-存储" class="headerlink" title="web 存储"></a>web 存储</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>特点：</p>
<ul>
<li>大小 4k</li>
<li>生命周期：默认会话级别，但是可以设置过期时间</li>
<li>数据可以在同一个网站的页面共享</li>
<li>在请求时会自动携带</li>
<li>以字符串形式存储，这个字符串有固定的格式：key&#x3D;value;key1&#x3D;value1；</li>
<li>一般用于存储 sessionId，可以实现登录状态保持 (会话保持)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;name=zhangsan&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;age=18&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;sex=23&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置过期时间</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;sex=12;max-age=3600&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取cookie</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<h2 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h2><ul>
<li><p>sessionStorage 和 localStorage 特点</p>
<ul>
<li>都保存在客户端</li>
<li>大小为 5M 左右</li>
<li>使用方法相同</li>
<li>以键值对的方式，存储字符串格式的数据</li>
</ul>
</li>
<li><p>sessionStorage 和 localStorage 区别</p>
<ul>
<li>sessionStorage 生命周期默认为一个会话周期，且不能设置周期，一旦关闭浏览器，就销毁了，不能在不同页面共享数据</li>
<li>localStorage 永久生效，除非手动删除，可以多个窗口共享</li>
</ul>
</li>
<li><p>使用方法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setItem</span>(key, value) <span class="comment">// 设置存储内容</span></span><br><span class="line"><span class="title function_">getItem</span>(key) <span class="comment">// 读取存储内容</span></span><br><span class="line"><span class="title function_">removeItem</span>(key) <span class="comment">// 删除键值为key的存储内容</span></span><br><span class="line"><span class="title function_">clear</span>() <span class="comment">// 清空所有存储内容</span></span><br></pre></td></tr></table></figure>

<h2 id="Cookie-和-WebStorage-比较"><a href="#Cookie-和-WebStorage-比较" class="headerlink" title="Cookie 和 WebStorage 比较"></a>Cookie 和 WebStorage 比较</h2><p><strong>cookie</strong></p>
<ul>
<li>大小受限</li>
<li>用户可以操作（禁用）cookie，使功能受限</li>
<li>安全性较低</li>
<li>有些状态不可能保存在客户端</li>
<li>每次访问都要传送 cookie 给服务器，浪费带宽</li>
</ul>
<p><strong>WebStorage</strong></p>
<ul>
<li>存储空间更大：cookie 为 4KB，而 WebStorage 是 5MB</li>
<li>对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage 会非常方便</li>
<li>WebStorage 不会随着 HTTP header 发送到服务器端，所以安全性相对于 cookie 来说比较高一些，不会担心截获，但是仍然存在伪造问题</li>
<li>WebStorage 数据操作比 cookie 方便</li>
</ul>
<h2 id="sessionStorage-多标签页共享"><a href="#sessionStorage-多标签页共享" class="headerlink" title="sessionStorage 多标签页共享"></a>sessionStorage 多标签页共享</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;storage&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">key</span> === <span class="string">&#x27;token&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, event.<span class="property">newValue</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><blockquote>
<p>通过 FileReader 对象我们可以读取本地存储的文件（用户通过 input:file 上传的文件），可以使用 File 对象来指定所要读取的文件或数据。其中 File 对象可以是来自用户在一个<code>&lt;input&gt;</code>元素上选择文件后返回的 FileList 对象，也可以来自由拖放操作生成的 DataTransfer</p>
</blockquote>
<h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><p>对于 file 类型的 input 框，DOM 对象中存在一个 files 属性，这个属性是 FileList 对象，是一个伪数组，里面存储着上传的所有文件，当 input 框指定了 multiple 属性之后，就可以上传多个文件了。</p>
<h2 id="file-对象"><a href="#file-对象" class="headerlink" title="file 对象"></a>file 对象</h2><p>File 对象中包含了文件的最后修改时间、文件名、文件类型等信息。</p>
<h2 id="FileReader-对象"><a href="#FileReader-对象" class="headerlink" title="FileReader 对象"></a>FileReader 对象</h2><p>FileReader 是一个 HTML5 新增的对象，用于读取文件（必须通过 input:file 上传）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> file = input.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 创建一个fileReader对象</span></span><br><span class="line"><span class="keyword">var</span> fr = <span class="keyword">new</span> <span class="title class_">FileReader</span></span><br><span class="line"><span class="comment">// 读取文件的两个方法</span></span><br><span class="line">fr.<span class="title function_">readAsText</span>(file) <span class="comment">// 以文本的方式读取文件 ,文本文件</span></span><br><span class="line">fr.<span class="title function_">readAsDataURL</span>(file) <span class="comment">// 以DataURL形式读取文件，图片，视频</span></span><br><span class="line"><span class="comment">// 文件读取完成事件：</span></span><br><span class="line">fr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 当文件读取完成，可以通过result属性获取结果</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fr.<span class="property">result</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片预览</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. FileReader 是异步的</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">file.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="variable language_">this</span>) <span class="comment">// file 中files 属性里面存储了所有上传的文件</span></span><br><span class="line">  <span class="comment">// 这个data就是我们上传的那个文件</span></span><br><span class="line">  <span class="keyword">var</span> data = file.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">// 1. 创建一个文件读取器</span></span><br><span class="line">  <span class="keyword">var</span> fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">  <span class="comment">// 2. 让文件读取器读取整个文件</span></span><br><span class="line">  fr.<span class="title function_">readAsDataURL</span>(data)</span><br><span class="line">  <span class="comment">// 3. 等待文件读取完</span></span><br><span class="line">  <span class="comment">// onload：文件读取完成后，就会触发</span></span><br><span class="line">  fr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 fr.result 就可以获取到最终的结果</span></span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    img.<span class="property">src</span> = fr.<span class="property">result</span></span><br><span class="line">    box.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    box.<span class="title function_">appendChild</span>(img)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. URL.createObjectURL(file)  缺点：同步（阻塞）,占用内存</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">file.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> result = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(data)</span><br><span class="line">  img.<span class="property">src</span> = result</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>+0 -0 Number.NaN NaN undefined null &#39;&#39;  相等性判断</title>
    <url>/397.html</url>
    <content><![CDATA[<h2 id="主要区分-0-和-0、NaN-和-NaN-在不同情况下的相等性区别"><a href="#主要区分-0-和-0、NaN-和-NaN-在不同情况下的相等性区别" class="headerlink" title="主要区分 +0 和 -0、NaN 和 NaN 在不同情况下的相等性区别"></a>主要区分 <code>+0</code> 和 <code>-0</code>、<code>NaN</code> 和 <code>NaN</code> 在不同情况下的相等性区别</h2><p><code>==</code> <code>===</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span> === -<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>) <span class="comment">// false NaN 不与任何值相等，包括自身</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> === <span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>Object.is() 方法判断两个值是否是相同的值。比较时不会做类型转换，这与 <code>==</code> <code>===</code> 运算符的判定方式都不一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">0</span>, +<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(-<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="literal">undefined</span>, <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="literal">null</span>, <span class="literal">null</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>, <span class="title class_">Number</span>.<span class="property">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="number">0</span> / <span class="number">0</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在 Set， Map 内部，两个 NaN 是相等, +0 和 -0 也是相等的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="title class_">NaN</span>, <span class="title class_">NaN</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, +<span class="number">0</span>, -<span class="number">0</span>, &#123;&#125;, &#123;&#125;]</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>(a) <span class="comment">// &#123;NaN, undefined, 0, &#123;&#125;, &#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>比较运算符中 <code>+0</code> 和 <code>-0</code> 是相等的、<code>NaN</code> 和 <code>NaN</code>是不等的</li>
<li>Object.is() 方法中 <code>+0</code> 和 <code>-0</code> 是不相等的、<code>NaN</code> 和 <code>NaN</code>是相等的</li>
<li>在 Set， Map 内部， <code>+0</code> 和 <code>-0</code> 是相等的、<code>NaN</code> 和 <code>NaN</code> 也是相等的</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>addEventListener 以及 vue 中的 .passive 修饰符</title>
    <url>/403.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXI=">https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener</span></p>
<p>添加事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">target.<span class="title function_">addEventListener</span>(type, listener[, useCapture])</span><br><span class="line"><span class="comment">// type: 事件的类型: click mouseover  字符串类型，不带 on</span></span><br><span class="line"><span class="comment">// listener: 函数，每次点击，执行这个函数</span></span><br><span class="line"><span class="comment">// useCapture: 可选，true: 事件在捕获阶段执行，false: 事件在冒泡阶段执行(默认)</span></span><br><span class="line"></span><br><span class="line">target.<span class="title function_">addEventListener</span>(type, listener[, options])</span><br></pre></td></tr></table></figure>

<p>options 可选，可用的选项如下：<br>capture: Boolean，默认 false，等价于以前的 useCapture 参数<br>once: Boolean，默认 false，如果是 true，表示 listener 在添加之后最多只调用一次。 listener 也会在其被调用之后自动移除<br>passive: Boolean，默认 false，设置为 true 时，表示 listener 永远不会调用 preventDefault() 如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。</p>
<p>浏览器无法预先知道一个监听器会不会调用 preventDefault()，它能做的只有等监听器执行完后再去执行默认行为，而监听器执行是要耗时的，有些甚至耗时很明显，这样就会导致页面卡顿</p>
<p><code>.passive</code> 修饰符尤其能够提升移动端的性能<br><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvZXZlbnRzLmh0bWwjJUU0JUJBJThCJUU0JUJCJUI2JUU0JUJGJUFFJUU5JUE1JUIwJUU3JUFDJUE2">vue .passive 事件修饰符</span></p>
<p>移除事件</p>
<p>removeEventListener</p>
<p>在第三个参数是布尔值的时候，addEventListener(“foo”, listener, true) 添加的监听器，必须用 removeEventListener(“foo”, listener, true) 才能删除掉, 因为这个监听器也有可能还注册在了冒泡阶段, 如果第三个参数为 false 则直接通过 removeEventListener(“foo”, listener) 就可以删除</p>
<p>通过 addEventListener(“foo”, listener, {capture: true}) 添加的监听器删除时也同样需要添加 {capture: true} 来删除，当然 {capture: true} 换成 true 也可以</p>
<p>通过 addEventListener(“foo”, listener, {passive: true}) 添加的监听器直接通过 removeEventListener(“foo”, listener) 就可以删除了<br>因为一个监听器同时是 passive 和非 passive（以及同时是 once 和非 once）是说不通的，如果你添加了多个，那么后添加的会忽略</p>
<p>removeEventListener(“foo”, listener, {capture: true}) &#x2F;&#x2F; {capture: true} 必须加，当然 {capture: true} 换成 true 也可以</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>ajax 笔记</title>
    <url>/1646.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们使用 php 动态渲染页面时，有很多比较麻烦的地方。</p>
<ul>
<li>在前端写好页面以后，需要后台进行修改，意味这后端程序员也需要懂前端的知识，其实渲染的工作应该交给前端来做。</li>
<li>前端没有写好页面的话，后端无法开始工作，需要等待前端的页面完成之后才能开始工作，拖延项目的进度。</li>
<li>这种渲染，属于同步渲染，先获取数据, 如果数据获取的慢了, 会严重影响整个页面渲染速度, 且数据更新需要页面刷新</li>
</ul>
<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><blockquote>
<p>即 Asynchronous [e’sɪŋkrənəs] Javascript And XML， AJAX 不是一门新的语言，而是对现有技术的综合利用。 本质是在 HTTP 协议的基础上以异步的方式与服务器进行通信</p>
</blockquote>
<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p><strong>同步和异步概念：</strong></p>
<p>同步：指的就是事情要一件一件做。等做完前一件才能做后一件任务</p>
<p>异步：不受当前任务的影响，两件事情同时进行，做一件事情时，不影响另一件事情的进行</p>
<p>编程中：异步程序代码执行时不会阻塞其它程序代码执行，从而提升整体执行效率</p>
<p><strong>网页异步应用：</strong></p>
<ol>
<li>验证你的用户名是否已经存在（一边输入，一边获取你的信息，和后台比对）。</li>
<li>百度搜索提示，及相关内容展示（一边输入，一边找出了你可能要的内容）。</li>
<li>新浪微博评论（异步加载）。</li>
</ol>
<p>XMLHttpRequest 可以以异步方式的请求数据处理程序, 可实现对网页的部分更新， 而不是刷新整个页面</p>
<h2 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h2><blockquote>
<p>浏览器内建对象，用于与服务器通信(交换数据) ， 由此我们便可实现对网页的部分更新，而不是刷新整个页面。这个请求是异步的，即在往服务器发送请求时，并不会阻碍程序的运行，浏览器会继续渲染后续的结构。</p>
</blockquote>
<h3 id="发送-get-请求"><a href="#发送-get-请求" class="headerlink" title="发送 get 请求"></a>发送 get 请求</h3><p>XMLHttpRequest 以异步的方式发送 HTTP 请求，因此在发送请求时，一样需要遵循 HTTP 协议。</p>
<p><strong>使用 XMLHttpRequest 发送 get 请求的步骤</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个 XMLHttpRequest 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置请求行</span></span><br><span class="line"><span class="comment">// 第一个参数:请求方式  get/post</span></span><br><span class="line"><span class="comment">// 第二个参数:请求的地址 需要在url后面拼上参数列表</span></span><br><span class="line"><span class="comment">// 第三个参数：true 为异步，false为同步，默认为true，设为false没有意义</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;01.php?name=zs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置请求头(get不用设置)</span></span><br><span class="line"><span class="comment">// 请求头中可以设置 Content-Type,用以说明请求主体的内容是如何编码</span></span><br><span class="line"><span class="comment">// get 请求时没有请求体,无需设置请求头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 设置请求体</span></span><br><span class="line"><span class="comment">// get 请求的请求体为空,因为参数列表拼接到 url 后面了</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>) <span class="comment">// 参数为 null 或什么都不写</span></span><br></pre></td></tr></table></figure>

<p>注意点 :</p>
<ul>
<li>get 请求，设置请求行时，需要把参数列表拼接到 url 后面</li>
<li>get 请求不用设置请求头，不用说明请求主体的编码方式</li>
<li>get 请求的请求体为 null</li>
</ul>
<h3 id="发送-post-请求"><a href="#发送-post-请求" class="headerlink" title="发送 post 请求"></a>发送 post 请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个 XMLHttpRequest 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置请求行 post请求的参数列表在请求体</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;02.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置请求头, post 请求必须要设置 content-type, 标记请求体内容的解析方式</span></span><br><span class="line"><span class="comment">// 如果不设置请求头,请求能够发送出去，但是后端无法解析获取数据</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 设置请求体</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=Jepson&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注意点 :</p>
<ul>
<li>post 请求，设置请求行时，不拼接参数列表</li>
<li>post 必须设置请求头中的 content-type 为 <code>application/x-www-form-urlencoded</code>， 标记请求体解析方式</li>
<li>post 请求需要将参数列表设置到请求体中</li>
</ul>
<h3 id="获取响应-readyState"><a href="#获取响应-readyState" class="headerlink" title="获取响应 readyState"></a>获取响应 readyState</h3><p><code>readyState</code>：记录了 XMLHttpRequest 对象的当前状态</p>
<p>readyState 有五种可能的值：</p>
<ul>
<li>xhr.readyState &#x3D; 0 时，UNSENT open 尚未调用</li>
<li>xhr.readyState &#x3D; 1 时，OPENED open 已调用</li>
<li>xhr.readyState &#x3D; 2 时，HEADERS_RECEIVED 接收到头信息</li>
<li>xhr.readyState &#x3D; 3 时，LOADING 接收到响应主体</li>
<li><code>xhr.readyState = 4</code> 时，DONE 响应完成</li>
</ul>
<p>HTTP 响应分为 3 个部分，状态行、响应头、响应体。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给xhr注册一个 onreadystatechange 事件，当 xhr 的状态发生状态发生改变时，会触发这个事件。</span></span><br><span class="line"><span class="comment">// onreadystatechange 只会监听 2， 3， 4 的状态变化</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>)</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 获取状态行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态行:&#x27;</span> + xhr.<span class="property">status</span>) <span class="comment">// 成功返回 200</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">//2. 获取响应头</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有的响应头:&#x27;</span> + xhr.<span class="title function_">getAllResponseHeaders</span>())</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;指定响应头:&#x27;</span> + xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;content-type&#x27;</span>))</span><br><span class="line">      <span class="comment">//3. 获取响应体</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>【判断用户名是否存在】</p>
<p>【用户登录案例】</p>
<p>【聊天机器人案例】</p>
<h2 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h2><blockquote>
<p>浏览器端只是负责用户的交互和数据的收集以及展示，真正的数据都是存储在服务器端的。</p>
<p>我们现在通过 ajax 的确可以返回一些简单的数据（一个字符串），但是在实际开发过程中，肯定会会设计到大量的复杂类型的数据传输，比如数组、对象等，但是每个编程语言的语法都不一样。</p>
<p>因此我们会采用通过的数据交换格式（ <code>XML</code> 、<code>JSON</code> ）来进行数据的交互。</p>
</blockquote>
<h3 id="XML-了解即可"><a href="#XML-了解即可" class="headerlink" title="XML(了解即可)"></a>XML(了解即可)</h3><p><strong>什么是 XML</strong></p>
<ul>
<li>XML 指可扩展标记语言（EXtensible Markup Language）</li>
<li>XML 是一种标记语言，很类似 HTML</li>
<li>XML 的设计宗旨是传输数据，而非显示数据</li>
<li>XML 标签没有被预定义。您需要自行定义标签。</li>
</ul>
<p><strong>语法规范</strong></p>
<ul>
<li>第一行必须是版本信息</li>
<li>必须有一个根元素（有且仅有一个）</li>
<li>标签不可有空格、不可以数字或 . 开头、大小写敏感</li>
<li>不可交叉嵌套，都是双标签，如果是单标签，必须闭合</li>
<li>属性双引号（浏览器自动修正成双引号了）</li>
<li>特殊符号要使用实体</li>
<li>注释和 HTML 一样</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">desc</span>&gt;</span>路人甲<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">desc</span>&gt;</span>路人乙<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>php 获取 xml 文件的内容</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意: 如果需要返回 xml 数据, 需要将 content-type 改成 text/xml, 不然浏览器以 text/html 解析</span></span><br><span class="line"><span class="title function_ invoke__">header</span>( <span class="string">&#x27;content-type:text/xml;charset=utf-8&#x27;</span> );</span><br><span class="line"><span class="comment">// file_get_content 用于获取文件的内容</span></span><br><span class="line"><span class="comment">// 参数: 文件的路径</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">file_get_content</span>( <span class="string">&quot;data.xml&quot;</span> );</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br></pre></td></tr></table></figure>

<p><strong>js 解析 xml</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取服务端返回的 xml 数据，需要使用 xhr.responseXML，这是一个 document 对象，可以使用 DOM 中的方法查找元素。</span></span><br><span class="line"><span class="keyword">var</span> data = xhr.<span class="property">responseXML</span></span><br><span class="line"><span class="comment">// 获取所有的学生</span></span><br><span class="line"><span class="keyword">var</span> students = data.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;student&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>缺点：虽然可以描述和传输复杂数据，但是其解析过于复杂, 并且体积较大，所以实现开发已经很少使用了</p>
<h3 id="JSON-数据"><a href="#JSON-数据" class="headerlink" title="JSON 数据"></a>JSON 数据</h3><p><code>JSON</code> (JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript 规范，采用独立于编程语言的文本格式来存储和表示数据</p>
<ul>
<li>数据在键值对中</li>
<li>数据由逗号分隔(最后一个 键值对不能带逗号)</li>
<li>花括号保存对象，方括号保存数组</li>
<li>键和值使用双引号</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span> &#125; <span class="comment">// 这是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个 JSON 字符串，本质是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>JSON 数据在不同语言进行传输时，类型为字符串，不同的语言各自也都对应有解析方法，解析完成后就能很方便的使用了</strong></p>
<h4 id="php-处理-json"><a href="#php-处理-json" class="headerlink" title="php 处理 json"></a>php 处理 json</h4><ul>
<li>php 关联数组 &#x3D;&#x3D;&gt; json ( json_encode )</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// php的关联数组</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  <span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;world&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;鹏鹏&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// json字符串</span></span><br><span class="line"><span class="variable">$json</span> = <span class="title function_ invoke__">json_encode</span>( <span class="variable">$obj</span> );</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$json</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>json &#x3D;&#x3D;&gt; php 对象&#x2F;关联数组 ( json_decode )</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$json</span> = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="comment">// json字符串</span></span><br><span class="line"><span class="comment">// 第一个参数：json字符串</span></span><br><span class="line"><span class="comment">// 第二个参数：</span></span><br><span class="line"><span class="comment">// false，将json转换成对象(默认)</span></span><br><span class="line"><span class="comment">// true：将json转换成数组(推荐)</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过json文件获取到的内容就是一个json字符串。</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;data.json&quot;</span>);</span><br><span class="line"><span class="comment">// 将json转换成数组</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$data</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure>

<h4 id="JS-处理-json"><a href="#JS-处理-json" class="headerlink" title="JS 处理 json"></a>JS 处理 json</h4><ul>
<li><code>JSON.stringify(obj)</code> ：JS 对象 &#x3D;&#x3D;&gt; JSON 字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) <span class="comment">// &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>JSON.parse(obj)</code> ：JSON 字符串 &#x3D;&#x3D;&gt; JS 对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json) <span class="comment">// &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>【案例：获取表格数据.html】</p>
<h2 id="兼容性处理-了解-不用处理"><a href="#兼容性处理-了解-不用处理" class="headerlink" title="兼容性处理 (了解, 不用处理)"></a>兼容性处理 (了解, 不用处理)</h2><p>现在一般最多兼容到 IE8, 这里以后见到了知道是在处理兼容性就行了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">XMLHttpRequest</span>) &#123;</span><br><span class="line">  <span class="comment">//现代浏览器 IE7+</span></span><br><span class="line">  xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</span></span><br><span class="line">  xmlHttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="封装-ajax-工具函数"><a href="#封装-ajax-工具函数" class="headerlink" title="封装 ajax 工具函数"></a>封装 ajax 工具函数</h2><blockquote>
<p>每次发送 ajax 请求，其实步骤都是一样的，重复了大量代码，我们完全可以封装成一个工具函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 创建xhr对象</span></span><br><span class="line"><span class="comment">//2. 设置请求行</span></span><br><span class="line"><span class="comment">//3. 设置请求头</span></span><br><span class="line"><span class="comment">//3. 设置请求体</span></span><br><span class="line"><span class="comment">//4. 监听响应状态</span></span><br><span class="line"><span class="comment">//5. 获取响应内容</span></span><br></pre></td></tr></table></figure>

<h3 id="参数提取"><a href="#参数提取" class="headerlink" title="参数提取"></a>参数提取</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>参数类型</th>
<th>描述</th>
<th>传值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>string</td>
<td>请求方式</td>
<td>get&#x2F;post</td>
<td>只要不传 post，就是 get</td>
</tr>
<tr>
<td>url</td>
<td>string</td>
<td>请求地址</td>
<td>接口地址</td>
<td>如果不传地址，不发送请求</td>
</tr>
<tr>
<td>async</td>
<td>boolean</td>
<td>是否异步</td>
<td>true&#x2F;fase</td>
<td>只要不传 false，那就是 true，异步请求</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>请求数据</td>
<td><code>&#123;key:value,key1:value2&#125;</code></td>
<td>需要把这个对象拼接成参数的格式 uname&#x3D;hucc&amp;upass&#x3D;12345</td>
</tr>
<tr>
<td>dataType</td>
<td>string</td>
<td>返回的数据类型</td>
<td>xml&#x2F;json&#x2F;text</td>
<td>text</td>
</tr>
<tr>
<td>success</td>
<td>function</td>
<td>响应成功时调用</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>error</td>
<td>function</td>
<td>响应失败时调用</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<h3 id="参数检测"><a href="#参数检测" class="headerlink" title="参数检测"></a>参数检测</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要求参数obj必须传递，否则直接不发送请求</span></span><br><span class="line"><span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果type传递的是post，那就发送post请求，否则发送get请求</span></span><br><span class="line"><span class="keyword">var</span> type = obj.<span class="property">type</span> == <span class="string">&#x27;post&#x27;</span> ? <span class="string">&#x27;post&#x27;</span> : <span class="string">&#x27;get&#x27;</span></span><br><span class="line"><span class="keyword">var</span> url = obj.<span class="property">url</span></span><br><span class="line"><span class="keyword">if</span> (!url) &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只有当async传递了false，才会发送同步请求，不然只发送异步请求</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = obj.<span class="property">async</span> == <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="完整版本"><a href="#完整版本" class="headerlink" title="完整版本"></a>完整版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = &#123;</span><br><span class="line">  <span class="attr">ajax</span>: <span class="keyword">function</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果options参数没有传递，直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (!options || <span class="keyword">typeof</span> options !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理默认参数</span></span><br><span class="line">    <span class="comment">// 如果参数不是post，那就默认为get</span></span><br><span class="line">    <span class="keyword">var</span> type = options.<span class="property">type</span> === <span class="string">&#x27;post&#x27;</span> ? <span class="string">&#x27;post&#x27;</span> : <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    <span class="comment">// 如果没有传url，直接返回</span></span><br><span class="line">    <span class="keyword">var</span> url = option.<span class="property">url</span></span><br><span class="line">    <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果参数不是 false，那就默认是 true，发异步请求</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">async</span> = options.<span class="property">async</span> == <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 把 option.data 对象中的数据拼接成键值对的字符串</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="title function_">getData</span>(options.<span class="property">data</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求行</span></span><br><span class="line">    <span class="comment">// 如果是get请求，并且要上传参数，需要把参数拼接到url后面</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">      url += <span class="string">&#x27;?&#x27;</span> + data</span><br><span class="line">      data = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.<span class="title function_">open</span>(type, url, <span class="keyword">async</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">      xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置请求参数</span></span><br><span class="line">    xhr.<span class="title function_">send</span>(data)</span><br><span class="line"></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">//判断一下,如果dataType的值是json,就转成js对象.如果是xml,就返回dom对象,其他都是普通文本</span></span><br><span class="line">          <span class="keyword">if</span> (options.<span class="property">dateType</span> === <span class="string">&#x27;json&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (option.<span class="property">dataType</span> === <span class="string">&#x27;xml&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = xhr.<span class="property">responseXML</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> result = xhr.<span class="property">responseText</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">/*执行成功函数*/</span></span><br><span class="line">          options.<span class="property">success</span> &amp;&amp; options.<span class="title function_">success</span>(result)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          options.<span class="property">error</span> &amp;&amp; options.<span class="title function_">error</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getData</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 将obj对象转换成参数</span></span><br><span class="line">    <span class="comment">// 将对象转换成参数列表</span></span><br><span class="line">    <span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(k + <span class="string">&#x27;=&#x27;</span> + obj[k])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【登录案例】</p>
<h2 id="jQuery-中的-ajax-方法"><a href="#jQuery-中的-ajax-方法" class="headerlink" title="jQuery 中的 ajax 方法"></a>jQuery 中的 ajax 方法</h2><blockquote>
<p>jQuery 为我们提供了更强大的 Ajax 封装</p>
</blockquote>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h3><p>参数列表</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>描述</th>
<th>取值</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>接口地址</td>
<td></td>
<td>url:”02.php”</td>
</tr>
<tr>
<td>type</td>
<td>请求方式</td>
<td>get&#x2F;post</td>
<td>type:”get”</td>
</tr>
<tr>
<td>timeout</td>
<td>超时时间</td>
<td>单位毫秒</td>
<td>timeout:5000</td>
</tr>
<tr>
<td>dataType</td>
<td>服务器返回的格式</td>
<td>json&#x2F;xml&#x2F;text(默认)</td>
<td>dataType:”json”</td>
</tr>
<tr>
<td>data</td>
<td>发送的请求数据</td>
<td>对象</td>
<td>data:{name:”zs”, age:18}</td>
</tr>
<tr>
<td>beforeSend</td>
<td>调用前的回调函数</td>
<td>function(){}</td>
<td>beforeSend:function(){ alert(1) }</td>
</tr>
<tr>
<td>success</td>
<td>成功的回调函数</td>
<td>function (data) {}</td>
<td>success:function (data) {}</td>
</tr>
<tr>
<td>error</td>
<td>失败的回调函数</td>
<td>function (error) {}</td>
<td>error:function(data) {}</td>
</tr>
<tr>
<td>complete</td>
<td>完成后的回调函数</td>
<td>function () {}</td>
<td>complete:function () {}</td>
</tr>
</tbody></table>
<p>使用示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// 请求类型</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;02.php&#x27;</span>, <span class="comment">// 请求地址</span></span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;, <span class="comment">// 请求数据</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 希望接受的数据类型</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// 设置超时时间</span></span><br><span class="line">  <span class="attr">beforeSend</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// alert(&quot;发送前调用&quot;);</span></span><br><span class="line">    <span class="comment">// jq的ajax方法中beforeSend函数中如果执行了return false,那么请求就不发送了</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果有 dataType:&quot;json&quot;，或后台有header(content-type: text/json)，res就是已经转换好的js对象</span></span><br><span class="line">    <span class="comment">// alert(&quot;成功时调用&quot;);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// alert(&quot;失败时调用&quot;);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// alert(&quot;请求完成时调用&quot;); // 不管成功失败都会执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>【案例：登录案例.html】</p>
<h2 id="接口化开发"><a href="#接口化开发" class="headerlink" title="接口化开发"></a>接口化开发</h2><p>请求地址即所谓的接口，通常我们所说的接口化开发，其实是指一个接口对应一个功能， 并且严格约束了<strong>请求参数</strong> 和<strong>响应结果</strong> 的格式，这样前后端在开发过程中，可以减少不必要的讨论， 从而并行开发，可以极大的提升开发效率，另外一个好处，当网站进行改版后，服务端接口进行调整时，并不影响到前端的功能。</p>
<h3 id="获取短信验证码"><a href="#获取短信验证码" class="headerlink" title="获取短信验证码"></a>获取短信验证码</h3><p>【案例：register】</p>
<p><strong>需求文档(产品)</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">总需求：点击获取验证码按钮，向服务端发送请求, 调用服务器端短信接口, 服务器端根据传参, 调用第三方短信接口, 给手机发送验证码</span><br><span class="line"></span><br><span class="line">需求<span class="number">1</span>：格式校验</span><br><span class="line">(<span class="number">1</span>) 手机号码不能为空   如果为空提示<span class="string">&quot;手机号不能为空&quot;</span></span><br><span class="line">(<span class="number">2</span>) 手机号码格式必须正确, 提示<span class="string">&quot;请输入正确的手机号码&quot;</span></span><br><span class="line"></span><br><span class="line">需求<span class="number">2</span>：点击发送时，按钮显示为<span class="string">&quot;发送中&quot;</span>,并且不能重复提交请求</span><br><span class="line"></span><br><span class="line">需求<span class="number">3</span>：根据不同的响应结果，进行响应。</span><br><span class="line">(<span class="number">1</span>)如果接口调用成功</span><br><span class="line">  如果响应代码为<span class="number">100</span>，倒计时</span><br><span class="line">  如果响应代码为<span class="number">101</span>，提示手机号重复</span><br><span class="line">(<span class="number">2</span>)如果接口调用失败，告诉用户<span class="string">&quot;服务器繁忙，请稍候再试&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>接口文档</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">接口说明：获取短信验证码</span><br><span class="line">接口地址：getCode.<span class="property">php</span></span><br><span class="line">请求方式：get</span><br><span class="line">接口传参：mobile 手机号</span><br><span class="line">返回类型  json</span><br><span class="line">接口返回：&#123;</span><br><span class="line">			<span class="string">&quot;code&quot;</span>:<span class="string">&quot;101&quot;</span>,</span><br><span class="line">			<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;手机号码存在&quot;</span>,</span><br><span class="line">			<span class="string">&quot;mobile&quot;</span>:<span class="string">&quot;18511249258&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">参数说明: code 当前业务逻辑的处理成功失败的标识  <span class="number">100</span>:成功   <span class="number">101</span>:手机号码存在</span><br><span class="line">		 msg  当前系统返回给前端提示</span><br><span class="line">		 mobile  当前的手机号码</span><br></pre></td></tr></table></figure>

<h3 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h3><p>【案例：register】</p>
<p><strong>表单序列化</strong> serialize</p>
<p>jquery 提供了一个<code>serialize()</code>方法序列化表单，说白就是将表单中带有 name 属性的所有参数拼成一个格式为<code>name=value&amp;name1=value1</code>这样的字符串。方便我们获取表单的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// serialize 方法将表单参数序列化成一个字符串。必须指定 name 属性</span></span><br><span class="line"><span class="comment">// name=pp&amp;pass=123456&amp;repass=123456&amp;mobile=15751776629&amp;code=1234</span></span><br><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>()</span><br></pre></td></tr></table></figure>

<p>jquery 的 ajax 方法，data 参数能够直接识别表单序列化的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;register.php&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">info</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>需求文档</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">注册功能</span><br><span class="line">总需求：点击注册按钮，向服务端发送请求</span><br><span class="line"></span><br><span class="line">需求<span class="number">1</span>:表单校验</span><br><span class="line">    <span class="number">1.1</span> 用户名不能为空，否则提示<span class="string">&quot;请输入用户名&quot;</span></span><br><span class="line">    <span class="number">1.2</span> 密码不能为空，否则提示<span class="string">&quot;请输入密码&quot;</span></span><br><span class="line">    <span class="number">1.3</span> 确认密码必须与密码一直，否则提示<span class="string">&quot;确认密码与密码不一致&quot;</span></span><br><span class="line">    <span class="number">1.4</span> 手机号码不能为空，否则提示<span class="string">&quot;请输入手机号码&quot;</span>;</span><br><span class="line">    <span class="number">1.5</span> 手机号码格式必须正确，否则提示<span class="string">&quot;手机号格式错误&quot;</span></span><br><span class="line">    <span class="number">1.6</span> 短信验证码必须是<span class="number">4</span>位的数字，否则提示<span class="string">&quot;验证码格式错误&quot;</span></span><br><span class="line"></span><br><span class="line">需求<span class="number">2</span>：点击注册按钮时，按钮显示为<span class="string">&quot;注册中...&quot;</span>,并且不能重复提交请求</span><br><span class="line"></span><br><span class="line">需求<span class="number">3</span>：根据不同响应结果，处理响应</span><br><span class="line">	<span class="number">3.1</span> 接口调用成功</span><br><span class="line">        <span class="number">100</span> 提示用户注册成功，3s后跳转到首页</span><br><span class="line">        <span class="number">101</span> 提示用户<span class="string">&quot;用户名已经存在&quot;</span></span><br><span class="line">        <span class="number">102</span> 提示用户<span class="string">&quot;验证码错误&quot;</span></span><br><span class="line">    <span class="number">3.2</span> 接口调用失败，提示<span class="string">&quot;服务器繁忙，请稍后再试&quot;</span>,恢复按钮的值</span><br></pre></td></tr></table></figure>

<p><strong>接口文档</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">接口说明：注册</span><br><span class="line">接口地址：register.<span class="property">php</span></span><br><span class="line">请求方式：post</span><br><span class="line">接口传参：<span class="attr">name</span>:用户名 <span class="attr">pass</span>:密码 <span class="attr">code</span>:验证码  <span class="attr">mobile</span>:手机号</span><br><span class="line">返回类型  json</span><br><span class="line">接口返回：&#123;</span><br><span class="line">			<span class="string">&quot;code&quot;</span>:<span class="string">&quot;100&quot;</span>,</span><br><span class="line">			<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;注册成功&quot;</span>,</span><br><span class="line">			<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Jepson&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">参数说明:</span><br><span class="line">      code 当前业务逻辑的处理成功失败的标识  <span class="number">100</span>:成功  <span class="number">101</span>:用户存在 <span class="number">102</span>:验证码错误</span><br><span class="line">      msg  当前系统返回给前端提示</span><br><span class="line">      <span class="attr">name</span>: 注册的用户名</span><br></pre></td></tr></table></figure>

<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><blockquote>
<p>是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的 HTML 文档。</p>
</blockquote>
<h3 id="为什么要使用模板引擎"><a href="#为什么要使用模板引擎" class="headerlink" title="为什么要使用模板引擎"></a>为什么要使用模板引擎</h3><p>我们通过 ajax 获取到数据后，需要把数据渲染到页面，在学习模板引擎前，我们的做法是大量的拼接字符串，对于结构简单的页面，这么做还行 ，但是如果页面结构很复杂，使用拼串的话<strong>代码可阅读性非常的差，而且非常容易出错，后期代码维护也是相当的麻烦。</strong></p>
<p>总结来说拼串渲染两大缺点：</p>
<ol>
<li>js 中大量充斥着 html 结构拼串代码， 很冗余，可读性差</li>
<li>字符串拼接很麻烦， 且维护起来也很麻烦， 容易出错</li>
</ol>
<h3 id="常见的模板引擎"><a href="#常见的模板引擎" class="headerlink" title="常见的模板引擎"></a>常见的模板引擎</h3><p>BaiduTemplate：<span class="exturl" data-url="aHR0cDovL3RhbmdyYW0uYmFpZHUuY29tL0JhaWR1VGVtcGxhdGUv">http://tangram.baidu.com/BaiduTemplate/</span><br>velocity.js：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoZXBoZXJkd2luZC92ZWxvY2l0eS5qcy8=">https://github.com/shepherdwind/velocity.js/</span><br>ArtTemplate：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1aS9hcnRUZW1wbGF0ZQ==">https://github.com/aui/artTemplate</span></p>
<p>artTemplate 是使用最广泛，效率最高的模板引擎，需要大家掌握。</p>
<h3 id="artTemplate"><a href="#artTemplate" class="headerlink" title="artTemplate"></a>artTemplate</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1aS9hcnQtdGVtcGxhdGU=">github 地址</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hdWkuZ2l0aHViLmlvL2FydC10ZW1wbGF0ZS9kb2NzLw==">中文 api 地址</span></p>
<h4 id="artTemplate-的基本使用"><a href="#artTemplate-的基本使用" class="headerlink" title="artTemplate 的基本使用"></a>artTemplate 的基本使用</h4><p><strong>1. 引入模板引擎的 js 文件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;template-web.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2. 准备模板</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  指定了type为text/html后，这一段script标签并不会解析，也不会显示。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myTmp&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：隔壁老王<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：18<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>技能：查水表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>描述：年轻力气壮<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 准备数据</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3. 准备数据,数据是后台获取的，可以随时变化</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">  <span class="attr">userName</span>: <span class="string">&#x27;隔壁老王&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">skill</span>: <span class="string">&#x27;查水表&#x27;</span>,</span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&#x27;年轻气壮&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 将模板与数据进行绑定</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数：模板的id</span></span><br><span class="line"><span class="comment">//第二个参数：数据</span></span><br><span class="line"><span class="comment">//返回值：根据模板生成的字符串。</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="title function_">template</span>(<span class="string">&#x27;myTmp&#x27;</span>, json)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html)</span><br></pre></td></tr></table></figure>

<p><strong>5. 修改模板</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myTmp&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：</span><span class="template-variable">&#123;&#123;<span class="name">userName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>技能：</span><span class="template-variable">&#123;&#123;<span class="name">skill</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>描述：</span><span class="template-variable">&#123;&#123;<span class="name">desc</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 将数据显示到页面</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">div.<span class="property">innerHTML</span> = html</span><br></pre></td></tr></table></figure>

<h4 id="artTemplate-标准语法"><a href="#artTemplate-标准语法" class="headerlink" title="artTemplate 标准语法"></a>artTemplate 标准语法</h4><p><strong>if 语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;if gender=&#x27;男&#x27;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;man&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;else&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;woman&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;/if&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>each 语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  1. &#123;&#123;each data&#125;&#125;  可以通过$value 和 $index获取值和下标</span></span><br><span class="line"><span class="comment">  2. &#123;&#123;each data v i&#125;&#125;  自己指定值为v，下标为i</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&#123;&#123;each data v i&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;v.url&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;v.src&#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;v.content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果返回的数据是个数组，必须使用对象进行包裹，因为在&#123;&#123;&#125;&#125;中只写书写对象的属性。</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="title function_">template</span>(<span class="string">&#x27;navTmp&#x27;</span>, &#123; <span class="attr">data</span>: info &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="瀑布流案例"><a href="#瀑布流案例" class="headerlink" title="瀑布流案例"></a>瀑布流案例</h2><h3 id="封装-jQuery-瀑布流插件"><a href="#封装-jQuery-瀑布流插件" class="headerlink" title="封装 jQuery 瀑布流插件"></a>封装 jQuery 瀑布流插件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 特点分析：</span></span><br><span class="line"><span class="comment">// 1. 跟以前将的瀑布流不一样的是，这次的瀑布流固定版心为1200px</span></span><br><span class="line"><span class="comment">// 2. 瀑布流固定摆放5列，每一列的宽度固定为232px。</span></span><br><span class="line"><span class="comment">// 思路分析：</span></span><br><span class="line"><span class="comment">// 1. 计算每一列之间的缝隙</span></span><br><span class="line"><span class="comment">// 2. 初始化一个数组，用户存储每一列的高度 [0,0,0,0,0]</span></span><br><span class="line"><span class="comment">// 3. 查找数组的最小列，每次都把图片定位到最小列的位置</span></span><br><span class="line"><span class="comment">// 4. 更新数组最小列的高度（加上定位过来的图片的高度）</span></span><br></pre></td></tr></table></figure>

<p>代码参考：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.fn.<span class="property">waterfall</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> $box = $(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">var</span> $item = $box.<span class="title function_">children</span>()</span><br><span class="line">  <span class="keyword">var</span> boxWidth = $box.<span class="title function_">width</span>() <span class="comment">//父盒子的宽度</span></span><br><span class="line">  <span class="keyword">var</span> itemWidth = <span class="number">232</span> <span class="comment">//每个盒子固定宽度为232</span></span><br><span class="line">  <span class="keyword">var</span> columns = <span class="number">5</span> <span class="comment">//固定摆放5列</span></span><br><span class="line">  <span class="keyword">var</span> gap = (boxWidth - columns * itemWidth) / (columns - <span class="number">1</span>) <span class="comment">//缝隙的宽度 10</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] <span class="comment">//初始化数组</span></span><br><span class="line">  $item.<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//查找最小列</span></span><br><span class="line">    <span class="keyword">var</span> min = arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> minIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (min &gt; arr[i]) &#123;</span><br><span class="line">        min = arr[i]</span><br><span class="line">        minIndex = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置位置</span></span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">      <span class="attr">left</span>: minIndex * (itemWidth + gap),</span><br><span class="line">      <span class="attr">top</span>: min</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//更新数组</span></span><br><span class="line">    arr[minIndex] = min + $(<span class="variable language_">this</span>).<span class="title function_">outerHeight</span>() + gap</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="瀑布流完整版"><a href="#瀑布流完整版" class="headerlink" title="瀑布流完整版"></a>瀑布流完整版</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求分析：</span></span><br><span class="line"><span class="comment">// 1. 页面刚开始，没有任何一张图片。因此需要从通过ajax获取图片</span></span><br><span class="line"><span class="comment">// 2. 使用模版引擎将获取到的数据渲染到页面</span></span><br><span class="line"><span class="comment">// 3. 因为图片路径是从服务端获取的，加载需要时间，需要等待图片加载完成后才能使用瀑布流进行布局。</span></span><br><span class="line"><span class="comment">// 4. 给window注册scroll事件，当触底时，需要动态的加载图片。</span></span><br><span class="line"><span class="comment">// 5. 加载时，显示加载中的提示信息，并且要求不能重复发送ajax请求</span></span><br><span class="line"><span class="comment">// 6. 当服务端返回图片数量为0时，提示用户没有更多数据。</span></span><br></pre></td></tr></table></figure>

<h2 id="同源与跨域"><a href="#同源与跨域" class="headerlink" title="同源与跨域"></a>同源与跨域</h2><h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><h4 id="同源策略的基本概念"><a href="#同源策略的基本概念" class="headerlink" title="同源策略的基本概念"></a>同源策略的基本概念</h4><blockquote>
<p>1995 年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。<br>同源策略：最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”：协议相同、域名相同、端口相同</p>
</blockquote>
<h4 id="同源策略的目的"><a href="#同源策略的目的" class="headerlink" title="同源策略的目的"></a>同源策略的目的</h4><blockquote>
<p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
</blockquote>
<h4 id="同源策略的限制范围"><a href="#同源策略的限制范围" class="headerlink" title="同源策略的限制范围"></a>同源策略的限制范围</h4><blockquote>
<p>随着互联网的发展，“同源策略”越来越严格，目前，如果非同源，以下三种行为都将收到限制。</p>
</blockquote>
<ol>
<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>
<li>DOM 无法获得</li>
<li>AJAX 请求响应被拦截</li>
</ol>
<p>虽然这些限制是很有必要的，但是也给我们日常开发带来不好的影响。比如实际开发过程中，往往都会把服务器端架设到一台甚至是一个集群的服务器中，把客户端页面放到另外一个单独的服务器。那么这时候就会出现不同源的情况，如果我们知道两个网站都是安全的话，我们是希望两个不同源的网站之间可以相互请求数据的。这就需要使用到 <strong>跨域</strong> 。</p>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><h4 id="jsonp-无兼容性问题"><a href="#jsonp-无兼容性问题" class="headerlink" title="jsonp( 无兼容性问题 )"></a>jsonp( 无兼容性问题 )</h4><blockquote>
<p><code>JSONP(JSON with Padding)</code> 可用于解决主流浏览器的跨域数据访问的问题。</p>
<p>原理：服务端返回一个定义好的 js 函数的调用，并且将服务器的数据以该函数参数的形式传递过来，这个方法需要前后端配合</p>
</blockquote>
<ul>
<li><code>script</code>  标签是不受同源策略的限制的，它可以载入任意地方的 JavaScript 文件。类似的还有<code>img</code>和<code>link</code>标签</li>
</ul>
<h5 id="jsonp-演化过程-1"><a href="#jsonp-演化过程-1" class="headerlink" title="jsonp 演化过程 1"></a>jsonp 演化过程 1</h5><p>php 文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;alert(1111)&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>html 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.api.com/testjs.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原理：其实 src 的路径是什么文件不重要，无论引入 js 文件还是 php 文件，最后返回给浏览器的都是字符串，因此我们 script 标签是可以引入一个 php 文件的。</p>
<h5 id="jsonp-演化过程-2"><a href="#jsonp-演化过程-2" class="headerlink" title="jsonp 演化过程 2"></a>jsonp 演化过程 2</h5><p>php 文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;var a = 118;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>html 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.api.com/testjs.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// a打印出来了118</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>我们现在做到了一件事情，从不同源的 php 文件中获取到了数据</strong></p>
<p>缺点：获取数据的 script 标签必须写在使用的 script 标签的前面，必须保证先有数据才能对数据进行渲染。</p>
<h5 id="jsonp-演化过程-3"><a href="#jsonp-演化过程-3" class="headerlink" title="jsonp 演化过程 3"></a>jsonp 演化过程 3</h5><p>php 代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&quot;name&quot;</span>=&gt;<span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>=&gt;<span class="number">18</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 这是一段js函数的调用的代码，$result就是我们想要的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;func(<span class="subst">$result</span>)&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>js 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.api.com/testjs.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>缺点：后端必须知道前端声明的方法的名字，后端才能调用。</p>
<h5 id="jsonp-演化过程-4"><a href="#jsonp-演化过程-4" class="headerlink" title="jsonp 演化过程 4"></a>jsonp 演化过程 4</h5><p>php 代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&quot;name&quot;</span>=&gt;<span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>=&gt;<span class="number">18</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 这是一 段js函数的调用的代码，$result就是我们想要的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>].<span class="string">&quot;(<span class="subst">$result</span>)&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>javascript 代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  script.<span class="property">src</span> = <span class="string">&#x27;http://www.api.com/testjs.php?callback=fun&#x27;</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>jsonp 的原理就是 <strong>借助 script 标签 src 请求资源时，不受同源策略的限制</strong></li>
<li>在服务端返回一个函数的调用，将数据作为当前调用函数的实参</li>
<li>在浏览器端，声明一个全局函数，通过形参就可以获取到服务端返回的对应的值</li>
</ol>
<h4 id="jquery-对于-jsonp-的封装"><a href="#jquery-对于-jsonp-的封装" class="headerlink" title="jquery 对于 jsonp 的封装"></a>jquery 对于 jsonp 的封装</h4><p>!&gt; jsonp 仅支持 get 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用起来相当的简单，跟普通的get请求没有任何的区别，只需要把 dataType 固定成 jsonp 即可</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://www.Jepson.com/testjs.php&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">upass</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">info</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="XMLHttpRequest2-0"><a href="#XMLHttpRequest2-0" class="headerlink" title="XMLHttpRequest2.0"></a>XMLHttpRequest2.0</h2><blockquote>
<p>XMLHttpRequest 是一个 javascript 内置对象，使得 Javascript 可以进行异步的 HTTP 通信。2008 年 2 月，就提出了 XMLHttpRequest Level 2 草案。</p>
</blockquote>
<p>老版本的 XMLHttpRequest 的缺点：</p>
<ol>
<li>仅支持传输文本数据，无法传输二进制文件，比如图片视频等。</li>
<li>传输数据时，没有进度信息，只能提示完成与否。</li>
<li>受到了”同源策略”的限制</li>
</ol>
<p>新版本的功能：</p>
<ol>
<li>可以设置 timeout 超时时间</li>
<li>可以使用 formData 对象管理表单数据</li>
<li>允许请求不同域名下的数据（跨域）</li>
<li>支持上传二进制文件</li>
<li>可以获取数据传输的进度信息</li>
</ol>
<p><strong>注意：我们现在使用 new XMLHttpRequest 创建的对象就是 2.0 对象了，我们之前学的是 1.0 的语法，现在学习一些 2.0 的新特性即可。</strong></p>
<h3 id="timeout-设置超时"><a href="#timeout-设置超时" class="headerlink" title="timeout 设置超时"></a>timeout 设置超时</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">timeout</span> = <span class="number">3000</span> <span class="comment">// 设置超时时间</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;请求超时&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="formData-管理表单数据"><a href="#formData-管理表单数据" class="headerlink" title="formData 管理表单数据"></a>formData 管理表单数据</h3><p>formData 对象类似于 jquery 的 serialize 方法，序列化表单，实现表单的异步提交</p>
<p>!&gt; 但 serialize 方法无法实现文件上传</p>
<p>使用：</p>
<ol>
<li>实例化一个 formData 对象， new FormData(form); form 就是表单元素，DOM 对象</li>
<li>formData 对象可以直接作为 xhr.send(formData) 的参数。注意此时数据是以二进制的形式进行传输。</li>
<li>formData 有一个 append 方法，可以添加参数。formData.append(“id”, “1111”);</li>
<li>这种方式只能以 <strong>post</strong> 形式传递，不需要设置请求头，浏览器会自动为我们设置一个合适的请求头。</li>
</ol>
<p>代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 使用formData必须发送post请求</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;02-formData.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取表单元素</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myForm&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 创建form对象，可以直接作为send的参数。</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. formData可以使用append方法添加参数</span></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 发送，不需要指定请求头，浏览器会自动选择合适的请求头</span></span><br><span class="line">xhr.<span class="title function_">send</span>(formData)</span><br></pre></td></tr></table></figure>

<p>如果要获取 <code>formData</code> 中的数据，可以使用 <code>formData.get(&#39;&#39;)</code> 获取</p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><blockquote>
<p>以前，文件上传需要借助表单进行上传，但是表单上传是同步的，也就是说文件上传时，页面需要提交和刷新，用户体验不友好，xhr2.0 中的 formData 对象支持文件的异步上传。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 获取上传的文件，传递到后端</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(file)</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file)</span><br><span class="line">xhr.<span class="title function_">send</span>(formData)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#upload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// FormData 用于管理表单数据的</span></span><br><span class="line">  <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#form1&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送给服务器</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;upload.php&#x27;</span>)</span><br><span class="line">  xhr.<span class="title function_">send</span>(formData) <span class="comment">// 直接发送 formData</span></span><br><span class="line"></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> r = xhr.<span class="property">responseText</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="string">&#x27;#upload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 准备要上传的数据</span></span><br><span class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">  <span class="comment">// 如果 formData 中有文件对象了，就不需要再添加了</span></span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>])</span><br><span class="line">  <span class="comment">// 发送 AJAX 请求，上传文件</span></span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;upload.php&#x27;</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">// 设置编码类型</span></span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>, <span class="comment">// 设置传递值方式</span></span><br><span class="line">    <span class="attr">data</span>: formData,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>!&gt; 如果使用 <code>$.ajax</code> 发送 ， 需要添加如下两项参数<br>​ <code>contentType: false,</code> 设置编码类型<br>​ <code>processData: false,</code> 设置传递值方式</p>
<h3 id="显示文件进度信息"><a href="#显示文件进度信息" class="headerlink" title="显示文件进度信息"></a>显示文件进度信息</h3><p>xhr2.0 还支持获取上传文件的进度信息，因此我们可以根据进度信息可以实时的显示文件的上传进度。</p>
<ol>
<li>需要注册 <code>xhr.upload.onprogress = function(e)&#123;&#125;</code> 事件，用于监听文件上传的进度。注意：需要在 send 之前注册。</li>
<li>上传的进度信息会存储事件对象 e 中</li>
<li><code>e.loaded</code> 表示已上传的大小；<code>e.total</code> 表示整个文件的大小</li>
</ol>
<p>代码参考：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  inner.<span class="property">style</span>.<span class="property">width</span> = ((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) + <span class="string">&#x27;%&#x27;</span></span><br><span class="line">  span.<span class="property">innerHTML</span> = ((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) + <span class="string">&#x27;%&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// toFixed(2) 保留两位小数</span></span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>(formData)</span><br></pre></td></tr></table></figure>

<p>默认上传文件限制 8M，需要配置 php.ini，允许 php 上传大文件</p>
<h3 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享(CORS)"></a>跨域资源共享(CORS)</h3><h4 id="CORS-的使用"><a href="#CORS-的使用" class="headerlink" title="CORS 的使用"></a>CORS 的使用</h4><blockquote>
<p>新版本的 XMLHttpRequest 对象，可以向不同域名的服务器发出 HTTP 请求。这叫做<span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1PcmlnaW5fUmVzb3VyY2VfU2hhcmluZw==">跨域资源共享</span>（Cross-origin resource sharing，简称 CORS）。</p>
</blockquote>
<p>跨域资源共享（CORS）的前提</p>
<ul>
<li>浏览器支持这个功能( 兼容性 IE10+ )</li>
<li>服务器必须允许这种跨域</li>
</ul>
<p>服务器允许跨域的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许所有的域名访问这个接口</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class="line"><span class="comment">// 允许 www.abc.com 这个域名访问这个接口</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Origin:http://www.abc.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="CORS-的具体流程（了解）"><a href="#CORS-的具体流程（了解）" class="headerlink" title="CORS 的具体流程（了解）"></a>CORS 的具体流程（了解）</h4><ol>
<li><p>浏览器发送跨域请求</p>
</li>
<li><p>服务器端收到一个跨域请求后，在响应头中添加 Access-Control-Allow-Origin Header 资源权限配置。发送响应</p>
</li>
<li><p>浏览器收到响应后，查看是否设置了<code>header(&#39;Access-Control-Allow-Origin:请求源域名或者*&#39;);</code></p>
<p>如果当前域已经得到授权，则将结果返回给浏览器，否则浏览器忽略此次响应</p>
</li>
</ol>
<p>结论：</p>
<ol>
<li><strong>跨域行为是浏览器行为，响应是回来了, 只是浏览器安全机制做了限制, 对于跨域响应内容进行了忽略。</strong></li>
<li><strong>服务器与服务器之间是不存在跨域问题的</strong></li>
</ol>
<h4 id="jsonp-与-cors-的对比"><a href="#jsonp-与-cors-的对比" class="headerlink" title="jsonp 与 cors 的对比"></a>jsonp 与 cors 的对比</h4><ul>
<li>jsonp 兼容性好，老版本浏览器也支持，但是 jsonp 仅支持 get 请求，发送的数据量有限，使用麻烦</li>
<li>cors 需要浏览器支持 cors 功能才行。使用简单，<strong>只要服务端设置允许跨域，对于客户端来说，跟普通的 get、post 请求并没有什么区别</strong></li>
<li>跨域的安全性问题：<strong>因为跨域是需要服务端配合控制的</strong> ，也就是说不论 jsonp 还是 cors，如果没有服务端的允许，浏览器是没法做到跨域的</li>
</ul>
<p>【案例：图灵机器人】</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>【es6】Promise</title>
    <url>/410.html</url>
    <content><![CDATA[<h2 id="promise-的三个状态"><a href="#promise-的三个状态" class="headerlink" title="promise 的三个状态"></a>promise 的三个状态</h2><ul>
<li>pending : 等待 (等待成功或者失败去调用)</li>
<li>fulfilled : 成功调用(resolve)</li>
<li>rejected : 失败调用(reject)</li>
</ul>
<h2 id="Promise-prototype-成员"><a href="#Promise-prototype-成员" class="headerlink" title="Promise.prototype 成员"></a>Promise.prototype 成员</h2><ul>
<li><code>then()</code> ：用于获取异步操作成功时的结果 -&gt; <code>resolve</code></li>
<li><code>catch()</code>：用于获取异步操作失败时的结果 -&gt; <code>reject</code></li>
<li><code>finally()</code>：不管 Promise 最后状态如何，都会执行的操作，finally方法的回调函数不接受任何参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(successCallback, failureCallback)</span><br><span class="line">promise.<span class="title function_">catch</span>(failureCallback)</span><br></pre></td></tr></table></figure>

<p>catch(failureCallback) 是 then(null, failureCallback) 的缩略形式</p>
<p>链式调用</p>
<p>回调函数的返回值会传递数据给下一个 then</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="title function_">doSomethingElse</span>(result))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">newResult</span> =&gt;</span> <span class="title function_">doThirdThing</span>(newResult))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">finalResult</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>))</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure>

<p>错误传递<br>遇到异常抛出，浏览器就会顺着 Promise 链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数</p>
<p>这和以下同步代码的工作原理（执行过程）非常相似。<br>async function foo() {<br>  try {<br>    const result &#x3D; await doSomething();<br>    const newResult &#x3D; await doSomethingElse(result);<br>    const finalResult &#x3D; await doThirdThing(newResult);<br>    console.log(<code>Got the final result: $&#123;finalResult&#125;</code>);<br>  } catch(error) {<br>    failureCallback(error);<br>  }<br>}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123; &#125;) <span class="comment">// onfullfilled 执行</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;) <span class="comment">// onrejected 执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------- 或者 -----------</span></span><br><span class="line"><span class="comment">// then 中传两个参数：第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数</span></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="comment">// onfullfilled 执行</span></span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; &#125;,</span><br><span class="line">  <span class="comment">// onrejected 执行</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="all-和-race"><a href="#all-和-race" class="headerlink" title="all 和 race"></a>all 和 race</h2><p>Promise.all()：resolve回调执行是在所有输入的promise的resolve回调都结束，或者输入的iterable里没有promise了的时候。reject回调执行是，只要任何一个输入的promise的reject回调执行或者输入不合法的promise就会立即抛出错误，并且reject的是第一个抛出的错误信息</p>
<p>Promise.race()：始终返回最快的那一个promise，不管resolve还是reject</p>
<h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><ul>
<li>异步编程终极方案</li>
</ul>
<ul>
<li>async &#x2F; await 用同步编写代码的方式 处理异步操作的一个方案</li>
<li>async：修饰 (修饰一个内部有异步操作的函数) 格式 : async + 函数 (里面有异步操作的函数)</li>
<li>await : 等待 (等上一个异步操作完成啊 , 修饰 一个结果是 promise 的)异步操作 格式 : await + 异步操作(结果 promise 对象)</li>
<li>async 和 await 是成对出现的，await 只能在 async 函数中使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步封装</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 实例化 promise</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 操作错误 调用 =&gt;  reject  =&gt; catch</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 操作成功  调用 =&gt; resolve =&gt; then</span></span><br><span class="line">      <span class="title function_">resolve</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 2. 返回 promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步：使用 (async/await)</span></span><br><span class="line"><span class="comment">// async + 函数 (里面有异步操作的函数)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// await + 异步操作(结果promise对象)</span></span><br><span class="line">  <span class="comment">// 读取a文件</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;./data/a1.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取 b 文件</span></span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;./data/b.txt&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取 c 文件</span></span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;./data/c.txt&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延时函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(b)</span><br><span class="line">    &#125;, a)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">5000</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">3000</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn()</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">sleep</span>(<span class="number">1000</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sleep</span>(<span class="number">5000</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sleep</span>(<span class="number">3000</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">sleep</span>(<span class="number">1000</span>, <span class="string">&#x27;a&#x27;</span>), <span class="title function_">sleep</span>(<span class="number">5000</span>, <span class="string">&#x27;b&#x27;</span>)])</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">sleep</span>(<span class="number">1000</span>, <span class="string">&#x27;a&#x27;</span>), <span class="title function_">sleep</span>(<span class="number">5000</span>, <span class="string">&#x27;b&#x27;</span>)])</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Promise-try"><a href="#Promise-try" class="headerlink" title="Promise.try()"></a>Promise.try()</h2><p>实际开发中，经常遇到一种情况：不知道或者不想区分，函数f是同步函数还是异步操作，但是想用 Promise 来处理它。因为这样就可以不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(f)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line"><span class="comment">// next</span></span><br><span class="line"><span class="comment">// now</span></span><br></pre></td></tr></table></figure>
<p>上面的写法有一个缺点，就是如果f是同步函数，那么它会在本轮事件循环的末尾执行。</p>
<p>Promise.try方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">try</span>(f)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure>


<h2 id="new-Promise-和-Promise-resolve"><a href="#new-Promise-和-Promise-resolve" class="headerlink" title="new Promise 和 Promise.resolve()"></a>new Promise 和 Promise.resolve()</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTQ1MzE5NDM5NzcyNDM0NDY5I2hlYWRpbmctNA==">https://juejin.cn/post/6945319439772434469#heading-4</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Window.history 对象</title>
    <url>/383.html</url>
    <content><![CDATA[<p>Window.history 是一个只读属性，提供了操作浏览器会话历史（浏览器地址栏中访问的页面，以及当前页面中通过框架加载的页面）的接口。HTML5 引入了 history.pushState() 和 history.replaceState() 方法，它们分别可以添加和修改历史记录条目。这些方法通常与 window.onpopstate 配合使用。</p>
<blockquote>
<p>参考</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0hpc3RvcnlfQVBJ">https://developer.mozilla.org/zh-CN/docs/Web/API/History_API</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dpbmRvdy9oaXN0b3J5">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/history</span></p>
</blockquote>
<p>在 history 中跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">back</span>() <span class="comment">// 向后跳转 相当于点击浏览器回退按钮</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">forward</span>() <span class="comment">// 向前跳转 相当于点击了前进按钮</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">1</span>) <span class="comment">// 跳转 历史中的某一特定页面(go(-1) 等同于调用 back())</span></span><br></pre></td></tr></table></figure>

<p>可以通过查看长度属性的值来确定的历史堆栈中页面的数量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">length</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.<span class="title function_">pushState</span>(stateObject, title, url)</span><br></pre></td></tr></table></figure>

<p>状态对象（stateObject）–stateObject 是一个 JavaScript 对象，通过 pushState 方法可以将 stateObject 内容传递到新页面中。</p>
<p>标题（title）–几乎没有浏览器支持该参数，但是传一个空字符串会比较安全。</p>
<p>地址（url）–新的历史记录条目的地址（可选，不指定的话则为文档当前 URL）；浏览器在调用 pushState()方法后不会加载该地址；传入的 URL 与当前 URL 应该是同源的，否则，pushState()会抛出异常。</p>
<p>history.pushState()主要是在不刷新浏览器的情况下，创建新的浏览记录并插入浏览记录队列中</p>
<p>假设在 <span class="exturl" data-url="aHR0cDovL21vemlsbGEub3JnL2Zvby5odG1s">http://mozilla.org/foo.html</span> 中执行了以下 JavaScript 代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stateObj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">history.<span class="title function_">pushState</span>(stateObj, <span class="string">&#x27;page 2&#x27;</span>, <span class="string">&#x27;bar.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这将使浏览器地址栏显示为 <span class="exturl" data-url="aHR0cDovL21vemlsbGEub3JnL2Jhci5odG1sJUVGJUJDJThDJUU0JUJEJTg2JUU1JUI5JUI2JUU0JUI4JThEJUU0JUJDJTlBJUU1JUFGJUJDJUU4JTg3JUI0JUU2JUI1JThGJUU4JUE3JTg4JUU1JTk5JUE4JUU1JThBJUEwJUU4JUJEJUJE">http://mozilla.org/bar.html，但并不会导致浏览器加载</span> bar.html ，甚至不会检查 bar.html 是否存在</p>
<p>history.replaceState() 的使用与 history.pushState() 非常相似，区别在于 replaceState() 是修改了当前的历史记录项而不是新建一个</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>window.setTimeout 第三个参数</title>
    <url>/1659.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dpbmRvdy9zZXRUaW1lb3V0">MDN</span>上关于 setTimeout 介绍</p>
<p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeoutID = scope.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>[, delay, param1, param2, ...])</span><br><span class="line"><span class="comment">// delay 可选 默认 0</span></span><br><span class="line"><span class="comment">// param1, ..., paramN 可选 ，附加参数，一旦定时器到期，他会作为参数传递给 function</span></span><br><span class="line"><span class="comment">// 返回值timeoutID是一个正整数，表示定时器的编号</span></span><br></pre></td></tr></table></figure>

<p>应用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params">j</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">    &#125;,</span><br><span class="line">    i * <span class="number">1000</span>,</span><br><span class="line">    i</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会立即返回一个 timeid</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 不写行尾分号注意事项</title>
    <url>/1656.html</url>
    <content><![CDATA[<p>若行首为 <code>(</code>、<code>[</code>、<code>/</code>、<code>+</code>、<code>-</code>，会与上一行代码相接，此时需要在行首添加分号<br><code>++</code>、<code>--</code>在上下两行都不加分号的情况下，与下一行代码相接<br>return 语句在执行时会在末尾加分号</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 基础</title>
    <url>/1653.html</url>
    <content><![CDATA[<h1 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h1><p>第一种: 写在<code>script</code>标签中</p>
<p>第二种: 引入一个 js 文件</p>
<p><strong>注意：</strong></p>
<ol>
<li>script 可以放在很多地方，但是我们一般规范写在 body 的最后面；</li>
<li>使用 src 引入的标签不能再在标签内写 js 代码 (写了不会执行)</li>
</ol>
<p>!&gt; 通过 <code>src</code> 请求到的 <code>js</code> 文件，会被解析到 <code>script</code> 标签内，并且覆盖原 <code>script</code> 标签内的 <code>js</code> 代码</p>
<p>!&gt; script 标签的 src 属性可以写任何路径或文件，并不仅仅只能写 js 文件</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><blockquote>
<p>注释代码不会被执行，仅仅起到一个提示的作用。注释可以对复杂的代码进行解释，方便后期的维护和开发。</p>
</blockquote>
<ul>
<li><p>单行注释 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释， 单行注释只能写一行代码</span></span><br><span class="line"><span class="comment">// 快捷键： ctrl + /</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多行注释 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	这是多行注释，在多行注释中可以</span></span><br><span class="line"><span class="comment">	换行</span></span><br><span class="line"><span class="comment">	快捷键  ctrl + shift + /</span></span><br><span class="line"><span class="comment">	不可嵌套</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="输出语句-5-种"><a href="#输出语句-5-种" class="headerlink" title="输出语句 (5 种)"></a>输出语句 (5 种)</h1><ul>
<li><p><strong>alert : 警告框</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// alert会弹出一个警告框</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>confirm : 确认框</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// confirm弹出一个确定框</span></span><br><span class="line"><span class="title function_">confirm</span>(<span class="string">&#x27;我帅吗？&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>prompt : 输入框</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// prompt:弹出一个输入框，可以输入值</span></span><br><span class="line"><span class="title function_">prompt</span>(<span class="string">&#x27;请输入你的真是年龄&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>document.write : 网页中写入内容</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以识别标签</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;hello world&lt;/h1&gt;&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Date</span>()) <span class="comment">// 输出当前时间</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>console.log：控制台输出</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// F12打开控制台，在console中可以看到打印的信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello word&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 声明变量</span></span><br><span class="line"><span class="keyword">var</span> age</span><br><span class="line">age = <span class="number">12</span> <span class="comment">// 先声明,后赋值</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">12</span> <span class="comment">// 同时声明+赋值</span></span><br><span class="line"><span class="keyword">var</span> age, name, sex <span class="comment">// 直接声明变量,可一次声明多个，用逗号隔开</span></span><br><span class="line">height = <span class="number">100</span> <span class="comment">// 不声明变量，直接赋值(不会报错，但是不推荐)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(height) <span class="comment">// 不声明变量，也不赋值变量，直接使用（会报错）v</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2 <span class="comment">// 把两个数字加起来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var student = &#123;</span></span><br><span class="line"><span class="comment">	name:&#x27;小明&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>变量<strong>命名要求</strong>（变量是[标识符][1]的一种）</p>
<ol>
<li>以字母、下划线或美元符号（$）开头</li>
<li>由字母、下划线、美元符号（$）和数字组成</li>
<li>标识符<strong>区分大小写</strong></li>
<li>标识符不能使用关键字和保留字</li>
<li>如果重新声明 JavaScript 变量，该变量的值不会丢失 <code>var car=&#39;yellow&#39;; var car</code> car 的值依然是 ‘yellow’</li>
</ol>
</li>
</ul>
<blockquote>
<p>关键字 (有特殊意义的一些单词)<br><code>break</code> <code>do</code> <code>instanceof</code> <code>typeof</code> <code>case</code> <code>else</code> <code>new</code> <code>var</code> <code>in</code> <code>catch</code> <code>finally</code> <code>return</code> <code>void</code> <code>continue</code> <code>for</code> <code>switch</code> <code>while</code> <code>try</code> <code>debugger</code> <code>function</code> <code>this</code> <code>with</code> <code>default</code> <code>if</code> <code>throw</code> <code>delete</code></p>
<p>保留字<br><code>abstract</code> <code>enum</code> <code>int</code> <code>short</code> <code>boolean</code> <code>export</code> <code>interface</code> <code>static</code> <code>extends</code> <code>long</code> <code>super</code> <code>Char</code> <code>final</code> <code>native</code> <code>Class</code> <code>synchronized</code> <code>package</code> <code>throws</code> <code>Const</code> <code>goto</code> <code>private</code> <code>transient</code> <code>degubber</code> <code>implements</code> <code>volatile</code> <code>double</code> <code>import</code> <code>public</code> <code>byte</code> <code>float</code> <code>protected</code></p>
</blockquote>
<p>交换两个变量的值</p>
<ol>
<li>使用临时变量 <strong>(必须掌握)</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = a</span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>不使用临时变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></table></figure>

<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><ul>
<li>浮点数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3.1416</span> <span class="comment">// 3.1416</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.12e2</span> <span class="comment">// 312</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.12e-1</span> <span class="comment">// 0.312</span></span><br></pre></td></tr></table></figure>

<ul>
<li>整数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span> <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">070</span> <span class="comment">// 56 (八进制)</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xa</span> <span class="comment">// 10 (十六进制)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>特殊值<blockquote>
<p><code>NaN</code> <code>Infinity</code></p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> / <span class="number">0</span> <span class="comment">// Infinity (无穷大)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过 <code>isNaN(num)</code> 可以判断是否是一个数字，返回 false 的时候，表示是一个数字</p>
</blockquote>
<ul>
<li>浮点数精度丢失问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在进行浮点数运算的时候，可能会出现精度丢失的问题</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> = <span class="number">0.30000000000000004</span></span><br><span class="line"><span class="number">0.2</span> + <span class="number">0.2</span> = <span class="number">0.4</span></span><br><span class="line"><span class="comment">// 尽量少用浮点数进行运算，不要让浮点数进行比较</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法 : 根据小数点后面的位数量 乘以对应的整数</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>  ==&gt; (<span class="number">0.1</span>*<span class="number">10</span>+<span class="number">0.2</span>*<span class="number">10</span>) / <span class="number">10</span> = <span class="number">0.3</span></span><br></pre></td></tr></table></figure>

<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>只要是在<strong>单引号或双引号</strong>内的就是 <code>String</code> 类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">&#x27;july&#x27;</span></span><br><span class="line"><span class="keyword">var</span> name3 = <span class="string">&#x27;3.1416&#x27;</span></span><br><span class="line"><span class="comment">// 使用索引位置来访问字符串中的每个字符,字符串的索引从 0 开始</span></span><br><span class="line"><span class="keyword">var</span> character = name1[<span class="number">3</span>] <span class="comment">// l</span></span><br><span class="line"><span class="comment">// 内置属性 length 来计算字符串的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1.<span class="property">length</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若在字符串中使用引号，字符串中的引号不要与字符串的引号相同，或在字符串添加转义字符 <code>\</code></p>
</blockquote>
<p>字符串可以是对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;john&#x27;</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;john&#x27;</span>)</span><br><span class="line"><span class="keyword">typeof</span> x <span class="comment">// String</span></span><br><span class="line"><span class="keyword">typeof</span> y <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>

<h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>布尔型，只有 <code>true</code> 和 <code>false</code> 两个值，且是小写</p>
<p>true : <code>1</code>、<code>2</code>、<code>1.1</code>、<code>-1</code>、<code>&#39;0&#39;</code>、<code>&#39;1&#39;</code>、<code>[]</code>、<code>Infinity</code>、<code>-Infinity</code>、…</p>
<p>false : <code>0</code>、<code>&#39;&#39;</code>、<code>null</code>、<code>NaN</code>、<code>undefined</code></p>
<blockquote>
<p>所有非 0 数都是 true，0 是 false</p>
</blockquote>
<p><span class="red">真值：</span> 在 JavaScript 中，**<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9UcnV0aHk=">Truthy</span>**（真值）指的是在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9Cb29sZWFu">布尔值</span>上下文中，转换后的值为真的值。所有值都是真值，除非它们被定义为 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9GYWxzeQ==">假值</span>（即除 <code>false</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>null</code>、<code>undefined</code> 和 <code>NaN</code> 以外皆为真值）</p>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">cat[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">cat[<span class="number">1</span>] = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">cat[<span class="number">2</span>] = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">var</span> cat = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关键词 <code>new</code> 用于声明新变量的类型</p>
</blockquote>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>由花括号分隔，属性和方法的容器；对象的属性以名称和值对的形式 (name : value) 来定义；多个属性由逗号分隔。对象的方法定义了一个函数，并作为对象的属性存储。对象方法通过添加 <code>()</code> 调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">cat.<span class="property">name</span> = <span class="string">&#x27;kitty&#x27;</span></span><br><span class="line">cat.<span class="property">age</span> = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">cat.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kitty&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象属性有两种访问方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name = cat.<span class="property">name</span></span><br><span class="line">name = cat[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>对象方法的访问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eat = cat.<span class="title function_">eat</span>() <span class="comment">// 输出函数执行结果</span></span><br><span class="line">eat = cat.<span class="property">eat</span> <span class="comment">// 输出函数表达式</span></span><br></pre></td></tr></table></figure>

<h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><p>只有一个值：<code>null</code>，表示对象不存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = <span class="literal">null</span> <span class="comment">// 将cat的值清空</span></span><br></pre></td></tr></table></figure>

<ul>
<li>str.match()方法匹配不到返回 null</li>
<li>通过 document.querySelector、getElementById() 获取不到元素返回 null</li>
</ul>
<h2 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h2><p>只有一个值：<code>undefined</code></p>
<ul>
<li>已声明未赋值的变量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>没有明确返回值的变量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取对象不存在的属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组下标不存在</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">arr[<span class="number">5</span>] <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getSum(20, 30) // 50</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">getSum</span>(<span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数没有传入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><blockquote>
<p>是一个操作符而不是函数，圆括号可以使用，但不是必需的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num</span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> num1 <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 对未初始化和未声明的变量执行 typeof 操作符都返回 undefined 值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">typeof</span> flag <span class="comment">// bollean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object ==&gt; null 被认为是一个空的对象引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = &#123; <span class="attr">name</span>: <span class="string">&#x27;kitty&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">typeof</span> cat <span class="comment">// object</span></span><br></pre></td></tr></table></figure>


<h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><ul>
<li>单独的 if 语句</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">  <span class="comment">// 只有当条件为 true 时,执行代码</span></span><br><span class="line">&#125; <span class="comment">// else部分没有执行语句则 省略</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以访问该网站&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>if..else</code> 语句</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">  <span class="comment">// 当条件为 true 时执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 当条件不为 true 时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以玩吃鸡&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不可以玩吃鸡&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>if..else if ..else</code> 语句</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// 当条件1为  true 时执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">// 当条件2 为true 时执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 当条件1和 条件2 都不为true 时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">条件 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span></span><br><span class="line"><span class="number">1.</span> 如果 <span class="string">`条件`</span> 的值为<span class="literal">true</span>，会返回表达式<span class="number">1</span>的值</span><br><span class="line"><span class="number">2.</span> 如果<span class="string">`条件`</span>的值为<span class="literal">false</span>，会返回表达式<span class="number">2</span>的值</span><br><span class="line"><span class="comment">// 求两个数的最大值</span></span><br><span class="line"><span class="keyword">var</span> max = n1 &gt; n2 ? n1 : n2</span><br></pre></td></tr></table></figure>

<h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><blockquote>
<p>if..else 适用于范围的判断，switch..case 适用于具体的值的判断</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">switch</span> (变量) &#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  …</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    默认语句</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意 :<br>break 可以省略，如果省略，代码会继续执行下一个 case<br>switch 语句在比较值时使用的是 <strong>全等</strong> 操作符, 因此不会发生类型转换（例如，字符串’10’ 不等于数值 10）</p>
</blockquote>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205019.png"></p>
<p>基本语法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当循环条件为true时，执行循环体</span></span><br><span class="line"><span class="comment">// 当循环条件为false时，结束循环</span></span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">  <span class="comment">// 循环体：需要循环执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码示例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算1-100之间所有数的和 (讲)</span></span><br><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断条件</span></span><br><span class="line">  sum += i <span class="comment">// 循环体</span></span><br><span class="line">  i++ <span class="comment">// 自增，修改循环条件（不能省略）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br></pre></td></tr></table></figure>

<h2 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do..while 循环"></a>do..while 循环</h2><blockquote>
<p>do..while 循环和 while 循环非常像，二者经常可以相互替代，但是 do..while 的特点是不管条件成不成立，都会执行一次。</p>
</blockquote>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205045.png"></p>
<p>基础语法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件)</span><br></pre></td></tr></table></figure>

<p>代码示例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  sum += i <span class="comment">// 循环体</span></span><br><span class="line">  i++ <span class="comment">// 自增</span></span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) <span class="comment">// 循环条件</span></span><br></pre></td></tr></table></figure>

<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205112.png"></p>
<p>for 循环语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. for循环使用分号分隔</span></span><br><span class="line"><span class="comment">// 2. for循环有2个分号，两个分号不能少</span></span><br><span class="line"><span class="keyword">for</span> (初始化语句; 判断语句; 自增语句) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行顺序：1243 —- 243 —–243(直到循环条件变成 false)</p>
<ol>
<li>初始化语句</li>
<li>判断语句</li>
<li>自增或者自减</li>
<li>循环体</li>
</ol>
<p>for 循环代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印1-5之间所有数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 6 即便循环已经结束了，我们依然可以访问 i 的值</span></span><br></pre></td></tr></table></figure>

<p>思考 1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 求1-100之间所有数的和、平均值</span></span><br><span class="line"><span class="comment">// 2 求1-100之间所有数的乘积</span></span><br><span class="line"><span class="comment">// 3 计算1-100之间能3整除的数的和</span></span><br></pre></td></tr></table></figure>

<p>思考 2：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 计算1-100之间不能被7整除的数的和</span></span><br><span class="line"><span class="comment">// 2 求1-100之间所有偶数的和</span></span><br><span class="line"><span class="comment">// 3 同时求1-100之间所有偶数和奇数的和</span></span><br></pre></td></tr></table></figure>

<p>思考 3（双重 for 循环）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1  网页打印5*5方形★阵  document.write()</span></span><br><span class="line"><span class="comment">// 2  网页打印直角三角形</span></span><br><span class="line"><span class="comment">// 3  网页打印9*9乘法表</span></span><br></pre></td></tr></table></figure>

<h2 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for ..in 循环"></a>for ..in 循环</h2><p>详见遍历对象</p>
<h2 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h2><blockquote>
<p><strong>break</strong>: 结束&#x2F;中止循环（可以用在 switch 语句和循环语句中）</p>
<p>立即跳出当前整个循环，即循环结束，开始执行循环后面的内容（直接跳传出大括号）</p>
<p><strong>continue</strong>: 结束本次循环，进行下一次循环 （只能用在循环语句中）</p>
<p>立即跳出当前循环，继续下一次循环（跳到 i++的地方）</p>
<p>在一个循环里，continue 和 break 后面不能在写任何语句，因为永远无法执行到</p>
</blockquote>
<p>思考 1 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出结果是什么？ 1 2 3 4 6</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结 :"></a>总结 :</h2><ol>
<li>循环有很多种，但是以后用得最多的是 for 循环</li>
<li>当不明确循环次数的时候，可以使用 while 循环</li>
<li>当无论如何都要执行一次代码的时候，可以使用 do..while 循环</li>
<li>循环可以相互替代</li>
</ol>
<h1 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array 数组"></a>Array 数组</h1><ul>
<li>将多个元素，按一定顺序排列放到一个集合中 ， 那么这个集合我们就称之为数组</li>
<li>可以存放任意类型的数据（一般一个数组只存放一种类型）</li>
<li>特点 : 用逗号隔开，有顺序，有长度，数组长度可以动态调整</li>
<li>用途 : 存储大量的数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为什么要有数组?</span></span><br><span class="line"><span class="comment">// 1. 我们知道,一个变量能够存储一个值, 当我们想要存储多个值的时候, 就可以使用数组。比如存储一个班级里面所有学生的名;</span></span><br><span class="line"><span class="comment">// 2. 使用数组可以对多个相同类型的值统一的管理,存储起来方便,操作的时候,也会很方便</span></span><br></pre></td></tr></table></figure>

<h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><ol>
<li><p>通过 <strong>构造函数</strong> 创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>() <span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>) <span class="comment">// 创建了一个数组，长度为4,里面全是空值</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;4&#x27;</span>) <span class="comment">// 创建了一个数组，长度为1,内容为字符串 &#x27;4&#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 创建了一个数组，里面存放了2个数字</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <strong>数组字面量</strong> 创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [] <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>] <span class="comment">// 创建了一个数组，长度为1,内容为数字 4</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 创建一个包含2个数值的数组，多个数组项以逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;b&#x27;</span>] <span class="comment">// 创建一个包含两个字符串的数组</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="数组的长度与下标"><a href="#数组的长度与下标" class="headerlink" title="数组的长度与下标"></a>数组的长度与下标</h2><ul>
<li><p>数组的长度 : 跟字符串一样,数组有一个 length 属性,, 指数组中存放的元素的个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [] <span class="comment">// 空数组 长度为 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">arr.<span class="property">length</span> <span class="comment">// 长度就是3</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">0</span> <span class="comment">// 设置length属性改变数组中元素的个数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组的下标（又称索引） : 因为数组有序的，有序的就应该有自己的序号，而这个序号就是每个元素对应的下标，<strong>下标从 0 开始 , 到 arr.length-1 结束</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组取值，如果下标不存在，则返回 undefined</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">arr[<span class="number">0</span>] <span class="comment">// zs</span></span><br><span class="line">arr[<span class="number">2</span>] <span class="comment">// ww</span></span><br><span class="line">arr[<span class="number">5</span>] <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的赋值</span></span><br><span class="line"><span class="comment">// 格式：数组名[下标] = 值</span></span><br><span class="line"><span class="comment">// 如果下标有对应的值，会把原来的值覆盖，如果下标不存在，会给数组新增一个元素。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span> <span class="comment">// 把red替换成了yellow</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">&#x27;pink&#x27;</span> <span class="comment">// 给数组新增加了一个pink的值</span></span><br><span class="line"><span class="comment">// 如果下标有跨度,中间全是empty 不合法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数组末尾添加新的元素</span></span><br><span class="line">arr[arr.<span class="property">length</span>] = 值</span><br><span class="line">arr.<span class="title function_">push</span>(值)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><blockquote>
<p>遍历 : 对数组的每一个元素都访问一次就叫遍历</p>
</blockquote>
<p>数组遍历的基本语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 数组遍历的固定结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数组中的数从小到大排列</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">// var arr = [1,2,3,4,5,6,7,8]</span></span><br><span class="line"><span class="keyword">var</span> numi = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> numj = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  numj += <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">    <span class="comment">// document.write(&#x27;(&#x27; + arr[i] + &#x27;,&#x27; + arr[i + 1] + &#x27;)&#x27;)</span></span><br><span class="line">    numi += <span class="number">1</span></span><br><span class="line">    <span class="comment">// 两两比较，如果前面的大于后面的，交换位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">var</span> temp</span><br><span class="line">      temp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = temp</span><br><span class="line">      <span class="comment">// document.write(&#x27;交换了&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// document.write(&#x27;，arr=（&#x27; + arr + &#x27;）&#x27;)</span></span><br><span class="line">  <span class="comment">// document.write(&#x27;&lt;br&gt;&#x27;)</span></span><br><span class="line">  <span class="comment">// 如果一趟下来，一次交换都没有做，说明就已经排好序，就不需要继续比</span></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(arr)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numi)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numj)</span><br></pre></td></tr></table></figure>

<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="查看一个对象的类型-类型识别"><a href="#查看一个对象的类型-类型识别" class="headerlink" title="查看一个对象的类型(类型识别)"></a>查看一个对象的类型(类型识别)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="comment">// 只能查看基本数据类型的类型</span></span><br><span class="line"><span class="keyword">instanceof</span> <span class="comment">// 判断对象的具体类型</span></span><br><span class="line">constructor.<span class="property">name</span> <span class="comment">// 获取对象的具体类型 适用于任何类型的检测</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;str&#x27;</span>) <span class="comment">// &#x27;[object String]&#x27; 适用于任何类型的检测</span></span><br></pre></td></tr></table></figure>

<p><strong>typeof</strong></p>
<p>用于查看基本数据的数据类型， number string boolean undefined</p>
<p>null 比较特殊，结果是 object</p>
<p>如果查看复杂数据类型，返回的都是 object 类型</p>
<p>函数的结果是 function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typeof 判断</span></span><br><span class="line"><span class="comment">// 简单类型</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">12</span> <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;abc&#x27;</span> <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &#x27;underfined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂类型 (引用类型)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>instanceof 判断</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">object <span class="keyword">instanceof</span> constructor</span><br></pre></td></tr></table></figure>

<p>用来检测 <code>constructor.prototype</code> 是否存在于参数 <code>object</code> 的原型链中</p>
<p>不能用于类型识别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// instanceof 判断</span></span><br><span class="line"><span class="keyword">var</span> simpleStr = <span class="string">&#x27;This is a simple string&#x27;</span></span><br><span class="line"><span class="keyword">var</span> myString = <span class="keyword">new</span> <span class="title class_">String</span>()</span><br><span class="line"><span class="keyword">var</span> newStr = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;String created with constructor&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> myObj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> myNonObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">var</span> myArr = []</span><br><span class="line"><span class="keyword">var</span> myFn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">simpleStr <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// 返回 false, 检查原型链会找到 undefined</span></span><br><span class="line">myString <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// 返回 true</span></span><br><span class="line">newStr <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// 返回 true</span></span><br><span class="line">myString <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// 返回 true</span></span><br><span class="line"></span><br><span class="line">myObj <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// 返回 true, 尽管原型没有定义</span></span><br><span class="line">;(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// 返回 true, 同上</span></span><br><span class="line">myNonObj <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// 返回 false, 一种创建对象的方法，这种方法创建的对象不</span></span><br><span class="line"></span><br><span class="line">myArr <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// true</span></span><br><span class="line">myArr <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line">myFn <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line">myFn <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>constructor.name</strong></p>
<p>Undefined&#x2F;Null 没有 constructor 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr = []</span><br><span class="line"><span class="keyword">var</span> myFn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> myObj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型的构造函数</span></span><br><span class="line">myArr.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Array</span></span><br><span class="line">myFn.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Object</span></span><br><span class="line">myObj.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">tea.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Teacher</span></span><br></pre></td></tr></table></figure>

<p><strong>Object.prototype.toString</strong></p>
<p>适用于任何类型的检测，不能识别自定义对象类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;str&#x27;</span>) <span class="comment">// &#x27;[object String]&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="原始类型与引用类型"><a href="#原始类型与引用类型" class="headerlink" title="原始类型与引用类型"></a>原始类型与引用类型</h2><ul>
<li>原始类型（简单数据类型&#x2F;值类型）</li>
</ul>
<blockquote>
<p><code>Number</code> <code>String</code> <code>Boolean</code> <code>Undefined</code> <code>Null</code></p>
</blockquote>
<ul>
<li>引用类型（复杂数据类型）</li>
</ul>
<blockquote>
<p><code>Object</code> <code>Array</code> <code>function</code> <code>自定义的对象</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span></span><br><span class="line"><span class="keyword">var</span> num2 = num1</span><br><span class="line">num2 = <span class="number">456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1 <span class="comment">// obj1和obj2，均指向了同一个对象</span></span><br><span class="line">obj2.<span class="property">a</span> = <span class="number">3</span> <span class="comment">// 对obj2的任何操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>) <span class="comment">// 3  同时也会影响到 obj1</span></span><br></pre></td></tr></table></figure>

<p>原始数据类型和引用数据类型，主要是根据内存存储方式来区分的</p>
<ul>
<li>原始类型储存在栈（Stack）中，存的是<strong>值本身</strong>（值类型），进行赋值的时候，赋值的是值本身</li>
<li>引用类型储存在堆（Heap）中，并非储存变量真实数值而是<strong>引用</strong>（也叫<strong>地址</strong>），进行赋值的时候，赋值的是地址，而不是数据本身</li>
</ul>
<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><blockquote>
<p>JS 内置对象就是指 Javascript 自带的一些对象，供开发者使用，这些对象提供了一些常用的的功能。</p>
<p>常见的内置对象有 Math、String、Array、Date 等</p>
</blockquote>
<ul>
<li>跳转到定义<code>ctrl+左键</code></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04v">火狐开发者网站 MDN</span></li>
</ul>
<h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h2><ul>
<li><p>属性 PI</p>
<p><code>Math.PI</code></p>
</li>
<li><p>最大值&#x2F;最小值</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>取整</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>() <span class="comment">// 向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>() <span class="comment">// 向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>() <span class="comment">// 四舍五入，如果是.5，则取更大的那个数 (-1.5 -&gt; -1)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>随机数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>() <span class="comment">// 返回一个[0,1)之间的数，能取到0，取不到1</span></span><br><span class="line"><span class="comment">// [0~N]随机数 parseInt(Math.random * (N+1))</span></span><br><span class="line"><span class="comment">// [4~9] ==&gt; [0~5]+4</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绝对值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>() <span class="comment">// 求绝对值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>次幂和平方</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(num, power) <span class="comment">// 求 num 的 power 次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(num) <span class="comment">// 对 num 开平方</span></span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 随机生成一个 rgb 颜色?</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomRGB</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> colorA = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span>)</span><br><span class="line">  <span class="keyword">var</span> colorB = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span>)</span><br><span class="line">  <span class="keyword">var</span> colorC = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;rgb(&#x27;</span> + colorA + <span class="string">&#x27;,&#x27;</span> + colorB + <span class="string">&#x27;,&#x27;</span> + colorC + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h2><blockquote>
<p>Date 对象用来处理日期和时间</p>
</blockquote>
<ul>
<li>创建一个日期对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不传参数：创建一个当前时间的对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期格式字符串：创建一个指定时间的日期对象</span></span><br><span class="line"><span class="comment">// &#x27;-&#x27; 在 safari 下不识别，推荐用 /</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/02&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/02 00:02:05&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期以逗号分隔：注意月份从0开始</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2018</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>) <span class="comment">// 2018/12/02</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1543680125000</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>日期格式化(了解)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">date.<span class="title function_">toString</span>() <span class="comment">// 默认的日期格式 ，包括日期和时间</span></span><br><span class="line">date.<span class="title function_">toLocalString</span>() <span class="comment">// 本地风格的日期格式（兼容性）</span></span><br><span class="line">date.<span class="title function_">toDateString</span>() <span class="comment">// 只显示日期</span></span><br><span class="line">date.<span class="title function_">toLocalDateString</span>()</span><br><span class="line">date.<span class="title function_">toTimeString</span>() <span class="comment">// 只显示时间</span></span><br><span class="line">date.<span class="title function_">toLocalTimeString</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>获取日期的指定部分</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getMilliseconds</span>() <span class="comment">// 获取毫秒值</span></span><br><span class="line"><span class="title function_">getSeconds</span>() <span class="comment">// 获取秒</span></span><br><span class="line"><span class="title function_">getMinutes</span>() <span class="comment">// 获取分钟</span></span><br><span class="line"><span class="title function_">getHours</span>() <span class="comment">// 获取小时</span></span><br><span class="line"><span class="title function_">getDay</span>() <span class="comment">// 获取星期，0-6    0：星期天</span></span><br><span class="line"><span class="title function_">getDate</span>() <span class="comment">// 获取日，即当月的第几天</span></span><br><span class="line"><span class="title function_">getMonth</span>() <span class="comment">// 返回月份，注意月份从0开始</span></span><br><span class="line"><span class="title function_">getFullYear</span>() <span class="comment">// 返回4位的年份  如 2018</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 思考：</span></span><br><span class="line"><span class="comment">// 封装一个函数，返回当前的时间，格式是：yyyy-MM-dd HH:mm:ss</span></span><br></pre></td></tr></table></figure>

<ul>
<li>时间戳</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = +<span class="keyword">new</span> <span class="title class_">Date</span>() <span class="comment">// 1970年01月01日00时00分00秒起至现在的总毫秒数</span></span><br><span class="line"><span class="comment">// 思考</span></span><br><span class="line"><span class="comment">// 如何统计一段代码的执行时间？</span></span><br></pre></td></tr></table></figure>

<h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><blockquote>
<p><strong>简单数据类型是没有方法的</strong>。为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String&#x2F;Number&#x2F;Boolean</p>
</blockquote>
<p>基本包装类型：把基本类型包装成复杂类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> result = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发生了三件事情</span></span><br><span class="line"><span class="comment">// 1. 把简单类型转换成复杂类型：var s = new String(str)</span></span><br><span class="line"><span class="comment">// 2. 调用包装类型的 indexOf 方法：var result = s.indexOf(&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">// 3. 销毁刚刚创建的复杂类型</span></span><br></pre></td></tr></table></figure>

<h3 id="Number-对象"><a href="#Number-对象" class="headerlink" title="Number 对象"></a>Number 对象</h3><blockquote>
<p>Number 对象是数字的包装类型，数字可以直接使用这些方法</p>
</blockquote>
<p><code>num.toFixed(2)</code> ：返回保留 2 位小数的新数的字符串格式<br><code>num.toString()</code> ：转换成字符串并返回</p>
<h3 id="Boolean-对象"><a href="#Boolean-对象" class="headerlink" title="Boolean 对象"></a>Boolean 对象</h3><blockquote>
<p>Boolean 对象是布尔类型的包装类型</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">toString</span>() <span class="comment">// 转换成字符串并返回</span></span><br></pre></td></tr></table></figure>

<p><strong>undefined 和 null 没有包装类型，所以调用 toString 方法会报错</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常用js代码段汇总</title>
    <url>/382.html</url>
    <content><![CDATA[<h2 id="类型识别"><a href="#类型识别" class="headerlink" title="类型识别"></a>类型识别</h2><h3 id="获取数据类型，返回结果为-Number、String、Object、Array-等"><a href="#获取数据类型，返回结果为-Number、String、Object、Array-等" class="headerlink" title="获取数据类型，返回结果为 Number、String、Object、Array 等"></a>获取数据类型，返回结果为 Number、String、Object、Array 等</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回数据类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRawType</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则 =&gt; RegExp</span></span><br><span class="line"><span class="comment">// 时间对象 =&gt; Date</span></span><br><span class="line"><span class="comment">// 字符串 =&gt; String</span></span><br><span class="line"><span class="comment">// 对象 =&gt; Object</span></span><br><span class="line"><span class="comment">// 数组 =&gt; Array</span></span><br></pre></td></tr></table></figure>

<h3 id="判断变量是不是字符串类型"><a href="#判断变量是不是字符串类型" class="headerlink" title="判断变量是不是字符串类型"></a>判断变量是不是字符串类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;str&#x27;</span>) <span class="comment">// &#x27;[object String]&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span> <span class="comment">// &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="判断变量是不是引用类型"><a href="#判断变量是不是引用类型" class="headerlink" title="判断变量是不是引用类型"></a>判断变量是不是引用类型</h3><p>例如： arrays, functions, objects, regexes, new Number(0),以及 new String(‘’)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> type = <span class="keyword">typeof</span> value</span><br><span class="line">  <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; (type == <span class="string">&#x27;object&#x27;</span> || type == <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断变量是不是-Object-类型的数据"><a href="#判断变量是不是-Object-类型的数据" class="headerlink" title="判断变量是不是 Object 类型的数据"></a>判断变量是不是 Object 类型的数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPlainObject</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value) === <span class="string">&#x27;[object Object]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断变量是不是数组类型"><a href="#判断变量是不是数组类型" class="headerlink" title="判断变量是不是数组类型"></a>判断变量是不是数组类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr) === <span class="string">&#x27;[object Array]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将-isArray-挂载到-Array-上"><a href="#将-isArray-挂载到-Array-上" class="headerlink" title="将 isArray 挂载到 Array 上"></a>将 isArray 挂载到 Array 上</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property">isArray</span> = <span class="title class_">Array</span>.<span class="property">isArray</span> || isArray</span><br></pre></td></tr></table></figure>

<h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><h3 id="数字格式化：小于-10-的数值前面加上-0"><a href="#数字格式化：小于-10-的数值前面加上-0" class="headerlink" title="数字格式化：小于 10 的数值前面加上 0"></a>数字格式化：小于 10 的数值前面加上 0</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; num 要格式化的数值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125; 把小于10的数值前面加上0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prefix_zero</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num &gt;= <span class="number">10</span> ? num : <span class="string">&#x27;0&#x27;</span> + num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="千分位格式化数字"><a href="#千分位格式化数字" class="headerlink" title="千分位格式化数字"></a>千分位格式化数字</h3><p>(1234567 &#x3D;&gt; 1,234,567.00)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; price 价格</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125; 1234567 =&gt; 1,234,567.00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatPrice</span>(<span class="params">price</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> price !== <span class="string">&#x27;number&#x27;</span>) <span class="keyword">return</span> price</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">String</span>(<span class="title class_">Number</span>(price).<span class="title function_">toFixed</span>(<span class="number">2</span>)).<span class="title function_">replace</span>(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// \b 匹配单词边界</span></span><br><span class="line"><span class="comment">// \B 匹配非单词边界</span></span><br></pre></td></tr></table></figure>

<p>其他方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123456789</span> <span class="comment">// a 为number类型</span></span><br><span class="line">a.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;en-US&#x27;</span>) <span class="comment">// &#x27;123,456,789&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">123456789</span> <span class="comment">// b 可为number类型或string类型</span></span><br><span class="line"><span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>().<span class="title function_">format</span>(b) <span class="comment">//&#x27;123,456,789&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="手机号格式化：隐藏中间四位数字"><a href="#手机号格式化：隐藏中间四位数字" class="headerlink" title="手机号格式化：隐藏中间四位数字"></a>手机号格式化：隐藏中间四位数字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; mobile 手机号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatMobile</span>(<span class="params">mobile</span>) &#123;</span><br><span class="line">  mobile = <span class="title class_">String</span>(mobile)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/\d&#123;11&#125;/</span>.<span class="title function_">test</span>(mobile)) &#123;</span><br><span class="line">    <span class="keyword">return</span> mobile</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mobile.<span class="title function_">replace</span>(<span class="regexp">/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/</span>, <span class="string">&#x27;$1****$2&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="手机号格式化：3-4-4-分割"><a href="#手机号格式化：3-4-4-分割" class="headerlink" title="手机号格式化：3-4-4 分割"></a>手机号格式化：3-4-4 分割</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">phoneNum</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">phoneNum</span> = newValue.<span class="property">length</span> &gt; oldValue.<span class="property">length</span> ? newValue.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/(\d&#123;3&#125;)(\d&#123;0,4&#125;)(\d&#123;0,4&#125;)/</span>, <span class="string">&#x27;$1 $2 $3&#x27;</span>) : <span class="variable language_">this</span>.<span class="property">phoneNum</span>.<span class="title function_">trim</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(str, radix) <span class="comment">// 任意进制转换为 10 进制整数值</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">toString</span>(radix) <span class="comment">//返回表示该数字的指定进制形式的字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="检测平台（设备）类型"><a href="#检测平台（设备）类型" class="headerlink" title="检测平台（设备）类型"></a>检测平台（设备）类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">isWechat = <span class="regexp">/micromessenger/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>)</span><br><span class="line">isWeibo = <span class="regexp">/weibo/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>)</span><br><span class="line">isQQ = <span class="regexp">/qq/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>)</span><br><span class="line">isIOS = <span class="regexp">/(iphone|ipod|ipad|ios)/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>)</span><br><span class="line">isAndroid = <span class="regexp">/android/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>)</span><br></pre></td></tr></table></figure>

<h2 id="数组顺序上移下移"><a href="#数组顺序上移下移" class="headerlink" title="数组顺序上移下移"></a>数组顺序上移下移</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象数组顺序上移下移</span></span><br><span class="line"><span class="comment">// arr: 目标数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上移</span></span><br><span class="line">arr[index] = arr.<span class="title function_">splice</span>(index - <span class="number">1</span>, <span class="number">1</span>, arr[index])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下移</span></span><br><span class="line">arr[index] = arr.<span class="title function_">splice</span>(index + <span class="number">1</span>, <span class="number">1</span>, arr[index])[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h2 id="快速创建-a-标签"><a href="#快速创建-a-标签" class="headerlink" title="快速创建 a 标签"></a>快速创建 a 标签</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;超链接&#x27;</span>.<span class="title function_">link</span>(<span class="string">&#x27;https://wqdy.top&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// &lt;a href=&quot;https://wqdy.top&quot;&gt;超链接&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="正则进阶："><a href="#正则进阶：" class="headerlink" title="正则进阶："></a>正则进阶：</h2><p>捕获括号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配 &#x27;wqdy&#x27; 并且记住匹配项</span><br><span class="line">/(wqdy)/</span><br></pre></td></tr></table></figure>

<p>非捕获括号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配 &#x27;wqdy&#x27; 但是不记住匹配项</span><br><span class="line">/(?:wqdy)/</span><br></pre></td></tr></table></figure>

<p>先行断言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配&#x27;wqdy&#x27;仅仅当&#x27;wqdy&#x27;后面跟着&#x27;top&#x27;</span><br><span class="line">/wqdy(?=top)/</span><br></pre></td></tr></table></figure>

<p>后行断言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配&#x27;top&#x27;仅仅当&#x27;top&#x27;前面是&#x27;wqdy&#x27;</span><br><span class="line">/(?&lt;=wqdy)top/</span><br></pre></td></tr></table></figure>

<p>正向否定查找：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配&#x27;wqdy&#x27;仅仅当&#x27;wqdy&#x27;后面不跟着&#x27;gkd&#x27;</span><br><span class="line">/wqdy(?!gkd)/</span><br></pre></td></tr></table></figure>

<h2 id="判断是否有滚动条"><a href="#判断是否有滚动条" class="headerlink" title="判断是否有滚动条"></a>判断是否有滚动条</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">innerWidth</span> - $(<span class="variable language_">document</span>).<span class="title function_">width</span>() !== <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 中的操作符</title>
    <url>/2025.html</url>
    <content><![CDATA[<h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><blockquote>
<p>是一个操作符而不是函数，圆括号可以使用，但不是必需的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num</span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> num1 <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 对未初始化和未声明的变量执行 typeof 操作符都返回 undefined 值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">typeof</span> flag <span class="comment">// bollean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object ==&gt; null 被认为是一个空的对象引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = &#123; <span class="attr">name</span>: <span class="string">&#x27;kitty&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">typeof</span> cat <span class="comment">// object</span></span><br></pre></td></tr></table></figure>

<h2 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h2><blockquote>
<p><code>+</code> 、<code>-</code> 、<code>*</code> 、<code>/</code> 、<code>%</code></p>
</blockquote>
<p>对于加法 转换方向: 布尔值 -&gt; 数值 -&gt; 字符串， 数组&#x2F;对象 -&gt; 字符串<br>除加法以外 转换方向：字符串 -&gt; 数值，布尔值 -&gt; 数值, 数组 -&gt; 数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span> + <span class="number">6</span> <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span> % <span class="number">2</span> <span class="comment">// 1 取余数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span> % -<span class="number">2</span> <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> num = -<span class="number">5</span> % <span class="number">2</span> <span class="comment">// -1 只与左边值的符号有关</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字与字符串相加，数字会转换成字符串，返回字符串</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;5&#x27;</span> + <span class="number">6</span> + <span class="number">7</span> <span class="comment">// &#x27;567&#x27;</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span> + <span class="number">6</span> + <span class="string">&#x27;7&#x27;</span> <span class="comment">// &#x27;117&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值与布尔值相加，布尔值转化成数值，false 转成 0，true 转成 1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span> + <span class="literal">true</span> <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串与布尔值相加，布尔值转化成字符串</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;1&#x27;</span> + <span class="literal">true</span> <span class="comment">// &#x27;1true&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a&#x27;</span> + +<span class="string">&#x27;b&#x27;</span> <span class="comment">// -&gt; &#x27;a&#x27; + +&#x27;b&#x27; -&gt; &#x27;aNaN&#x27;</span></span><br><span class="line"><span class="number">4</span> * <span class="string">&#x27;3&#x27;</span> <span class="comment">// 12</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">true</span> <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span> <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<h2 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h2><blockquote>
<p>赋值运算符左边不能是常量或表达式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num = age++ <span class="comment">// num = 10 age = 11 (先将变量中的值取出做赋值操作,再自身+1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num = ++age <span class="comment">// num = 11 age = 11 (先自身+1,然后再将+1后的结果赋值)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num++) <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++num) <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> y = x++ + ++x + x * <span class="number">10</span> <span class="comment">// x = 3</span></span><br><span class="line"><span class="comment">// y = 3 + ++x + x * 10  // x = 4</span></span><br><span class="line"><span class="comment">// y = 3 + 5 + x * 10 // x = 5</span></span><br><span class="line"><span class="comment">// y = 58</span></span><br></pre></td></tr></table></figure>

<h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><blockquote>
<p><code>&gt;</code> 、<code>&lt;</code> 、<code>&gt;=</code> 、<code>&lt;=</code></p>
<p><code>==</code> 相等 、<code>!=</code> 不相等 、<code>===</code> 全等 、<code>!==</code> 不全等</p>
<p><code>in</code> <code>instanceof</code></p>
</blockquote>
<ul>
<li><code>&gt;</code> 、<code>&lt;</code> 、<code>&gt;=</code> 、<code>&lt;=</code> 、<code>==</code>、<code>!=</code></li>
</ul>
<p>在比较前先执行类型转换</p>
<ul>
<li>如果有一个操作数是<strong>布尔值</strong>，则在比较相等性前先将其转换为<strong>数值</strong> -&gt; false 转换为 0，true 转换为 1</li>
<li>如果一个操作数是<strong>字符串</strong>，另一个操作数是<strong>数值</strong>，则在比较相等性前将字符串转换为<strong>数值</strong></li>
<li>如果两个值都是字符串，则按照字符串的字符编码进行逐位比较</li>
<li>如果一个数是对象，另一个不是，则调用对象的 valueOf()方法，用得到的基本类型值按照前面的规则比较</li>
<li>如果两个操作数都是对象，则比较它们是否指向同一个对象</li>
<li><strong>null 和 undefined 是相等的</strong></li>
<li>在比较相等性之前，不能将 null 和 undefined 转换为其他任何值</li>
<li><strong>在比较大小之前，null，undefined 会被 Number()强制转换成数字类型 Number(null) -&gt; 0,  Number(undefined) -&gt; NaN</strong></li>
<li>如果有一个操作符是 NaN，则相等操作符返回 false，不相等操作符返回 true；即使两个操作数都是 NaN，也一样</li>
</ul>
<ul>
<li><code>===</code> 全等、<code>!==</code> 不全等<br>两个操作数在未经转换的情况下相等返回 true，不相等返回 false</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> == <span class="literal">true</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;0&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;4&#x27;</span> == <span class="number">4</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> &gt;= <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> &lt;= <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> &gt;= <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> &lt;= <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">false</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;NaN&#x27;</span> == <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">5</span> == <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">NaN</span> == <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">NaN</span> != <span class="title class_">NaN</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[] != [] <span class="comment">// true</span></span><br><span class="line">[] == ![] <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == [] <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == [] <span class="comment">// false</span></span><br><span class="line"><span class="number">1</span> == [<span class="number">1</span>] <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> + [] <span class="comment">// &#x27;0&#x27;</span></span><br><span class="line"><span class="number">0</span> + &#123;&#125; <span class="comment">// &quot;0[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; + [] === <span class="number">0</span> <span class="comment">// true  &#123;&#125; 被解析为空的 block， + 被解析为正号运算符，结果等于 +[]</span></span><br><span class="line">[] + &#123;&#125; === <span class="string">&quot;[object Object]&quot;</span> <span class="comment">// true [] 被解析为数组，后续的 + 被解析为加法运算符</span></span><br><span class="line">(&#123;&#125; + []) <span class="comment">// &#x27;[object Object]  括号会阻止js将&#123;&#125;识别为block，因此他的运算结果与 []+&#123;&#125; 一致</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; + []) <span class="comment">// &#x27;[object Object]  当表达式作为参数传递给函数时，不会被默认为新的block</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; + [] === <span class="number">0</span>)  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[] + &#123;&#125; === &#123;&#125; + [] <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">-<span class="number">0</span> === <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;4&#x27;</span> === <span class="number">4</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>in</code></p>
<p>判断对象是否能够访问到该属性</p>
</li>
<li><p><code>instanceof</code></p>
<p>判断一个对象是否是另一个对象的实例</p>
</li>
</ul>
<h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><blockquote>
<p><code>!</code> 非、<code>&amp;&amp;</code> 与、<code>||</code> 或</p>
</blockquote>
<ul>
<li><code>!</code> 对 Boolean 值取反</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="title function_">alert</span>(!flag) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(!<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(![]) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(!<span class="string">&#x27;&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(!![]) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(!!<span class="number">1</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&amp;&amp;</code> 如果第一个值转换成 boolean 值之后为 true， 则输出第二个值；如果第一个值转换成 boolean 值之后为 false，则输出第一个值，且第二个值不在执行。（取第一个为 false 的值，如果都为 true ，则输出最后一个值。）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="literal">true</span> &amp;&amp; <span class="number">3</span> <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span> &amp;&amp; <span class="number">3</span> <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> result = [] &amp;&amp; <span class="string">&#x27;&#x27;</span> <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">false</span> &amp;&amp; <span class="number">3</span> <span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="number">3</span> <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">null</span> &amp;&amp; <span class="literal">true</span> <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span> &amp;&amp; num++ <span class="comment">// &#x27;&#x27;  num = 0</span></span><br></pre></td></tr></table></figure>

<p><code>&amp;&amp;</code> 使用场景</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  fn &amp;&amp; <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不传参数不会报错</span></span><br><span class="line"><span class="title function_">animate</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>||</code> 如果第一个值转换成 boolean 值之后为 true， 则输出第一个值，且第二个值不在执行；如果第一个值转换成 boolean 值之后为 false，则输出第二个值，以此类推，（取第一个为 true 的值，如果都为 false ，则输出最后一个值。）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="literal">true</span> || <span class="number">3</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span> || <span class="number">3</span> <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> result = [] || <span class="string">&#x27;&#x27;</span> <span class="comment">// []</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">false</span> || <span class="number">0</span> <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span> || <span class="number">3</span> <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> result = num || <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">3</span> || num++ <span class="comment">// 3  num=0</span></span><br></pre></td></tr></table></figure>

<p><code>||</code> 使用场景</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.兼容性问题：</span></span><br><span class="line"><span class="keyword">var</span> scrollTop = <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 函数的参数默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  n = n || <span class="number">10</span> <span class="comment">// 给形参 n 设置默认值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n + <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>()</span><br></pre></td></tr></table></figure>

<h2 id="操作符的优先级"><a href="#操作符的优先级" class="headerlink" title="操作符的优先级"></a>操作符的优先级</h2><p>从高到低如下：</p>
<ul>
<li><p>() 优先级最高</p>
</li>
<li><p>一元运算符 ++ – !</p>
</li>
<li><p>算数运算符 先 * &#x2F; % 后 + -</p>
</li>
<li><p>关系运算符 &gt; &gt;&#x3D; &lt; &lt;&#x3D;</p>
</li>
<li><p>相等运算符 &#x3D;&#x3D; !&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D;&#x3D;</p>
</li>
<li><p>逻辑运算符 先 &amp;&amp; 后 ||</p>
</li>
<li><p>赋值运算符 &#x3D;</p>
</li>
</ul>
<h2 id="空值合并操作符"><a href="#空值合并操作符" class="headerlink" title="空值合并操作符 ??"></a>空值合并操作符 <code>??</code></h2><p>注意与或操作符区别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b ?? c</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当且仅当 b 为 null 或 undefined 时，返回 c，否则返回 b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="keyword">if</span> ( b === <span class="literal">null</span> || b === <span class="literal">undefined</span> )&#123;</span><br><span class="line">  a = c</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  a = b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符 ?."></a>可选链操作符 <code>?.</code></h2><p>在引用为空(nullish) (<code>null</code> 或者 <code>undefined</code>) 的情况下不会引起错误，会短路返回值，返回 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问属性、调用方法</span></span><br><span class="line">obj?.<span class="property">customMethod</span>?.()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组取值</span></span><br><span class="line">arr?.[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 短路计算</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> prop1 = obj1?.[a++] <span class="comment">// a =&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> prop2 = obj2?.[b++] <span class="comment">// b =&gt; 1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 中的数据类型转换</title>
    <url>/2029.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="转换成字符串"><a href="#转换成字符串" class="headerlink" title="转换成字符串"></a>转换成字符串</h2><ul>
<li>调用 <code>toString()</code> 方法 （显式转换）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">a.<span class="title function_">toString</span>() <span class="comment">// &#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>null 、undefined 没有 toString() 方法</p>
<ul>
<li>调用 <code>String()</code> 构造函数（显式转换）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">1</span>) <span class="comment">// &#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>直接和字符串做加法运算（隐式转换）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 任意数据类型的变量和字符串做加法运算结果都是字符串</span></span><br><span class="line"><span class="number">1</span> + <span class="string">&#x27;&#x27;</span> <span class="comment">// &#x27;1&#x27;</span></span><br><span class="line"><span class="literal">true</span> + <span class="string">&#x27;&#x27;</span> <span class="comment">// &#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>引用类型转换成字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[].<span class="title function_">toString</span>() <span class="comment">// &#x27;&#x27;</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">toString</span>() <span class="comment">// &#x27;1,2&#x27;</span></span><br><span class="line">(&#123;&#125;).<span class="title function_">toString</span>() <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>, [], <span class="literal">undefined</span>, <span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="literal">true</span> ].<span class="title function_">toString</span>() <span class="comment">// &quot;1,123,,,,NaN,true&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="转换成数值"><a href="#转换成数值" class="headerlink" title="转换成数值"></a>转换成数值</h2><ul>
<li><code>Number()</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123c&#x27;</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// 如果字符串不能转换成合法数字，转换结果为 NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>parseInt()</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;12.3&#x27;</span>) <span class="comment">// 12 只保留整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;15xyz&#x27;</span>) <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;15x6yz&#x27;</span>) <span class="comment">// 15</span></span><br><span class="line"><span class="comment">// 如果字符串里有非法的数字，会逐个转换，直到遇到无法转化的字符串为止</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>parseFloat()</code> 完成</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;12.34&#x27;</span>) <span class="comment">// 12.34 可以保留小数位</span></span><br></pre></td></tr></table></figure>

<ul>
<li>让字符串和数字做除了加法以外的运算（隐式转换）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="string">&#x27;345&#x27;</span></span><br><span class="line">+d === <span class="number">345</span> <span class="comment">// true</span></span><br><span class="line">d - <span class="number">0</span> === <span class="number">345</span> <span class="comment">// true</span></span><br><span class="line">d * <span class="number">1</span> === <span class="number">345</span> <span class="comment">// true</span></span><br><span class="line">d / <span class="number">1</span> === <span class="number">345</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>引用类型转换成数值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空数组为 0，存在一个元素且可转换成数字，则转换成该数字，其他情况为 NaN</span></span><br><span class="line">+[] <span class="comment">// 0</span></span><br><span class="line">+[<span class="string">&#x27;2&#x27;</span>] <span class="comment">// 2</span></span><br><span class="line">+[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>] <span class="comment">// NaN</span></span><br><span class="line">+&#123;&#125; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<h2 id="转换成布尔值"><a href="#转换成布尔值" class="headerlink" title="转换成布尔值"></a>转换成布尔值</h2><p><strong>0, NaN, 空字符串，undefined, null, false 会被转换成为 false</strong></p>
<ul>
<li>使用 <code>Boolean()</code> 完成</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">123</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 对于数字类型来说：一般的数字都转换成为 true，0、NaN 会被转换成为 false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27; &#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 字符串中只有空的字符串会被转换成为 false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>!!</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!!<span class="number">2</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>自动转换</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;&#x27;</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量转换表"><a href="#变量转换表" class="headerlink" title="变量转换表"></a>变量转换表</h2><table>
<thead>
<tr>
<th>Value</th>
<th>Boolean</th>
<th>Number</th>
<th>String</th>
</tr>
</thead>
<tbody><tr>
<td>undefined</td>
<td>false</td>
<td><strong>NaN</strong></td>
<td>“undefined”</td>
</tr>
<tr>
<td>null</td>
<td>false</td>
<td><strong>0</strong></td>
<td>“null”</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>1</td>
<td>“true”</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>0</td>
<td>“false”</td>
</tr>
<tr>
<td>“”</td>
<td>false</td>
<td>0</td>
<td>“”</td>
</tr>
<tr>
<td>“123”</td>
<td>true</td>
<td>123</td>
<td>“123”</td>
</tr>
<tr>
<td>“1a”</td>
<td>true</td>
<td>NaN</td>
<td>“1a”</td>
</tr>
<tr>
<td>0</td>
<td>false</td>
<td>0</td>
<td>“0”</td>
</tr>
<tr>
<td>1</td>
<td>true</td>
<td>1</td>
<td>“1”</td>
</tr>
<tr>
<td>Infinity</td>
<td>true</td>
<td>Infinity</td>
<td>“Infinity”</td>
</tr>
<tr>
<td>NaN</td>
<td>false</td>
<td>NaN</td>
<td>“NaN”</td>
</tr>
<tr>
<td>{}</td>
<td><strong>true</strong></td>
<td>NaN</td>
<td>“[object Object]”</td>
</tr>
<tr>
<td>数组</td>
<td>true</td>
<td>空数组为 0，存在一个元素且为数字转数字，其他 NaN</td>
<td>[1, ‘123’, [], undefined, null, NaN, true ] &#x3D;&gt; “1,123,,,,NaN,true”</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 模块化编程</title>
    <url>/407.html</url>
    <content><![CDATA[<h1 id="js-模块化编程"><a href="#js-模块化编程" class="headerlink" title="js 模块化编程"></a>js 模块化编程</h1><blockquote>
<p>最初 js 不是一种模块化编程语言(es6 开始支持)。为了能够尽可能的实现 js 的模块化，我们会把代码写成这样:</p>
</blockquote>
<ol>
<li>最原始: 封装函数写法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的函数 <code>fn1()</code> 和 <code>fn2()</code>，组成一个模块。使用的时候，直接调用就行了，这种做法的缺点很明显：”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系</p>
<ol start="2">
<li>对象写法</li>
</ol>
<p>为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = &#123;</span><br><span class="line">  <span class="attr">_count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">fn1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的函数 <code>fn1()</code>和 <code>fn2()</code>，都封装在 <code>module1</code> 对象里。使用的时候，就是调用这个对象的属性：<code>module1.fn1()</code></p>
<p>但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值：<code>module1._count = 666</code></p>
<ol start="3">
<li>立即执行函数(自调用函数)写法  (沙箱模式)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 立即执行函数，可以达到不暴露私有成员的目的</span></span><br><span class="line"><span class="keyword">var</span> module1 = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _count = <span class="number">0</span> <span class="comment">// 一般私有的变量，申明变量名时，以 _ 开头</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">fn1</span>: fn1,</span><br><span class="line">    <span class="attr">fn2</span>: fn2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>使用上面的写法，外部代码无法读取内部的 _count 变量：<code>console.info(module1._count)</code> &#x3D;&gt; <code>undefined</code></p>
<h1 id="模块化的标准"><a href="#模块化的标准" class="headerlink" title="模块化的标准"></a>模块化的标准</h1><p>让模块拥有更好的通用性</p>
<ul>
<li><p>AMD : Async Module Definition 异步模块定义：依赖前置、提前执行： 在一开始就将所有的依赖项全部加载</p>
</li>
<li><p>CMD : Common Module Definition 通用模块定义：依赖就近、延迟执行： 在需要的时候才去 require 加载依赖项</p>
</li>
<li><p>commonJS: node.js 同步加载模块，适用于服务端</p>
</li>
<li><p>ES 标准模块化规范</p>
</li>
</ul>
<h2 id="AMD-Asynchronous-Module-Definition"><a href="#AMD-Asynchronous-Module-Definition" class="headerlink" title="AMD (Asynchronous Module Definition)"></a>AMD (Asynchronous Module Definition)</h2><blockquote>
<p>异步加载模块 <span class="exturl" data-url="aHR0cDovL3JlcXVpcmVqcy5vcmcv">requireJs</span> 库应用这一规范</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module add.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 第一个参数是要请求的模块, 第二个参数是依赖模块请求完成的回调函数</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;add&#x27;</span>], <span class="keyword">function</span> (<span class="params">add</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1 + 2 = &#x27;</span> + <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="CMD-Common-Module-Definition"><a href="#CMD-Common-Module-Definition" class="headerlink" title="CMD (Common Module Definition)"></a>CMD (Common Module Definition)</h2><blockquote>
<p>同步加载模块 SeaJS</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module add.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 正确写法</span></span><br><span class="line">  <span class="comment">// 给 module.exports 赋值</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或使用 return</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误用法</span></span><br><span class="line">  <span class="comment">// 对 module.exports 的赋值需要同步执行，不能放在回调函数里</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="comment">// exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports 重新赋值时，并不会改变 module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口</span></span><br><span class="line">  <span class="built_in">exports</span> = &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> &#123; add &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./add&#x27;</span>) <span class="comment">// 此处是同步加载，且可以实现条件加载，因为只有运行到该行代码的时候才会加载模块</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1 + 2 = &#x27;</span> + <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步加载这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于&quot;假死&quot;状态</span></span><br></pre></td></tr></table></figure>

<h2 id="AMD-和-CMD-区别"><a href="#AMD-和-CMD-区别" class="headerlink" title="AMD 和 CMD 区别"></a>AMD 和 CMD 区别</h2><p>AMD 和 CMD 最大的区别是对依赖模块的执行时机处理不同，而不是加载的时机或者方式不同，二者皆为异步加载模块。</p>
<p>AMD(requirejs)是将所有文件同时加载、一次性引入、推崇依赖前置、也就是在定义模块时要先声明其依赖的模块、加载完模块后会立马执行该模块(运行时加载)，所有模块都加载执行完后会进入 require 的回调函数，执行主逻辑，这样的效果就是依赖模块的执行顺序和书写顺序不一定一致，看网络速度，哪个先下载下来，哪个先执行，但是主逻辑一定在所有依赖加载完成后才执行</p>
<p>CMD(seajs)强调的是一个文件一个模块、可按需引入、推崇依赖就近、加载完某个模块后不会立即执行，只是下载而已，所有依赖模块加载完成后进入主逻辑，遇到 require 语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AMD</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;./a&#x27;</span>, <span class="string">&#x27;./b&#x27;</span>], <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 依赖必须一开始就写好</span></span><br><span class="line">  a.<span class="title function_">doSomething</span>()</span><br><span class="line">  b.<span class="title function_">doSomething</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CMD</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line">  a.<span class="title function_">doSomething</span>()</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>) <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">  b.<span class="title function_">doSomething</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a>CommonJS 规范</h2><blockquote>
<p>Node 应用由模块组成，采用 CommonJS 模块规范，每个文件就是一个模块，有自己的作用域<br>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</p>
</blockquote>
<p>在前端浏览器里面并不支持 module.exports</p>
<p>有四个重要的环境变量为模块化的实现提供支持：module、exports、require、global</p>
<h3 id="node-中模块分类"><a href="#node-中模块分类" class="headerlink" title="node 中模块分类"></a>node 中模块分类</h3><ul>
<li><p>核心模块：由 node 本身提供，不需要单独安装（npm），可直接引入使用</p>
<ul>
<li>fs：文件操作模块</li>
<li>http：网络操作模块</li>
<li>path：路径操作模块</li>
<li>url：解析地址的模块</li>
<li>querystring：解析参数字符串的模块</li>
</ul>
</li>
<li><p>第三方模块：由社区或个人提供，需要通过 npm 安装后使用，比如：mime</p>
</li>
<li><p>自定义模块：由开发人员自己创建，比如：tool.js、user.js</p>
</li>
</ul>
<h3 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h3><ul>
<li>核心模块直接引入使用：<code>require(&#39;fs&#39;)</code> 加载文件操作模块</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>第三方模块，需要先使用 npm 进行下载</li>
<li>自定义模块，需要加上相对路径 <code>./</code> 或者 <code>../</code> ，可以省略 <code>.js</code> 后缀，如果文件名是 <code>index.js</code> 那么 index.js 也可以省略</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>) <span class="comment">// 推荐使用，省略 .js 后缀</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>模块可以被多次导入，但是只会在第一次加载</li>
</ul>
<h3 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h3><ul>
<li>在模块的内部，<code>module</code> 变量代表的就是当前模块，它的 <code>exports</code> 属性就是对外的接口，加载某个模块，加载的就是 <code>module.exports</code> 属性，这个属性指向一个空的对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.exports 指向的是一个对象，我们给对象增加属性即可</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">gender</span> = <span class="string">&#x27;man&#x27;</span></span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./module.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">name</span>) <span class="comment">// zs</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">age</span>) <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">gender</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">gender</span>) <span class="comment">// man</span></span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 也可以直接给 module.exports 赋值，但是多次导出会覆盖</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 module.exports 的赋值需要同步执行，不能放在回调函数里</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./module.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">a</span>) <span class="comment">// undefined</span></span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="module-exports-与-exports"><a href="#module-exports-与-exports" class="headerlink" title="module.exports 与 exports"></a>module.exports 与 exports</h3><ul>
<li><p>exports 不是 module.exports 的缩写，exports 是单独存在的</p>
</li>
<li><p>exports 和 module.exports 默认指向同一个对象</p>
</li>
<li><p>模块最终导出的一定是 module.exports 中的数据</p>
</li>
<li><p>结论:</p>
<ul>
<li><p>直接添加属性两者皆可</p>
</li>
<li><p>赋值对象时，只能使用 <code>module.exports</code></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span>) <span class="comment">// ==&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价操作</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">num</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">num</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值为新对象</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;</span><br><span class="line"><span class="comment">// 模块导出的是 module.exports 指向的对象</span></span><br></pre></td></tr></table></figure>

<h3 id="nodejs-中-require-加载模块的规则"><a href="#nodejs-中-require-加载模块的规则" class="headerlink" title="nodejs 中 require 加载模块的规则"></a>nodejs 中 require 加载模块的规则</h3><p>require(‘mime’) 以 mime 为例</p>
<ol>
<li>如果加载的模块是一个路径，表示加载的自定义模块，根据路径查找对应的 js 文件</li>
<li>如果加载的模块是一个名字，不是一个路径，说明加载的是核心模块或者是第三方模块</li>
<li>判断是否是核心模块，如果不是核心模块，会在当前目录下查找是否有 node_modules 目录</li>
<li>如果有，在 node_modules 目录下查找 mime 这个文件夹，找到 mime 文件夹下的 package.json 文件，找到 main 属性，即模块的入口文件，如果没有 main，默认查找当前目录下的 index.js 文件</li>
<li>如果没有找到对应的模块，回去上一层目录，继续查找，一直找到根目录 C: || D: || E:</li>
<li>报错： can not find module xxx</li>
</ol>
<h2 id="ES-模块化-import-和-export"><a href="#ES-模块化-import-和-export" class="headerlink" title="ES 模块化 - import 和 export"></a>ES 模块化 - import 和 export</h2><p>Modules 不是对象，<span class="red">import 命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。</span>也正因为这个，使得静态分析成为可能</p>
<p>export 导出多个模块，都放在一个对象里</p>
<p>export default 默认只能导出一个，一个模块只允许有一个 export default，否则报错<br>export default 后面不可以用 var、let、const 可用 export default function(){} function add(){}</p>
<p>命名导出(Named exports)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span> <span class="comment">// 声明后立即导出，这可以与 `var`, `let`, `const`, `class`, and `function` 配合使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">export</span> &#123; b &#125; <span class="comment">// 导出以前声明的值 必须用对象包裹，否则报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span> () &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> d = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; something <span class="keyword">as</span> somethingElse &#125; <span class="comment">// 在导出时重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; a, b, c, d, e &#125; <span class="keyword">from</span> <span class="string">&#x27;test.js&#x27;</span></span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">c <span class="comment">// ƒ c() &#123;&#125;</span></span><br><span class="line">d <span class="comment">// ƒ d() &#123;&#125;</span></span><br><span class="line">e <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>默认导出(Default Export)</p>
<p>仅当源模块只有一个导出时，才建议使用此做法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> &#123; a <span class="keyword">as</span> <span class="keyword">default</span> &#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&#x27;test.js&#x27;</span></span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入的名字可以任意</span></span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">&#x27;test.js&#x27;</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>将默认和命名导出组合在同一模块中是不好的做法，尽管它是规范允许的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> c = <span class="number">3</span></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> tool <span class="keyword">from</span> <span class="string">&#x27;test.js&#x27;</span></span><br><span class="line">tool.<span class="property">a</span> <span class="comment">// 1</span></span><br><span class="line">tool.<span class="property">b</span> <span class="comment">// 2</span></span><br><span class="line">tool.<span class="property">c</span> <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">import</span> a, &#123; b <span class="keyword">as</span> d, c &#125; <span class="keyword">from</span> <span class="string">&#x27;test.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下写法错误</span></span><br><span class="line"><span class="keyword">import</span> &#123; b <span class="keyword">as</span> d, c &#125;, a <span class="keyword">from</span> <span class="string">&#x27;test.js&#x27;</span> <span class="comment">// x</span></span><br><span class="line"><span class="keyword">import</span> a, e <span class="keyword">from</span> <span class="string">&#x27;test.js&#x27;</span> <span class="comment">// x</span></span><br></pre></td></tr></table></figure>

<h2 id="es-import-函数"><a href="#es-import-函数" class="headerlink" title="es import() 函数"></a>es import() 函数</h2><p>参数同 import 命令的参数，返回一个 promise 对象</p>
<p>import() 函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，才会加载指定的模块。另外，import() 函数与所加载的模块没有静态连接关系</p>
<p>import 命令会被 js 引擎静态分析，import 语句放在 if 代码块之中毫无意义，因此会报句法错误，即不能用于条件加载</p>
<p>import() 类似于 Node 的 require 方法，区别主要是前者是异步加载，后者是同步加载</p>
<p>应用： 按需加载，条件加载，动态模块路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;./module.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; export1, export2 &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>同时加载多个模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">import</span>(<span class="string">&#x27;./module1.js&#x27;</span>),</span><br><span class="line">  <span class="title function_">import</span>(<span class="string">&#x27;./module2.js&#x27;</span>),</span><br><span class="line">  <span class="title function_">import</span>(<span class="string">&#x27;./module3.js&#x27;</span>),</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">[module1, module2, module3]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>import() 也可以用在 async 函数之中。</p>
<p>在 webpack 中使用 import() 动态加载模块时，webpack 默认会将所有 import() 的模块都进行单独打包，<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9hcGkvbW9kdWxlLW1ldGhvZHMvI2ltcG9ydC0x">https://webpack.js.org/api/module-methods/#import-1</span></p>
<h2 id="CommonJS-模块-和-ES-模块化区别"><a href="#CommonJS-模块-和-ES-模块化区别" class="headerlink" title="CommonJS 模块 和 ES 模块化区别"></a>CommonJS 模块 和 ES 模块化区别</h2><p>CommonJS 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// commonJsModule.js</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">addNum</span> = (<span class="params"></span>) =&gt; num++</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">addObj</span> = (<span class="params"></span>) =&gt; obj.<span class="property">num</span> = num</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    addNum, num,</span><br><span class="line">    addObj, obj,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">getNum</span>()  &#123;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./commonJsModule.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">num</span>) <span class="comment">// 1</span></span><br><span class="line">m.<span class="title function_">addNum</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">num</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 这里 num 输出的结果还是原来的值，因为 num 是一个原始类型的值，会被缓存</span></span><br><span class="line"><span class="comment">// 除非写成一个函数，才能得到内部变动的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">getNum</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">obj</span>) <span class="comment">// &#123;&#125;</span></span><br><span class="line">m.<span class="title function_">addObj</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">obj</span>) <span class="comment">// &#123; count: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新赋值</span></span><br><span class="line">m = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">obj</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>ES 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// esModule.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  &#123; num,obj, addNum &#125; <span class="keyword">from</span> <span class="string">&#x27;./esModule.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">addNum</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新赋值 报错</span></span><br><span class="line">num = <span class="number">3</span> <span class="comment">// TypeError: Assignment to constant variable.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure>

<p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口<br>CommonJS和 ES 模块都可以对导出对象内部属性的值进行改变<br>CommonJS 模块输出的是一个值的拷贝，类似浅拷贝<br>ES 模块输出的 不论是基本类还是引用类型的数据，都是值的引用<br>ES 模块对导出的数据不可以重新赋值（只读状态），重新赋值会编译报错（即导出的数据指针指向不能变），但可以改变对象的属性，类似 const 声明的变量<br>CommonJS 模块的require()是同步加载模块，ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段。</p>
<p>CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 Modules不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>
<p>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”<br>编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import 时采用静态命令的形式。即在 import 时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>获取页面向左、向上卷动的距离</title>
    <url>/1553.html</url>
    <content><![CDATA[<p>如果页面指定了 DTD，即指定了 DOCTYPE 时，使用 document.documentElement.scrollTop&#x2F;Left 可以获取到正确的结果</p>
<p>页面没有 DTD，即没指定 DOCTYPE 时，使用 document.body.scrollTop&#x2F;Left 可以获取到正确的结果</p>
<p>获取页面向左、向上卷动的距离的兼容性方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="variable language_">window</span>.<span class="property">pageXOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span> || <span class="number">0</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>document.body 与 document.documentElement 区别</p>
<p>document.body 返回 dom 中的 body 节点即 <code>&lt;body&gt;</code><br>document.documentElement 返回 dom 中的 root 节点即 <code>&lt;html&gt;</code></p>
<p>设置页面卷曲距离</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// X: 向左卷曲距离</span></span><br><span class="line"><span class="comment">// Y: 向上卷曲距离</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(X, Y)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>javascript 高级</title>
    <url>/1652.html</url>
    <content><![CDATA[<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204500.png"></p>
<h2 id="沙箱模式"><a href="#沙箱模式" class="headerlink" title="沙箱模式"></a>沙箱模式</h2><p>沙箱其实就是一个独立的环境，这个环境中任何的改变，都不会对外部环境产生影响</p>
<p>函数自调用一样，在自调用函数内部的变量是不会影响到外部的，因此<strong>函数自调用模式也叫沙箱模式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span>(<span class="params"><span class="variable language_">window</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是fn函数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>代码写在自调用函数里面，减少全局污染</li>
<li>想要在外面使用 fn 函数，可将 fn 暴露到全局 <code>window.fn = fn;</code> 将 fn 函数的地址赋值给了 window 上的 fn 属性</li>
<li>一般，我们一个 js 文件只会暴露一个核心的功能（函数、方法）： 目的还是为了减少全局污染</li>
</ol>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><ul>
<li>语法：<code>&#39;use strict&#39;</code></li>
<li>作用：让 js 引擎以更加严格的模式执行 js 代码</li>
<li>最佳实践：在某个函数内部开启严格模式，而不是在全局环境中开启</li>
<li>注意：<ul>
<li>严格模式只对当前作用域起作用</li>
<li>应该<strong>在当前作用域最顶端使用<code>use strict</code>，否则严格模式无效</strong></li>
</ul>
</li>
<li>使用严格模式好处：<ul>
<li>规范</li>
<li>提高代码执行效率</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 严格模式应该配合沙箱模式一起使用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 沙箱模式 + 严格模式：</span></span><br><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h3 id="严格模式规定"><a href="#严格模式规定" class="headerlink" title="严格模式规定"></a>严格模式规定</h3><ul>
<li>变量必须显示声明</li>
<li>函数参数不能重名</li>
<li>禁止使用八进制</li>
<li>不能使用保留字作为变量名称：<code>implements, interface, let, package, private, protected, public, static, yield</code></li>
<li>如果不符合上述规范，会直接报错</li>
</ul>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote>
<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串（数据验证）、将匹配的子串替换（数据删除或替换）或者从某个串中取出符合某个条件的子串等（数据提取）</p>
</blockquote>
<h3 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h3><ul>
<li>构造函数的方式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RegExp(regular expression)</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/a/</span>) <span class="comment">// 匹配字母中有 a</span></span><br></pre></td></tr></table></figure>

<ul>
<li>正则字面量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/</span></span><br></pre></td></tr></table></figure>

<p>正则有 test 方法，作用是测试字符串是否符合正则表达式的规律，如果符合， 返回 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;def&#x27;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><blockquote>
<p>正则表达式由一些普通字符和元字符组成，普通字符包括大小写字母、数字等，而元字符则具有特殊的含义</p>
</blockquote>
<h4 id="常见元字符"><a href="#常见元字符" class="headerlink" title="常见元字符"></a>常见元字符</h4><p><code>\d</code> 匹配一个数字字符。等价于 <code>[0-9]</code></p>
<p><code>\D</code> 匹配一个非数字字符。等价于 <code>[^0-9]</code></p>
<p><code>\w</code> 匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code></p>
<p><code>\W</code> 匹配任何非单词字符。等价于 <code>[^A-Za-z0-9_]</code></p>
<p><code>\s</code> 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[\f\n\r\t\v]</code></p>
<p><code>\S</code> 匹配任何非空白字符。等价于 <code>[^\f\n\r\t\v]</code></p>
<p><code>\</code> 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， <code>n</code> 匹配字符 <code>n</code>。<code>\n</code> 匹配换行符。<code>\\</code> 匹配 <code>\</code>，<code>\(</code> 则匹配 <code>(</code>。</p>
<p><code>.</code> 匹配除换行符 <code>\n</code> 之外的任何单字符。要匹配包括 ‘\n’ 在内的任何字符，可用<code>(.|\n)</code></p>
<p><code>|</code> 指明两项之间的一个选择。，优先级最低，| 的左右都是单独的整体</p>
<p><code>()</code> 优先级最高，标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。使用 $0…$9 属性。要匹配这些字符，请使用 <code>\(</code> 和 <code>\)</code> 。每个()就是一个子匹配 ‘\1’和’$1’用来指定第一个子匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/f|boot/ <span class="comment">// 匹配 `f` 和 `boot`</span></span><br><span class="line"><span class="regexp">/(f|b)oot/</span> <span class="comment">// 匹配 `foot` 和 `boot`</span></span><br></pre></td></tr></table></figure>

<h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><ul>
<li><code>\f</code> 匹配一个换页符</li>
<li><code>\n</code> 匹配一个换行符</li>
<li><code>\r</code> 匹配一个回车符</li>
<li><code>\t</code> 匹配一个制表符</li>
<li><code>\v</code> 匹配一个垂直制表符</li>
</ul>
<h4 id="字符类的元字符"><a href="#字符类的元字符" class="headerlink" title="字符类的元字符"></a>字符类的元字符</h4><ul>
<li><code>[]</code> 在正则表达式中表示 <strong>单个</strong> 字符的位置，[] 里面写这个位置可以出现的字符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;<span class="regexp">/[abc]/</span> <span class="comment">// 匹配 a,b,c 任意一个字符</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>[^]</code> 在中扩号中的 <code>^</code> 表示非的意思</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ^ 在方括号表达式开头中使用，此时它表示不接受该字符集合</span></span><br><span class="line">;<span class="regexp">/[^abc]/</span> <span class="comment">// 匹配除了a, b, c以外的其他字符</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>[a-z]</code> <code>[1-9]</code>表示范围</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;<span class="regexp">/[a-z]/</span> <span class="comment">// 小写字母</span></span><br><span class="line">;<span class="regexp">/[A-Z]/</span> <span class="comment">// 大写字母</span></span><br><span class="line">;<span class="regexp">/[0-9]/</span> <span class="comment">// 数字</span></span><br><span class="line">;<span class="regexp">/[a-zA-Z0-9]/</span> <span class="comment">// 所有的小写字母和大写字母以及数字</span></span><br></pre></td></tr></table></figure>

<h4 id="边界类元字符"><a href="#边界类元字符" class="headerlink" title="边界类元字符"></a>边界类元字符</h4><blockquote>
<p>我们前面学习的正则只要有满足的条件的就会返回 true，并不能做到精确的匹配。</p>
</blockquote>
<ul>
<li><p><code>^</code> 匹配输入字符串的开始位置</p>
</li>
<li><p><code>$</code> 匹配输入字符串的结尾位置</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;<span class="regexp">/^chuan/</span> <span class="comment">// 以chuan开头</span></span><br><span class="line">;<span class="regexp">/chuan$/</span> <span class="comment">// 以chuan结尾</span></span><br><span class="line">;<span class="regexp">/^chuan$/</span> <span class="comment">// 精确匹配 chuan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 精确匹配chuan,表示必须是这个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^chuan$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;chuanchuan&#x27;</span>)) <span class="comment">// fasle</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>以后表单校验要精确匹配</p>
</blockquote>
<ul>
<li><code>\b</code> 匹配一个字边界，即字与空格间的位置。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。<br><code>/\bCha/</code> : 匹配 Chapter 的开头三个字符<br><code>/ter\b/</code> : 匹配 Chapter 的结尾三个字符</li>
<li><code>\B</code> 表示非单词边界。位置并不重要，因为匹配不关心究竟是单词的开头还是结尾。<br><code>/\Bapt/</code> 表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt</li>
</ul>
<h4 id="量词类元字符"><a href="#量词类元字符" class="headerlink" title="量词类元字符"></a>量词类元字符</h4><blockquote>
<p>量词用来控制出现的次数，一般来说量词和边界会一起使用</p>
</blockquote>
<ul>
<li><code>*</code> 匹配前面的子表达式零次或多次，等价于 <code>&#123;0,&#125;</code></li>
<li><code>+</code> 匹配前面的子表达式一次或多次，等价于 <code>&#123;1,&#125;</code></li>
<li><code>?</code> 匹配前面的子表达式零次或一次，等价于 <code>&#123;0,1&#125;</code> 。当该字符紧跟在任何一个其他限制符 (<code>*</code>, <code>+</code>,<code>?</code>, <code>&#123;n&#125;</code>, <code>&#123;n,&#125;</code>, <code>&#123;n,m&#125;)</code> 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串</li>
<li><code>&#123;n&#125;</code> n 是一个非负整数。匹配确定的 <code>n</code> 次</li>
<li><code>&#123;n,&#125;</code> n 是一个非负整数。至少匹配 <code>n</code> 次</li>
<li><code>&#123;n,m&#125;</code> <code>m</code> 和 <code>n</code> 均为非负整数，其中<code>n</code> &lt;&#x3D; <code>m</code>。最少匹配 <code>n</code> 次且最多匹配 <code>m</code> 次</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;&#125; 就近修饰单个字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/chuan&#123;2&#125;/</span>.<span class="title function_">test</span>(<span class="string">&#x27;chuanchuan&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/(chuan)&#123;2&#125;/</span>.<span class="title function_">test</span>(<span class="string">&#x27;chuanchuan&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/chuan&#123;2&#125;/</span>.<span class="title function_">test</span>(<span class="string">&#x27;chuann&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="其他字符"><a href="#其他字符" class="headerlink" title="其他字符"></a>其他字符</h4><ul>
<li><code>g</code> 全局标记，指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配</li>
<li><code>i</code> 标记指定不区分大小写。表达式的结尾处</li>
<li><code>m</code> 表明可以进行多行匹配，但是这个只有当使用^和$模式时才会起作用，在其他的模式中，加不加入 m 都可以进行多行匹配</li>
</ul>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>从高到低的优先级顺序：</p>
<ol>
<li><strong><code>\</code></strong> 转义符</li>
<li><strong><code>()</code></strong>, <strong><code>(?:)</code></strong> , <strong><code>(?=)</code></strong>, <strong><code>[]</code></strong> 圆括号和方括号</li>
<li><strong><code>*</code></strong>, <strong><code>+</code></strong> , <strong><code>?</code></strong>, <strong><code>&#123;n&#125;</code></strong>, <strong><code>&#123;n,&#125;</code></strong>, <strong><code>&#123;n,m&#125;</code></strong> 限定符</li>
<li><strong><code>^</code></strong>, <strong><code>$</code></strong>, <strong><code>\任何元字符、任何字符</code></strong> 定位点和序列（即：位置和顺序）</li>
<li><strong><code>|</code></strong> 替换，”或”操作</li>
</ol>
<blockquote>
<p>字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</p>
</blockquote>
<h3 id="正则的使用"><a href="#正则的使用" class="headerlink" title="正则的使用"></a>正则的使用</h3><h4 id="字符串使用正则"><a href="#字符串使用正则" class="headerlink" title="字符串使用正则"></a>字符串使用正则</h4><ul>
<li><code>replace()</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;   123AD  asadf   asadfasf  adf  &#x27;</span></span><br><span class="line"><span class="comment">// 1. 替换掉字符串中的所有空白</span></span><br><span class="line"><span class="keyword">var</span> str2 = str.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// g: global, 全局搜索</span></span><br><span class="line"><span class="comment">// 2. 将所有的ad替换成xx</span></span><br><span class="line"><span class="keyword">var</span> str2 = str.<span class="title function_">replace</span>(<span class="regexp">/ad/g</span>, <span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 将所有的ad/AD替换成xx</span></span><br><span class="line"><span class="keyword">var</span> str2 = str.<span class="title function_">replace</span>(<span class="regexp">/ad/gi</span>, <span class="string">&#x27;xx&#x27;</span>) <span class="comment">// i： ignore 忽略大小写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc,efg,123,abc,123,a&#x27;</span></span><br><span class="line"><span class="comment">// 4. 所有的逗号替换成句号</span></span><br><span class="line"><span class="keyword">var</span> str2 = str.<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">&#x27;。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&#x27;[&#123;&quot;name&quot;:&quot;张三&quot;,score:80&#125;,&#123;&quot;name&quot;:&quot;张三&quot;,score:90&#125;,&#123;&quot;name&quot;:&quot;张三&quot;,score:81&#125;]&#x27;</span></span><br><span class="line"><span class="comment">// 5. 把所有成绩都修改成100分</span></span><br><span class="line"><span class="keyword">var</span> str2 = jsonStr.<span class="title function_">replace</span>(<span class="regexp">/\d&#123;1,2&#125;/g</span>, <span class="string">&#x27;100&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>match()</code> &#x3D;&#x3D;&gt; 匹配， 匹配符合正则表达式的字符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;zs的手机号是18938383838, ls的手机号13989907890， ww的手机号是13848962389，zl的手机号是18970890908&#x27;</span></span><br><span class="line"><span class="comment">// 需求： 匹配出来所有的手机号, 返回一个数组</span></span><br><span class="line"><span class="keyword">var</span> str3 = str2.<span class="title function_">match</span>(<span class="regexp">/1[3-9]\d&#123;9&#125;/g</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3)</span><br></pre></td></tr></table></figure>

<h4 id="正则的方法"><a href="#正则的方法" class="headerlink" title="正则的方法"></a>正则的方法</h4><ul>
<li><p>test() &#x3D;&#x3D;&gt; 测试字符串是否符合正则表达式的规律，符合，就返回 true</p>
</li>
<li><p>exec() &#x3D;&#x3D;&gt; 提取，提取字符串中符合正则表达式的字符，需要用括号分组， 如果没有进行分组，返回的是符合整个正则表达式的字符</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;今天是2018-10-16，我这里的需求是提取出年月日&#x27;</span></span><br><span class="line"><span class="comment">// var reg = /\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;/;  ==&gt;  符合整个正则表达式的字符</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span> <span class="comment">// ==&gt; 有分组存在 ，默认组名为 undefined</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span> <span class="comment">// ?&lt;组名&gt; 添加组名</span></span><br><span class="line"><span class="keyword">var</span> ret = reg.<span class="title function_">exec</span>(str) <span class="comment">// 提取出分组的内容以下标的形式存在返回的数组里面</span></span><br><span class="line"><span class="keyword">var</span> ret2 = reg2.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret2)</span><br><span class="line"><span class="comment">// index 代表 匹配到 ret 在 str 中的下标</span></span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul>
<li><code>[xyz]</code> 字符集合。匹配所包含的任意一个字符。例如， <code>[abc]</code> 可以匹配 “plain” 中的 ‘a’</li>
<li><code>[^xyz]</code> 负值字符集合。匹配未包含的任意字符。例如， <code>[^abc]</code> 可以匹配 “plain” 中的’p’、’l’、’i’、’n’</li>
<li><code>[a-z]</code> 匹配所有小写字母</li>
<li><code>[-a-z]</code> 或 <code>[a-z-]</code> 匹配所有小写字母和 <code>-</code></li>
<li><code>[A-Za-z0-9]</code> 匹配任何大写字母小写字母和数字</li>
<li><code>\b([a-z]+)\1\b/gi</code> 一个单词连续出现的位置</li>
<li>将通用资源指示符 (URI) 分解为其组件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;https://www.baidu.com:80/index.html&#x27;</span></span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</span></span><br><span class="line">arr = str.<span class="title function_">match</span>(patt1)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(arr[i])</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// https://www.baidu.com:80/index.html</span></span><br><span class="line"><span class="comment">// https</span></span><br><span class="line"><span class="comment">// www.baidu.com</span></span><br><span class="line"><span class="comment">// :80</span></span><br><span class="line"><span class="comment">// /index.html</span></span><br></pre></td></tr></table></figure>

<h4 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h4><p><strong><code>后向引用</code></strong> 正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力</p>
<p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <code>\n</code> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>
<p>可以使用非捕获元字符 <code>?:</code>、<code>?=</code> 或 <code>?!</code> 来忽略对这部分正则表达式的保存</p>
<p><code>?:</code> 非获取匹配。匹配但不获取匹配结果，不存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， <code>industr(?:y|ies)</code> 就是一个比 <code>industry|industries</code> 更简略的表达式</p>
<p><code>?=</code> 正向预查。在任何匹配的字符串开始处匹配查找字符串。非获取匹配，不获取供以后使用。例如，’Windows (?&#x3D;95|98|NT|2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</p>
<p><code>?!</code> 负向预查，在任何不匹配的字符串开始处匹配查找字符串。非获取匹配，不获取供以后使用。例如’Windows (?!95|98|NT|2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</p>
<p>后向引用一个最简单，最有用的应用是提供了确定文字中连续出现两个相同单词的位置的能力。请看下面的句子： Is is the cost of of gasoline going up up? 根据所写内容，上面的句子明显存在单词多次重复的问题。如果能有一种方法无需查找每个单词的重复现象就能修改该句子就好了。下面的 JScript 正则表达式使用一个子表达式就可以实现这一功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ss = <span class="string">&#x27;Is is the cost of of gasoline going up up?&#x27;</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/\b([a-z]+) \1\b/gim</span></span><br><span class="line"><span class="keyword">var</span> rv = ss.<span class="title function_">replace</span>(re, <span class="string">&#x27;$1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在这个示例中，子表达式就是圆括号之间的每一项。所捕获的表达式包括一个或多个字母字符，即由<code>[a-z]+</code>所指定的。该正则表达式的第二部分是对前面所捕获的子匹配的引用，也就是由附加表达式所匹配的第二次出现的单词。<code>\1</code>用来指定第一个子匹配。单词边界元字符确保只检测单独的单词。如果不这样，则诸如 “is issued” 或 “this is” 这样的短语都会被该表达式不正确地识别。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>高阶函数与柯里化</title>
    <url>/399.html</url>
    <content><![CDATA[<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数定义：将函数作为参数或者返回值是函数的函数<br>常见的 sort、reduce 等函数就是高阶函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br></pre></td></tr></table></figure>

<h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>wiki 的柯里化定义: 把接受多个参数的函数变换成接受一个单一参数的函数，并且返回（接受余下的参数而且返回结果的）新函数的技术</p>
<p>柯里化后，将第一个参数变量存在函数里面了(闭包)，然后本来需要 n 个参数的函数变成只需要剩下的（n - 1 个）参数就可以调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 形如</span></span><br><span class="line">;<span class="function">(<span class="params">a</span>) =&gt;</span> <span class="function">(<span class="params">b</span>) =&gt;</span> <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">let</span> add1 = <span class="title function_">add</span>(<span class="number">1</span>) <span class="comment">// a = 1; b =&gt; a + b</span></span><br><span class="line"><span class="title function_">add1</span>(<span class="number">2</span>) <span class="comment">// 1 + 2 = 3</span></span><br></pre></td></tr></table></figure>

<p>add1 函数等价于有了 a 这个闭包变量的 b &#x3D; a + b</p>
<p>add 函数按照 wiki 的定义可以理解成只柯里化了一次，n 个连续箭头组成的函数实际上就是柯里化了 n - 1 次<br>前 n - 1 次调用，其实是提前将参数传递进去，并没有调用最内层函数体，最后一次调用才会调用最内层函数体，并返回最内层函数体的返回值</p>
<p>所以多个连续箭头函数就是多次柯里化的 es6 写法</p>
<p><strong>应用：</strong></p>
<p>函数懒执行<br>函数式编程</p>
<p><strong>柯里化函数使用场景：</strong></p>
<p>减少重复传递不变的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">discount</span>(<span class="params">price, discount</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> price * discount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次都要重复传入 discount 参数，可以将这个函数柯里化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">discount</span>(<span class="params">price, discount</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">price</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> price * discount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tenPercentDiscount = <span class="title function_">discount</span>(<span class="number">0.9</span>) <span class="comment">// 9折</span></span><br><span class="line"><span class="keyword">const</span> twentyPercentDiscount = <span class="title function_">discount</span>(<span class="number">0.8</span>) <span class="comment">// 8折</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在每次计算价格只需要：</span></span><br><span class="line"><span class="title function_">tenPercentDiscount</span>(<span class="number">500</span>) <span class="comment">// 500 * 0.9</span></span><br><span class="line"><span class="title function_">twentyPercentDiscount</span>(<span class="number">1000</span>) <span class="comment">// 1000 * 0.8</span></span><br></pre></td></tr></table></figure>

<h2 id="柯里化实现"><a href="#柯里化实现" class="headerlink" title="柯里化实现"></a>柯里化实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= func.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(args2))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curriedSum = <span class="title function_">curry</span>(sum)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedSum</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js —— array数组操作</title>
    <url>/2033.html</url>
    <content><![CDATA[<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>) <span class="comment">// [empty × 4]</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;4&#x27;</span>) <span class="comment">// [&#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><blockquote>
<p><strong><code>arr.join()</code></strong></p>
</blockquote>
<p>将数组的值拼接成字符串 不传参数，默认用逗号进行拼接，返回拼接好的字符串</p>
<blockquote>
<p><strong><code>arr.push()</code></strong></p>
</blockquote>
<p>从后面添加一个或多个元素，多个参数逗号隔开，返回新数组的 length</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(arr1) <span class="comment">// 把 arr1 当成一个整体放到 arr 里</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.pop()</code></strong></p>
</blockquote>
<p>从数组的后面删除元素，返回删除的那个元素</p>
<blockquote>
<p><strong><code>arr.unshift()</code></strong></p>
</blockquote>
<p>从数组的前面的添加元素，，多个参数逗号隔开，返回新数组的 length</p>
<blockquote>
<p><strong><code>arr.shift()</code></strong></p>
</blockquote>
<p>从数组的最前面删除元素，返回删除的那个元素</p>
<blockquote>
<p><strong><code>arr.reverse()</code></strong></p>
</blockquote>
<p>翻转数组</p>
<blockquote>
<p><strong><code>arr.sort()</code></strong></p>
</blockquote>
<p>排序</p>
<p>sort 方法可以传递一个函数作为参数，这个参数用来控制数组如何进行排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 参数为 true 时，即返回值 &gt; 0 时，交换位置</span></span><br><span class="line">  <span class="comment">// return a - b // 从小到大排序</span></span><br><span class="line">  <span class="keyword">return</span> b - a <span class="comment">// 从大到小排序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.concat()</code></strong></p>
</blockquote>
<p>数组合并，返回一个新数组，原数组不受影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">concat</span>(b) <span class="comment">// [...a, ...b]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.slice()</code></strong></p>
</blockquote>
<p>数组切分，复制数组的一部分到一个新数组，并返回这个新数组，原数组不受影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slice(begin, end) 包含 begin，不包含 end， begin 和 end 为下标</span></span><br><span class="line"><span class="comment">// slice(begin) 只有一个参数时，为开始参数，截取到末尾</span></span><br><span class="line"><span class="comment">// slice() 没有参数，全部截取</span></span><br><span class="line"><span class="comment">// 可以为负数，会将字符串的长度与对应的负数相加，结果作为参数，-1 表示从后数第一个</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">slice</span>(begin, end)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.splice()</code></strong></p>
</blockquote>
<p>删除或者增加数组元素，修改原数组，返回删除的内容（数组形式）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// start: 开始位置  deletedCount: 删除的个数（如果不删除为 0）items: 替换的内容, 可为多个</span></span><br><span class="line">arr.<span class="title function_">splice</span>(start) <span class="comment">// 删除原数组 start 位置之后的项（包含 start），返回删除的内容</span></span><br><span class="line">arr.<span class="title function_">splice</span>(start, deletedCount, [items]) <span class="comment">// items 将作为 arr 的一项</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.indexOf()</code></strong></p>
</blockquote>
<p>返回数组中某个元素第一次出现的位置，如果找不到，返回 -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fromIndex 表示从 fromIndex 下标开始查找</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;zs&#x27;</span>[, fromIndex])</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.lastIndexOf()</code></strong></p>
</blockquote>
<p>从后面开始查找数组中元素出现位置,即查找某元素最后一次出现的位置，如果找不到，返回 -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;zs&#x27;</span>[, fromIndex])</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.forEach()</code></strong></p>
</blockquote>
<p>返回值: undefined<br>除了抛出异常以外，没有办法中止或跳出 forEach() 循环<br>不支持 return 操作输出，return 只用于控制循环是否跳出当前循环</p>
<p>遍历时会自动忽略 empty 值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;&#125;, thisArg)</span><br><span class="line"><span class="comment">// item 必需。数组中正在处理的当前元素</span></span><br><span class="line"><span class="comment">// index 可选。数组中正在处理的当前元素的索引</span></span><br><span class="line"><span class="comment">// arr 可选。当前数组</span></span><br><span class="line"><span class="comment">// thisArg 可选。当执行回调函数时用作this的值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.map()</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="comment">// item 必需。数组中正在处理的当前元素</span></span><br><span class="line">  <span class="comment">// index 可选。数组中正在处理的当前元素的索引</span></span><br><span class="line">  <span class="comment">// arr 可选。当前数组</span></span><br><span class="line">  <span class="comment">// 使用 return 操作输出，会循环数组每一项，并返回新的每一项组成的数组</span></span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不修改原数组</span></span><br><span class="line"><span class="comment">// 返回一个新数组，新数组的每一项乘以 2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.filter()</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="comment">// 参数同 map</span></span><br><span class="line">  <span class="comment">// 使用 return 操作输出，会循环数组每一项，并返回判断为 true 的每一项组成的数组</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span> &amp;&amp; item &lt; <span class="number">5</span> <span class="comment">// return 后是判断条件</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不修改原数组</span></span><br><span class="line"><span class="comment">// 返回一个新数组，新数组每一项满足 2 &lt; item &lt; 5</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.some()</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="comment">// 参数同 map</span></span><br><span class="line">  <span class="comment">// 返回布尔值，只要有一项满足条件就返回 true，否则返回 false</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span> <span class="comment">// return 后是判断条件</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不修改原数组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.every()</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="comment">// 参数同 map</span></span><br><span class="line">  <span class="comment">// 返回布尔值，只有所有项都满足条件才返回 true，否则返回f alse</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span> <span class="comment">// return 后是判断条件</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不修改原数组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.includes()</code></strong></p>
</blockquote>
<p>判断数组是否含有某值，输出 true 或 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = arr.<span class="title function_">includes</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.find()</code></strong></p>
</blockquote>
<p>使用 return 操作输出，会循环数组每一项，当循环到满足条件时则跳出循环，输出当前数组元素<br>如果全不满足返回 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不修改原数组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.findIndex()</code></strong></p>
</blockquote>
<p>使用 return 操作输出，会循环数组每一项，当循环到满足条件时则跳出循环，输出当前数组元素的下标<br>如果全不满足返回 -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> index = arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不修改原数组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.reduce()</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new1 = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, current, index, array</span>) &#123;</span><br><span class="line">  <span class="comment">// accumulator 第一次为数组第一项，之后为上一操作的结果</span></span><br><span class="line">  <span class="comment">// current 数组的当前项</span></span><br><span class="line">  <span class="comment">// index 当前项的序列</span></span><br><span class="line">  <span class="comment">// array 可选。当前数组</span></span><br><span class="line">  <span class="comment">// initialValue 可选。作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错</span></span><br><span class="line">  <span class="comment">// 使用 return 操作输出</span></span><br><span class="line">  <span class="keyword">return</span> accumulator + current <span class="comment">// 返回数组每一项的和</span></span><br><span class="line">&#125;[, initialValue])</span><br><span class="line"><span class="comment">// 不修改原数组</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扁平化数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>] ]</span><br><span class="line"><span class="keyword">var</span> new2 = arr2.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, current, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator.<span class="title function_">concat</span>(current)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象数组叠加计算</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">1</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">2</span>, <span class="attr">count</span>: <span class="number">2</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> new3 = arr3.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, current, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + current.<span class="property">price</span> * current.<span class="property">count</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当需要操作第一项的时候，利用 reduce(callbreak()&#123;&#125;,往数组第一项前添加一项，如:0)</span></span><br><span class="line">&#125;, <span class="number">0</span>) <span class="comment">// 在原数组第一项添加为 0，不改变原数组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.fill()</code></strong></p>
</blockquote>
<p>用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">fill</span>(value[, start[, end]])</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>arr.flat()</code></strong></p>
</blockquote>
<p>扁平化数组<br>按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = arr.<span class="title function_">flat</span>([depth])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]]</span><br><span class="line">arr4.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 会移除数组中的空项</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr4.<span class="title function_">flat</span>() <span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure>


<h3 id="伪数组"><a href="#伪数组" class="headerlink" title="伪数组"></a>伪数组</h3><blockquote>
<p>伪数组也叫类数组</p>
</blockquote>
<ol>
<li>伪数组其实就是一个对象，但是跟数组一样，伪数组也会有<code>length</code>属性，也有<code>0, 1, 2, 3</code>等属性</li>
<li>伪数组并没有数组的方法，不能使用<code>push/pop</code>等方法</li>
<li>伪数组可以跟数组一样进行遍历，通过下标操作</li>
<li>常见的伪数组：<code>arguments</code>、<code>document.getElementsByTagName的返回值</code>、<code>jQuery对象</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;ww&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>伪数组借用数组的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 obj 添加一项</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">call</span>(obj, <span class="string">&#x27;zl&#x27;</span>)</span><br><span class="line"><span class="comment">// 把 obj 中的每一项使用 &#x27;-&#x27; 拼接起来返回一个字符串</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">join</span>.<span class="title function_">call</span>(obj, <span class="string">&#x27;-&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>将伪数组转换成真数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 借用数组的方法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(obj)</span><br><span class="line">[].<span class="property">slice</span>.<span class="title function_">call</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用es6中数组的from方法：从一个类似数组或可迭代对象中创建一个新的数组实例</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于函数的arguments参数可以使用扩展运算符</span></span><br><span class="line">[...<span class="variable language_">arguments</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js —— es6</title>
    <url>/405.html</url>
    <content><![CDATA[<h2 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODE0MDQ1MA==">[知乎]我用了两个月的时间才理解 let</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9Ib2lzdGluZw==">[MDN]变量提升</span></p>
<h3 id="let-的使用"><a href="#let-的使用" class="headerlink" title="let 的使用"></a>let 的使用</h3><ul>
<li>let 声明的变量只有在当前作用域(块作用域)有效</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不允许重复声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span> <span class="comment">// SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">4</span> <span class="comment">// SyntaxError: Identifier &#x27;b&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<ul>
<li><span class="red">使用 let 声明的全局变量，不会成为 window 的属性</span></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">c</span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><span class="error">存在变量提升</span></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  a = <span class="number">2</span></span><br><span class="line">  <span class="keyword">let</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果 let 不会提升，那么 a = 2 就会将外面的 a 由 1 变成 2</span></span><br><span class="line"><span class="comment">// 但运行发现 a = 2 报错：Uncaught ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>; <span class="keyword">let</span> a  <span class="comment">// Uncaught ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>let&#x2F;const 声明的「创建」过程被提升了，但是「初始化」没有提升，var 声明的「创建」和「初始化」都被提升了，但「赋值」没被提升，function 声明的「创建」、「初始化」和「赋值」都被提升了</li>
<li>let 声明会提升到块顶部，从块顶部到该变量的初始化语句，这块区域叫做 TDZ（暂时死区），所谓暂时死区，就是不能在初始化之前，使用变量</li>
<li>如果你在 TDZ 内使用该变量，JS 就会报错</li>
</ul>
<p>如果 let x 的初始化过程失败了，那么</p>
<ul>
<li>x 变量就将永远处于 created 状态</li>
<li>你无法再次对 x 进行初始化（初始化只有一次机会，而那次机会你失败了）</li>
<li>由于 x 无法被初始化，所以 x 永远处在暂时死区</li>
</ul>
<h3 id="const-的使用"><a href="#const-的使用" class="headerlink" title="const 的使用"></a>const 的使用</h3><p><code>const</code> 声明一个常量。常量：代码执行的过程中，不可以修改常量里面的值</p>
<ul>
<li>const 声明的量不可以改变</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415</span></span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3</span> <span class="comment">// TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure>

<ul>
<li>const 声明的变量必须赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num</span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果 const 声明了一个对象，仅仅保证地址不变，可以修改对象的属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span> <span class="comment">// 正确</span></span><br><span class="line">obj = &#123;&#125; <span class="comment">// TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure>

<ul>
<li>其他用法和 let 一样</li>
</ul>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`hello world`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部允许换行</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">  hello</span></span><br><span class="line"><span class="string">  world</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部可以使用表达式</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`你好，我是<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>不存在 prototype 这个属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">a</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>没有自己的 this，arguments</li>
</ul>
<p>箭头函数的 this、arguments 都是在定义函数时绑定外层的 this 和 arguments，而不是在执行过程中绑定的，所以不会因为调用者不同而发生变化。<br>可以使用剩余参数(Rest 参数)表示法获得的自身入参列表</p>
<p>因为箭头函数没有 this，因此箭头函数不能作为构造函数</p>
<p>不能用 call()、apply()、bind() 这些方法改变 this 的指向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">arrow</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>) <span class="comment">// 外层的入参列表 -&gt; Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args) <span class="comment">// 使用剩余参数表示法获得的自身入参列表 -&gt; (3) [4, 5, 6]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">arrow</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arrow.<span class="property">length</span>) <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果函数体只有一行语句，并且需要返回这个值，那么可以省略 {} 和 return</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">n1, n2</span>) =&gt; n1 + n2</span><br></pre></td></tr></table></figure>

<ul>
<li>Rest 参数和 arguments 对象的区别：</li>
</ul>
<p>rest 参数只包括那些没有给出名称的参数，arguments 包含所有参数</p>
<p>rest 参数之后不能再有其他参数，否则会报错</p>
<p>函数的 length 属性，不包括 rest 参数</p>
<p>arguments 对象不是真正的数组，而 rest 参数是数组实例，可以直接使用数组的方法</p>
<h2 id="对象简化语法"><a href="#对象简化语法" class="headerlink" title="对象简化语法"></a>对象简化语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当属性的 key 和变量的名相同时可以简写</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: name &#125; ==&gt; <span class="keyword">let</span> person = &#123; name &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">let</span> cal = &#123;</span><br><span class="line">  <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 可以省略 `:function`</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h3><ul>
<li>ES6 允许字面量定义对象时，用表达式作为对象的属性名，即把表达式放在方括号内。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> propKey = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">let</span> methodKey = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [propKey]: <span class="literal">true</span>, <span class="comment">// foo: true</span></span><br><span class="line">  [<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;bc&#x27;</span>]: <span class="number">123</span>,  <span class="comment">// abc: 123</span></span><br><span class="line">  [methodKey]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="class-关键字"><a href="#class-关键字" class="headerlink" title="class 关键字"></a>class 关键字</h2><p>ES5 中通过 构造函数 + 原型 的方式来实现面向对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在原型中添加实例方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p.<span class="title function_">say</span>()</span><br></pre></td></tr></table></figure>

<p>ES6 中出现了 class 关键字，用来实现面向对象</p>
<p>class 声明不允许再次声明已经存在的类，否则将会抛出一个类型错误<br>class 声明不可以提升<br>class 仅仅是一个语法结构（语法糖），本质还是函数，实现继承本质上还是通过构造函数 + 原型的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>类声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Person 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 类的构造函数 constructor 固定名称</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加实例方法</span></span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p) <span class="comment">// Person &#123;name: &#x27;tom&#x27;, age: 18&#125;</span></span><br><span class="line">p.<span class="title function_">say</span>() <span class="comment">// tom 18</span></span><br></pre></td></tr></table></figure>

<p>类表达式</p>
<p>赋予一个命名类表达式的名称是类的主体的本地名称</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名类</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = <span class="keyword">class</span> &#123;&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// Person &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名类</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = <span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// A &#123;&#125;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">A</span>() <span class="comment">// Uncaught ReferenceError: A is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>) <span class="comment">// class A &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A) <span class="comment">// Uncaught ReferenceError: A is not defined</span></span><br></pre></td></tr></table></figure>

<p>类表达式也不存在提升</p>
<p>static 关键字用来定义一个类的静态方法。调用静态方法不需要实例化该类，但不能通过一个类实例调用静态方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">distance</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dx = a.<span class="property">x</span> - b.<span class="property">x</span></span><br><span class="line">    <span class="keyword">const</span> dy = a.<span class="property">y</span> - b.<span class="property">y</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">hypot</span>(dx, dy)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Point</span>.<span class="title function_">distance</span>(p1, p2))</span><br></pre></td></tr></table></figure>

<p>继承：要实现至少需要两个 class（子类 和 父类），子类继承自父类，继承后，子类就可以使用父类中的属性或方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类中的 say 方法&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 子类中使用 constructor 必须手动调用 super</span></span><br><span class="line">    <span class="comment">// super 表示父类的构造函数</span></span><br><span class="line">    <span class="comment">// 先调用 super() 在使用 this</span></span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Chinese</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">c.<span class="title function_">say</span>() <span class="comment">// 父类中的方法</span></span><br></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 对象解构</span></span><br><span class="line"><span class="keyword">var</span> &#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同</span></span><br><span class="line">;(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;) <span class="comment">// 使用没有声明的赋值，数组解构类似</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// 10 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取变量并赋值</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">a</span>: p, <span class="attr">b</span>: q &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p, q) <span class="comment">// 10 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将剩余属性赋值给一个变量</span></span><br><span class="line"><span class="keyword">var</span> &#123; a, b, ...rest &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, rest) <span class="comment">// 10 20 &#123;c: 30, d: 40&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供默认值</span></span><br><span class="line"><span class="keyword">var</span> &#123; a = <span class="number">1</span>, b = <span class="number">1</span> &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// 10 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值并提供默认值</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">a</span>: aa = <span class="number">10</span>, <span class="attr">b</span>: bb = <span class="number">1</span> &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aa, bb) <span class="comment">// 10 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数组解构</span></span><br><span class="line"><span class="keyword">var</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将剩余数组赋值给一个变量</span></span><br><span class="line"><span class="keyword">var</span> [a, b, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, rest) <span class="comment">// 1 2 [3, 4]</span></span><br><span class="line"><span class="comment">// ==&gt; var a = arr[0]; var b = arr[1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供默认值</span></span><br><span class="line"><span class="keyword">var</span> [c = <span class="number">2</span>, d = <span class="number">2</span>] = [<span class="number">10</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c, d) <span class="comment">// 10 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 忽略某些值</span></span><br><span class="line"><span class="keyword">var</span> [a = <span class="number">2</span>, , b = <span class="number">2</span>] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// 10 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 函数参数的解构赋值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123; x &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123; x = <span class="number">10</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 解构的特殊应用</span></span><br><span class="line"><span class="comment">// 交换变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line">;[a, b] = [b, a]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串解构</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;love&#x27;</span></span><br><span class="line"><span class="keyword">var</span> [a, b, c, d] = str</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d) <span class="comment">// l o v e</span></span><br></pre></td></tr></table></figure>

<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符（spread）是三个点（…）。作用：将一个数组转为用逗号分隔的参数序列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr) <span class="comment">// a b c</span></span><br></pre></td></tr></table></figure>

<p>应用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组深拷贝</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr1 = [...arr]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr === arr1) <span class="comment">// false, 说明arr1和arr指向不同数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把一个数组插入另一个数组字面量</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转数组</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;love&#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [...str]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3) <span class="comment">// [ &#x27;l&#x27;, &#x27;o&#x27;, &#x27;v&#x27;, &#x27;e&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p>对象展开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">let</span> search = &#123; ...defaults, <span class="attr">age</span>: <span class="number">12</span> &#125; <span class="comment">// &#123; name: &#x27;zs&#x27;, age: 12 &#125; 后面的属性会覆盖前面的属性</span></span><br></pre></td></tr></table></figure>

<p>对象展开仅包含对象自身的可枚举属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  p = <span class="number">12</span></span><br><span class="line">  <span class="title function_">m</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>()</span><br><span class="line"><span class="keyword">let</span> clone = &#123; ...c &#125;</span><br><span class="line">clone.<span class="property">p</span> <span class="comment">// ok</span></span><br><span class="line">clone.<span class="title function_">m</span>() <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>

<h2 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2048.html</url>
    <content><![CDATA[<h1 id="Set-数据类型"><a href="#Set-数据类型" class="headerlink" title="Set 数据类型"></a>Set 数据类型</h1><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用</p>
<p>Set 对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set 中的元素只会出现一次，即 Set 中的元素是唯一的</p>
<p>Set 中判断两个值是否相等的算法不同于 <code>===</code>，在 Set 内部，两个 NaN 是相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="title class_">NaN</span>, <span class="title class_">NaN</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, +<span class="number">0</span>, -<span class="number">0</span>, &#123;&#125;, &#123;&#125;]</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>(a) <span class="comment">// [NaN, undefined, +0, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure>

<p>属性</p>
<p>Set.length 为 0<br>Set.prototype.size 返回 Set 对象值得个数</p>
<p>操作方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">add</span>(value) <span class="comment">// 在尾部添加某个值，返回该 Set 本身</span></span><br><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">delete</span>(value) <span class="comment">// 移除Set的中与这个值相等的元素，即如果该元素存在，返回true，否则返回false</span></span><br><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">has</span>(value) <span class="comment">// 返回一个布尔值，表示该值是否为 Set 的成员</span></span><br><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">clear</span>() <span class="comment">// 移除 Set 对象内的所有元素</span></span><br><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">values</span>() <span class="comment">// 返回一个新的迭代器对象，该对象包含Set对象中的按插入顺序排列的所有元素的值</span></span><br><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">keys</span>() <span class="comment">// 与values()方法相同</span></span><br><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">entries</span>() <span class="comment">// 返回一个新的迭代器对象，该对象包含Set对象中的按插入顺序排列的所有元素的值的[value, value]数组。为了使这个方法和Map对象保持相似，每个值的键和值相等</span></span><br><span class="line"><span class="title class_">Set</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">forEach</span>(callbackFn[, thisArg])</span><br><span class="line"><span class="comment">// Set 结构的键名就是键值（两者是同一个值），因此 forEach 遍历时 callbackFn 前两个参数是同一个值</span></span><br></pre></td></tr></table></figure>

<p>Set Array 互相转化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(mySet) <span class="comment">// Set ==&gt; Array</span></span><br><span class="line">[...mySet] <span class="comment">// Set ==&gt; Array</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Set</span>(myArray) <span class="comment">// Array ==&gt; Set</span></span><br><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(myArray)] <span class="comment">// 数组去重</span></span><br></pre></td></tr></table></figure>

<p>使用 Set 实现并集（Union）、交集（Intersect）和差集（Difference）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">union</span>(<span class="params">setA, setB</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>([...setA, ...setB])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">intersect</span>(<span class="params">setA, setB</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> setB.<span class="title function_">has</span>(x)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">difference</span>(<span class="params">setA, setB</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !setB.<span class="title function_">has</span>(x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFw">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map</span></p>
<p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值<br>Map 中 NaN 是与 NaN 相等的（虽然 NaN !&#x3D;&#x3D; NaN），剩下所有其它的值是根据 &#x3D;&#x3D;&#x3D; 运算符的结果判断是否相等</p>
<p>属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Map</span>.<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> <span class="comment">// 返回 map 对象键值对的个数</span></span><br></pre></td></tr></table></figure>

<p>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">clear</span>() <span class="comment">// 移除 Map 对象的所有键/值对</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">delete</span>(key) <span class="comment">// 如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">entries</span>() <span class="comment">// 返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">forEach</span>(callbackFn[, thisArg]) <span class="comment">// 按插入顺序，为 Map 对象里的每一键值对调用一次 callbackFn 函数。如果为 forEach 提供了 thisArg，它将在每次回调中作为 this 值</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">get</span>(key) <span class="comment">// 返回键对应的值，如果不存在，则返回 undefined</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">has</span>(key) <span class="comment">// 返回一个布尔值，表示 Map 实例是否包含键对应的值</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">keys</span>() <span class="comment">// 返回一个新的 Iterator 对象， 它按插入顺序包含了 Map 对象中每个元素的键</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">set</span>(key, value) <span class="comment">// 设置 Map 对象中键的值。返回该 Map 对象</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">values</span>() <span class="comment">// 返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的值</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="property"><span class="keyword">prototype</span></span>[@@iterator]() <span class="comment">// 返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组</span></span><br></pre></td></tr></table></figure>

<p>迭代 Map</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; = &#x27;</span> + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myMap.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; = &#x27;</span> + value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Map 和数组的关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kvArray = [[<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>], [<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个 Map 对象</span></span><br><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>(kvArray)</span><br><span class="line"></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="string">&#x27;key1&#x27;</span>) <span class="comment">// 返回值为 &#x27;value1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Array.from 函数可以将一个Map对象转换成一个二维键值对数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(myMap)) <span class="comment">// 输出和 kvArray 相同的数组</span></span><br></pre></td></tr></table></figure>

<p>合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 展开运算符本质上是将Map对象转换成数组</span></span><br><span class="line"><span class="keyword">var</span> merged = <span class="keyword">new</span> <span class="title class_">Map</span>([...map1, ...map2])</span><br></pre></td></tr></table></figure>

<h1 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvV2Vha01hcA==">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap</span></p>
<p>WeakMap 对象是一组键&#x2F;值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的</p>
<p>正由于这样的弱引用，WeakMap 的 key 是不可枚举的</p>
<h1 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3ltYm9s">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol</span></p>
]]></content>
  </entry>
  <entry>
    <title>常用js —— object对象操作</title>
    <url>/2034.html</url>
    <content><![CDATA[<blockquote>
<p><strong>删除对象属性</strong></p>
</blockquote>
<p>如果删除成功，返回true，删除失败，返回false<br>var 声明的全局变量不能被删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span> <span class="comment">// 删除obj的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var 声明的全局变量不能被删除</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span></span><br><span class="line">str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">window</span>.<span class="property">num</span> <span class="comment">// false 删除失败</span></span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">window</span>.<span class="property">str</span> <span class="comment">// true 删除成功</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 报错 str is not undefined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>判断一个属性是否是对象的一个属性</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">key <span class="keyword">in</span> obj <span class="comment">// 返回布尔值 从原型链继承的属性会返回 true</span></span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(key) <span class="comment">// 判断某个key是否是这个对象本身的属性</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>for..in</code></strong> 遍历对象</p>
</blockquote>
<p>会枚举原型链中的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// 键</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]) <span class="comment">// 值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Object-prototype-成员"><a href="#Object-prototype-成员" class="headerlink" title="Object.prototype 成员"></a>Object.prototype 成员</h3><p>constructor: 指向了构造函数 Object<br><code>hasOwnProperty()</code>: 返回一个布尔值，判断对象自身是否具有该属性<br><code>isPrototypeOf()</code>: 返回一个布尔值，用于测试一个对象是否存在于另一个对象的原型链上<br><code>propertyIsEnumerable()</code>: 返回一个布尔值，表明指定的属性名是否是当前对象可枚举的自身属性<br><code>toString()/toLocaleString()</code>: 返回对象的字符串格式<br><code>valueOf()</code>: 返回对象的原始值</p>
<blockquote>
<p><strong><code>hasOwnProperty</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 判断name属性是不是obj自己提供的</span></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong><code>hasOwnProperty</code> 与 <code>in</code> 的区别</strong></p>
<ol>
<li><p><code>in</code> 操作符：判断对象能否访问到该属性（<strong>不管这个属性是自己提供的，还是从原型上继承来的</strong>），如果可以访问到，都会返回 true</p>
</li>
<li><p><code>hasOwnProperty</code>：该属性必须是自己提供，才返回 true，否则返回 false</p>
</li>
</ol>
<blockquote>
<p><strong><code>isPrototypeOf</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断 A 对象是否在 B 对象的原型链上 ,回一个布尔值</span></span><br><span class="line">A.<span class="title function_">isPrototetypeOf</span>(B)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// p 的原型链：</span></span><br><span class="line"><span class="comment">// p ==&gt; Person.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">isPrototypeOf</span>(p) <span class="comment">// false Person 是构造函数</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(p) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(p) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong><code>isPropertyOf</code> 与 <code>instanceof</code> 运算符的区别</strong></p>
<p><code>instanceof</code> 运算符用来测试一个对象的原型链中是否存在一个构造函数的 <code>prototype</code> 属性。作用和 isPrototypeOf 类似</p>
<p>语法： 实例对象 instanceof 构造函数</p>
<p>作用：构造函数的 prototype 属性是否在实例对象的原型链上</p>
<ul>
<li>A.isPrototypeOf(B) 判断 A 是否在 B 的原型链上 A： 是一个原型对象</li>
<li>B instanceof A 判断 A 的 prototype 是否在 B 的原型链上 A：是一个构造函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isPrototypeOf</span>([]) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>([]) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// 语法错误</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>propertyIsEnumerable</code></strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">19</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lw&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">p.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;age&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>toString/toLocaleString</code></strong></p>
</blockquote>
<p>返回对象的字符串格式</p>
<blockquote>
<p><strong>每个内置对象</strong>的原型上都有属于自己的 toString 方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// obj ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line">obj.<span class="title function_">toString</span>() <span class="comment">// &#x27;[object Object]&#x27;</span></span><br><span class="line">obj.<span class="title function_">toLocaleString</span>() <span class="comment">// &#x27;[object Object]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// arr ==&gt;  Array.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"><span class="comment">//           toString()         toString()</span></span><br><span class="line"><span class="comment">// Array.prototype 含有自己的 toString 方法</span></span><br><span class="line">arr.<span class="title function_">toString</span>() <span class="comment">// &#x27;1,2,3&#x27;</span></span><br><span class="line">arr.<span class="title function_">toLocaleString</span>() <span class="comment">// &#x27;1,2,3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">//  date ==&gt; Date.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"><span class="comment">//           toString()          toString()</span></span><br><span class="line"><span class="comment">// Date.prototype 含有自己的 toString 方法</span></span><br><span class="line">date.<span class="title function_">toString</span>() <span class="comment">// Wed Oct 10 2018 16:00:51 GMT+0800 (中国标准时间)</span></span><br><span class="line">date.<span class="title function_">toLocaleString</span>() <span class="comment">// 2018/10/10 下午4:00:51 得到的是本地时间格式</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>valueOf()</code></strong></p>
</blockquote>
<p>返回值为该对象的原始值，如果对象没有原始值，则 <code>valueOf</code> 将返回对象本身</p>
<table>
<thead>
<tr>
<th><strong>对象</strong></th>
<th><strong>返回值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>返回数组对象本身</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值</td>
</tr>
<tr>
<td>Date</td>
<td>时间戳</td>
</tr>
<tr>
<td>Function</td>
<td>函数本身</td>
</tr>
<tr>
<td>Number</td>
<td>数字值</td>
</tr>
<tr>
<td>Object</td>
<td>对象本身 （这是默认情况）</td>
</tr>
<tr>
<td>String</td>
<td>字符串值</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// obj ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line">obj.<span class="title function_">valueOf</span>() <span class="comment">// &#123; name: &#x27;zs&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// arr ==&gt;  Array.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line">arr.<span class="title function_">valueOf</span>() <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">// date ==&gt; Date.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"><span class="comment">// Date.prototype 含有 valueOf 方法</span></span><br><span class="line">date.<span class="title function_">valueOf</span>() <span class="comment">// 时间戳</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>valueOf 和 toString 的应用</p>
</blockquote>
<p>当对象在参与运算和比较的时候，js 内部会自动的调用 valueOf 和 toString 方法</p>
<p>调用规则：</p>
<ol>
<li><p>默认先调用 vauleOf， 尝试将对象转成简单数据类型， 如果没有转成简单数据类型， 会继续在调用 toString 方法</p>
</li>
<li><p>如果 valueOf 和 toString 方法都没有转成简单数据类型，会报错</p>
</li>
</ol>
<h3 id="Object-静态方法"><a href="#Object-静态方法" class="headerlink" title="Object 静态方法"></a>Object 静态方法</h3><p><code>Object.assign()</code><br><code>Object.create()</code><br><code>Object.defineProperty()</code><br><code>Object.entries()</code><br><code>Object.freeze()</code><br><code>Object.getPrototypeOf()</code><br><code>Object.is()</code><br><code>Object.isFrozen()</code><br><code>Object.keys()</code><br><code>Object.values()</code></p>
<blockquote>
<p><strong><code>Object.assign(target, ...sources)</code></strong></p>
</blockquote>
<p>用于将所有<strong>可枚举属性</strong>的值从一个或多个源对象分配到目标对象。它将返回目标对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(o1, o2, o3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1)  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line">obj === o1 <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">const</span> v2 = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> v3 = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> v4 = <span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, v1, <span class="literal">null</span>, v2, <span class="literal">undefined</span>, v3, v4)</span><br><span class="line"><span class="comment">// 原始类型会被包装，null 和 undefined 会被忽略。</span></span><br><span class="line"><span class="comment">// 注意，只有字符串的包装对象才可能有自身可枚举属性。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>Object.create(proto, [propertiesObject])</code></strong></p>
</blockquote>
<p>创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(proto[, propertiesObject])</span><br><span class="line"><span class="comment">// 参数：proto 一个对象,新创建对象的原型对象</span></span><br><span class="line"><span class="comment">// 参数：propertiesObject 要添加到新创建对象的可枚举属性</span></span><br><span class="line"><span class="comment">// 返回值：一个新对象，带着指定的原型对象和属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proto)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>Object.defineProperty(obj, prop, descriptor)</code></strong></p>
</blockquote>
<p>在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 表示对象的属性是否可以被删除，以及除 value 和 writable 特性外的其他特性是否可以被修改。默认为 false</span></span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;c&#x27;</span>, <span class="comment">// 配置该属性的默认值 默认为 undefined</span></span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">// 配置该属性是否可以被修改， 默认值是false， 不可修改</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// 配置该属性是否可枚举， 默认值是false， 不可枚举</span></span><br><span class="line">  <span class="comment">// 默认为 undefined</span></span><br><span class="line">  <span class="comment">// set: function (newVal) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;赋值了&#x27;, newVal)</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// 默认为 undefined</span></span><br><span class="line">  <span class="comment">// get: function () &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;取值了&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常</p>
<blockquote>
<p><strong><code>Object.entries(obj)</code></strong></p>
</blockquote>
<p>返回一个给定对象自身可枚举属性的键值对数组</p>
<p>将Object转换为Map <code>new Map(Object.entries(obj))</code></p>
<blockquote>
<p><strong><code>Object.freeze()</code></strong></p>
</blockquote>
<p>接受一个对象作为参数，并返回一个相同的不可变的对象，冻结一个对象后该对象的原型也不能被修改</p>
<p>可以阻止修改对象的值，但是不能阻止引用的修改</p>
<p>只是做了层浅冻结，具有嵌套属性的对象实际上并未冻结</p>
<blockquote>
<p><strong><code>Object.getPrototypeOf</code></strong></p>
</blockquote>
<p>返回指定对象的原型</p>
<blockquote>
<p><strong><code>Object.is()</code></strong></p>
</blockquote>
<p>Object.is() 方法判断两个值是否是相同的值。比较时不会做类型转换，这与 <code>==</code> <code>===</code> 运算符的判定方式都不一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">0</span>, +<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(-<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="literal">undefined</span>, <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="literal">null</span>, <span class="literal">null</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>, <span class="title class_">Number</span>.<span class="property">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="number">0</span> / <span class="number">0</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>Object.isFrozen()</code></strong></p>
</blockquote>
<blockquote>
<p><strong><code>Object.keys(obj)</code></strong></p>
</blockquote>
<p>返回一个由一个给定对象的自身可枚举属性组成的数组</p>
<blockquote>
<p><strong><code>Object.values(obj)</code></strong></p>
</blockquote>
<p>返回一个给定对象自身的所有可枚举属性值的数组</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js —— string字符串操作</title>
    <url>/2032.html</url>
    <content><![CDATA[<h3 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5n">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String</span></p>
<blockquote>
<p>操作字符串的方法<strong>不会改变原来的字符串</strong>，需要新字符串去接收</p>
</blockquote>
<ul>
<li><strong>查找指定字符串</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">indexOf</span>(searchString[, position]) <span class="comment">// 获取某个字符串第一次出现的位置，如果没有，返回-1。可选参数position可设置从str的某个指定的位置开始查找</span></span><br><span class="line">str.<span class="title function_">lastIndexOf</span>(searchString[, position]) <span class="comment">// 从后面开始查找某个字符串第一次出现的位置。如果没有，返回-1</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">search</span>(regexp) <span class="comment">// 输出第一次出现位置，找不到输出-1</span></span><br><span class="line">str.<span class="title function_">match</span>(regexp) <span class="comment">// 输出匹配到的第一个字符，匹配不到返回 null</span></span><br><span class="line">str.<span class="title function_">match</span>(regexp/g) <span class="comment">// 全部输出</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">startsWith</span>(str1) <span class="comment">// 判断 str 字符串是否以 str1 字符串开头，若符合返回 true</span></span><br><span class="line">	<span class="comment">// 等价于判断 str.indexOf(str1) === 0</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">endsWith</span>(str1) <span class="comment">// 判断 str 字符串是否以 str1 字符串结尾，若符合返回 true</span></span><br><span class="line">	<span class="comment">// 等价于判断 str.indexOf(str1) === str.length - str1.length</span></span><br></pre></td></tr></table></figure>

<p>str.includes(searchString[, position]) 用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false</p>
<ul>
<li><strong>str.trim()</strong></li>
</ul>
<p>去除字符串两边的空格，内部空格不会去除</p>
<ul>
<li><strong>大小写转换</strong></li>
</ul>
<p><code>str.toUpperCase()</code> 全部转换成大写字母<br><code>str.toLowerCase()</code> 全部转换成小写字母</p>
<ul>
<li><strong>字符串拼接与截取</strong></li>
</ul>
<p>字符串拼接 可以用 concat，用法与数组一样，但是一般都用 <code>+</code></p>
<p><code>str.slice(start, end)</code></p>
<p>从 start 开始，end 结束，并且取不到 end，没有 end 则截取从 start 到末尾<br>start 和 end 都不是必选，<code>str.slice()</code> 与 <code>str.slice(0)</code> 等价 截取全部，<br>start 和 end 可以是任意参数，参数应该是先调用Number()， 结果是NAN转换成0输出， 结果是整数直接输出， 结果是小数，再调用parseInt() 转化为整数输出<br>start 和 end 可以是负数，会将字符串的长度与对应的负数相加，结果作为参数，如果还是负数，不会递归继续与字符长度相加，取 0</p>
<p><code>str.substring(params1, params2)</code></p>
<p>以两个参数中较小一个作为起始位置，较大的参数作为结束位置，不包括结束位置，只有一个参数则截取到末尾<br>params1, params2 都不是必选，<code>str.substring()</code> 与 <code>str.substring(0)</code> 等价 截取全部<br>可以是任意参数，参数应该是先调用Number()， 结果是NAN转换成0输出， 结果是整数直接输出， 结果是小数，再调用parseInt() 转化为整数输出<br>可以是负数，负参数会被直接转换为 0</p>
<p><code>str.substr(start, length)</code></p>
<p>从 start 开始，截取 length 个字符，没有 length 则截取到末尾<br>可以是任意参数，参数应该是先调用Number()， 结果是NAN转换成0输出， 结果是整数直接输出， 结果是小数，再调用parseInt() 转化为整数输出<br>start 参数为负参数时，会将参数与字符串长度相加后的结果作为参数，如果还是负数，不会递归继续与字符长度相加，取 0<br>length 参数为负数时，会被转化为 0 ，即截取长度为 0</p>
<ul>
<li><strong>字符串切割</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">split</span>(separator[, limit]) <span class="comment">// 将字符串分割成数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;zs,ls,ww&#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>, <span class="number">1</span>) <span class="comment">// [&#x27;zs&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> arr = str.<span class="title function_">split</span>() <span class="comment">// [&#x27;zs,ls,ww&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串替换</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">str.<span class="title function_">replace</span>(regexp|substr, replacement)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：regexp/substr: 需要替换的内容    replacement: 替换文本或生成替换文本的函数  默认只替换第一个匹配子串</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/regexp/g</span>, replacement) <span class="comment">// 全部替换</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/ /g</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 将全部空格去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// replaceAll 全部替换</span></span><br></pre></td></tr></table></figure>

<p>replace() 方法的参数 replacement 可以是函数。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是 stringObject 本身。</p>
<ul>
<li><strong><code>str.charAt(pos)</code></strong></li>
</ul>
<p>pos参数可以是任意, 参数应该是先调用Number()， 结果是NAN转换成0输出，结果是整数直接输出，结果是小数，再调用 Math.ceil() 转化为整数输出<br>str.charAt() &#x3D;&#x3D;&#x3D; str.charAt(0)</p>
<p>如果pos小于0或者大于等于字符串的长度str.length，返回空字符串</p>
<ul>
<li><strong><code>padEnd() padStart()</code></strong></li>
</ul>
<p>padEnd() padStart() 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。padStart()从当前字符串的左侧开始填充，padEnd()从当前字符串的右侧开始填充</p>
<ul>
<li>寻找重复最多的字符以及个数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;shdshdfjkfjfdgjkjdksgjskdjfsfsfsfjksjkfdkjf&#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">sort</span>()</span><br><span class="line">str = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> char = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1+/g</span></span><br><span class="line">str.<span class="title function_">replace</span>(reg, <span class="keyword">function</span>(<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d) <span class="comment">// a 匹配模式的字符串 b 与模式中的子表达式匹配的字符串 c 匹配在 str 中出现的位置 d  str 本身</span></span><br><span class="line">  <span class="keyword">if</span> (a.<span class="property">length</span> &gt; count) &#123;</span><br><span class="line">    count = a.<span class="property">length</span></span><br><span class="line">    char = b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最多的字符为:&#x27;</span> + char + <span class="string">&#x27;;个数为:&#x27;</span> + count)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js —— 作用域与预解析</title>
    <url>/2038.html</url>
    <content><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote>
<p>作用域：变量起作用的区域，也就是说：变量定义后，可以在哪个范围内使用该变量</p>
</blockquote>
<p><strong>全局作用域</strong> ：在 script 标签内，<strong>函数外</strong>的区域就是全局作用域，在全局作用内声明的变量叫做<strong>全局变量</strong> 。全局变量可以在任意地方访问。（if&#x2F;while&#x2F;for 语句中声明的变量也是全局变量）</p>
<p><strong>函数作用域</strong> ：在函数内的区域叫做函数作用域，在函数作用域内声明的变量叫做<strong>局部变量</strong> ，局部变量只有在当前函数内才能访问到。</p>
<p>自由变量：对于一个函数来说，函数内部没有声明该变量，但在函数内部有访问该变量。对于这个函数来说， 该变量就是一个自由变量。</p>
<p>隐式全局变量：没有使用 var 定义的变量也是全局变量，叫做隐式全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num1 = <span class="number">22</span></span><br><span class="line">  num2 = <span class="number">33</span></span><br><span class="line">  num = <span class="number">33</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line"><span class="comment">// console.log(num1)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2)</span><br></pre></td></tr></table></figure>

<p>变量的查找规则：</p>
<ul>
<li>函数内部可以使用函数外部的变量</li>
<li>有局部变量就用局部变量，没有局部变量就用全局变量。</li>
</ul>
<p><strong>函数作用域是在函数定义的时候作用域就确定下来了，和函数在哪调用无关</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">456</span></span><br><span class="line">  <span class="title function_">f1</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f2</span>() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>作用域链：只要是函数，就会形成一个作用域，如果这个函数被嵌套在其他函数中，那么外部函数也有自己的作用域，这个一直往上到全局环境，就形成了一个作用域链</p>
<p><code>变量的搜索原则</code>：从当前作用域开始查找，一直查询到全局作用域，如果存在，就返回。如果在全局中也没有找到该变量会<strong>报错</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 10</span></span><br><span class="line">  num = <span class="number">20</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 456 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">456</span></span><br><span class="line">  <span class="title function_">f1</span>(num)</span><br><span class="line">  <span class="title function_">f1</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f2</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1</span>) &#123;</span><br><span class="line">  num1 = <span class="number">100</span></span><br><span class="line">  num2 = <span class="number">200</span></span><br><span class="line">  num3 = <span class="number">300</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1) <span class="comment">// 100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// 200</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num3) <span class="comment">// 300</span></span><br><span class="line">  <span class="keyword">var</span> num3</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1) <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// 200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num3) <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>预解析过程：js 解析器在执行代码前，会把所有变量的声明和函数的声明提升到当前作用域的顶部。例如<code>var a = 11</code>其实会分为<code>var a</code> 和<code>a = 11</code>两部分，其中<code>var a</code>会被提升</p>
<p>预解析规则:</p>
<ol>
<li>var 声明的变量：只提升声明，不会提升赋值</li>
<li>函数声明：整体提升</li>
<li>先提升 var 声明的变量，后提升函数声明</li>
<li>遇到重名的 var 声明， var 声明会被忽略，值会保留</li>
<li>遇到重名的函数声明，后者会覆盖前者</li>
<li>如果 var 声明和函数声明同名，函数声明会把 var 声明覆盖</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数预解析</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">45</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn5</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// undefined</span></span><br><span class="line">  n = <span class="number">20</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// 20</span></span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn5</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// 45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 函数体</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">23</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 23</span></span><br><span class="line"><span class="comment">// b() // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 函数体</span></span><br><span class="line"><span class="title function_">c</span>() <span class="comment">// 嘿嘿</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  comsole.<span class="title function_">log</span>(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘿嘿&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn1) <span class="comment">// 函数体</span></span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈&#x27;</span>) <span class="comment">// 哈哈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn2) <span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">fn2</span>() <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘿嘿&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于函数表达式，函数的调用必须在表达式声明之后</span></span><br><span class="line"><span class="title function_">fn2</span>() <span class="comment">// 嘿嘿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.</span></span><br><span class="line"><span class="comment">// 只有用 var 声明的变量才会预解析</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 报错</span></span><br><span class="line">d = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f) <span class="comment">// 报错 f is not defined</span></span><br><span class="line"><span class="keyword">var</span> e = (f = <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// abc</span></span><br></pre></td></tr></table></figure>

<p><strong>不要在一个作用域内重复的声明相同的变量和函数</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js —— 函数</title>
    <url>/2037.html</url>
    <content><![CDATA[<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>arguments 对象里保存了所有的实参，是一个伪数组</p>
<h2 id="定义函数的三种方式"><a href="#定义函数的三种方式" class="headerlink" title="定义函数的三种方式"></a>定义函数的三种方式</h2><ul>
<li>函数声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>() <span class="comment">// 函数声明可以先调用，在声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是函数声明&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数表达式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是函数表达式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// 函数表达式必须先声明，再调用</span></span><br></pre></td></tr></table></figure>

<ul>
<li>构造函数 Function</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数也是对象，可以使用 Function 构造函数 new 出来</span></span><br><span class="line"><span class="comment">// 相当于var fn = function () &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法：new Function(arg1,arg2,arg3..,body)</span></span><br><span class="line"><span class="comment">// 所有的参数都是字符串类型</span></span><br><span class="line"><span class="comment">// 前面可以定义任意多个形参，最后一个参数是代码体</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;alert(1)&#x27;</span>)</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a1&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;alert(a1 + a2)&#x27;</span>)</span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Function-属性"><a href="#Function-属性" class="headerlink" title="Function 属性"></a>Function 属性</h2><ul>
<li>length：获取形参的长度</li>
<li>name：获取函数的名字，此属性不允许修改</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property">length</span> <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)        &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>)       &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">...args</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a, b = <span class="number">1</span>, c</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="Function-prototype-成员"><a href="#Function-prototype-成员" class="headerlink" title="Function.prototype 成员"></a>Function.prototype 成员</h2><ul>
<li>arguments：已废弃，获取函数的实参，现在推荐的做法是使用函数内部可用的  <code>arguments</code> 对象来访问函数的实参</li>
<li>caller: 已废弃，用于获取当前函数是在哪个函数中调用的</li>
<li>constructor：指向当前构造函数，Function</li>
<li>call：调用函数，重新指定 this</li>
<li>apply：调用函数，重新指定 this</li>
<li>bind：重新指向 this，返回一个新的函数，不调用</li>
<li>toString : 得到函数的字符串格式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">a.<span class="title function_">toString</span>() <span class="comment">// &#x27;function a() &#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) <span class="comment">// &#x27;[object 构造函数]&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数的四种调用模式"><a href="#函数的四种调用模式" class="headerlink" title="函数的四种调用模式"></a>函数的四种调用模式</h2><p>分析 this 指向问题</p>
<ol>
<li>任何函数都有属于自己的 this</li>
<li>this 是动态的，this 在函数声明的时候是确定不了的，只有当函数被调用了才能够确定 this 的指向，this 的指向和函数在哪被调用没有关系</li>
</ol>
<p>分析 this 的问题的思路： 1. this 是属于哪个函数 2. <strong>这个函数是何种调用模式</strong></p>
<h3 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h3><p><font color="red">如果一个函数不是一个对象的属性时，就是被当做一个函数来进行调用的。此时 this 指向了 window</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向 window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<h3 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h3><p><font color="red">当一个函数被保存为对象的一个属性时，我们称之为一个方法。当一个方法被调用时，this 被绑定到当前对象</font><br>通过点语法或者中括号语法来访问方法，都是属于方法调用模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">fn</span>: f &#125;</span><br><span class="line"><span class="keyword">var</span> arr = [f]</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">fn</span>() <span class="comment">// obj</span></span><br><span class="line">obj[<span class="string">&#x27;fn&#x27;</span>]() <span class="comment">// obj</span></span><br><span class="line">arr[<span class="number">0</span>]() <span class="comment">// arr 也是方法调用模式</span></span><br></pre></td></tr></table></figure>

<h3 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h3><p><font color="red">如果函数是通过 new 关键字进行调用的，此时 this 被绑定到创建出来的新对象上</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>() <span class="comment">// this 指向 p</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：分析 this 的问题，主要就是区分函数的调用模式，看函数是怎么被调用的</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">38</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = obj.<span class="property">getAge</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// window ==&gt; 38</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">38</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>) <span class="comment">// obj ==&gt; 18</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>) <span class="comment">// window ==&gt; 38</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getAge</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="keyword">var</span> length = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [fn, <span class="string">&#x27;222&#x27;</span>]</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// 10</span></span><br><span class="line">arr[<span class="number">0</span>]() <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.</span></span><br><span class="line"><span class="keyword">var</span> length = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="title function_">fn</span>() <span class="comment">// window ==&gt; 10</span></span><br><span class="line">    <span class="variable language_">arguments</span>[<span class="number">0</span>]() <span class="comment">// argument ==&gt; 3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">method</span>(fn, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.</span></span><br><span class="line"><span class="keyword">let</span> len = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">len</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// window ==&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">len</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fn</span>() <span class="comment">// window ==&gt; undefined</span></span><br><span class="line">    <span class="variable language_">arguments</span>[<span class="number">0</span>]() <span class="comment">// arguments ==&gt; undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">say</span>(fn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">bar</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">x</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为obj对象的一个方法来调用bar，把它的this绑定到obj。</span></span><br><span class="line"><span class="comment">// 将返回的函数的引用赋值给fn。</span></span><br><span class="line"><span class="keyword">var</span> fn = obj.<span class="title function_">bar</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用fn而不设置this，</span></span><br><span class="line"><span class="comment">// 通常(即不使用箭头函数的情况)默认为全局对象</span></span><br><span class="line"><span class="comment">// 若在严格模式则为undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>() === obj) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是注意，如果你只是引用obj的方法，而没有调用它</span></span><br><span class="line"><span class="keyword">var</span> fn2 = obj.<span class="property">bar</span></span><br><span class="line"><span class="comment">// 那么调用箭头函数后，this指向window，因为它从 bar 继承了this。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn2</span>()() == <span class="variable language_">window</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="方法借用模式"><a href="#方法借用模式" class="headerlink" title="方法借用模式"></a>方法借用模式</h3><p>上下文调用模式也叫方法借用模式，分为 apply，call ，bind<br>任何函数都可以调用 apply，call ，bind 这三个方法</p>
<h4 id="call-方法"><a href="#call-方法" class="headerlink" title="call 方法"></a>call 方法</h4><p>call 方法可以调用一个函数，并且可以指定这个函数的 <code>this</code> 指向<br>call 方法也可以和 () 一样，进行函数调用<br>第一个参数：指定函数的 this，如果不传，则 this 指向 window；其余参数：和函数的参数列表一模一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call</span>() <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变 this 指向</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;) <span class="comment">// &#123; name: &#x27;zs&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply 方法"></a>apply 方法</h4><blockquote>
<p><code>apply()</code>方法的作用和 <code>call()</code>方法类似，只有一个区别，就是<code>apply()</code>方法接受的是<strong>一个包含多个参数的数组</strong>。而<code>call()</code>方法接受的是<strong>若干个参数</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n1, n2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n1 + n2)</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">apply</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;, [<span class="number">10</span>, <span class="number">20</span>]) <span class="comment">// &#123;name: &#x27;zs&#x27;&#125;, 30</span></span><br><span class="line"><span class="comment">// apply 的特性：平铺性，把数组中的每一项取出来作为函数的实参</span></span><br></pre></td></tr></table></figure>

<h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind 方法"></a>bind 方法</h4><p><strong>bind()</strong> 方法创建一个新的函数、可以绑定新的函数的 <code>this</code> 指向</p>
<p>返回值：新的函数(不会被调用)<br>参数：新函数的 this 指向，绑定后，无论使用何种调用模式，this 都不会改变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFn = fn.<span class="title function_">bind</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// newFn 是 bind 创建并返回出来的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newFn)</span><br><span class="line"><span class="title function_">newFn</span>() <span class="comment">// this ==&gt; [1,2,3]</span></span><br></pre></td></tr></table></figure>

<p>如果对一个函数进行多次 bind，那么上下文会是什么呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">bind</span>().<span class="title function_">bind</span>(a)() <span class="comment">// =&gt; ?</span></span><br></pre></td></tr></table></figure>

<p>如果你认为输出结果是 a，那么你就错了，其实我们可以把上述代码转换成另一种形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fn.bind().bind(a) 等于</span></span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>()</span><br><span class="line">  &#125;.<span class="title function_">apply</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>()</span><br></pre></td></tr></table></figure>

<p>可以从上述代码中发现，不管我们给函数 bind 几次，fn 中的 this 永远由第一次 bind 决定，所以结果永远是 window</p>
<h3 id="特殊的-this-指向"><a href="#特殊的-this-指向" class="headerlink" title="特殊的 this 指向"></a>特殊的 this 指向</h3><ul>
<li>定时器中的 this 指向了 window，因为定时器的 function 最终是由 window 来调用的</li>
<li>事件中的 this 指向的是当前的元素，在事件触发的时候，浏览器让当前元素调用了 function</li>
<li>call apply bind 第一个参数表示要绑定的 this，不传、传 null或者 undefined，this 均指向 window，但在严格模式下，不传指向 undefined，传 null 指向 null，传 undefined 指向 undefined</li>
</ul>
<h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>递归的要求：1. 自己调用自己 2. 要有结束条件（出口）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算斐波那契数列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fn</span>(n - <span class="number">1</span>) + <span class="title function_">fn</span>(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">12</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js —— 原型</title>
    <url>/2036.html</url>
    <content><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>Javascript 规定，每一个函数都有一个 <code>prototype</code> 属性，属性值是一个对象，这个对象就叫做原型（原型对象），这个对象的所有属性和方法，都会被构造函数的实例继承</p>
<p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name, age) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(...)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(...)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sayName</span> === p2.<span class="property">sayName</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>这时所有实例的 <code>sayName()</code> 方法，其实都指向同一个内存地址</p>
<h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h3><p>任意对象都有 <code>__proto__</code> 属性，这个属性指向了构造函数的 prototype 属性，也就是原型对象</p>
<p>获取原型对象：</p>
<ul>
<li>通过 <code>构造函数.prototype</code> 可以获取</li>
<li>通过 <code>实例.__proto__</code> 可以获取（隐式原型）</li>
<li>它们指向了同一个对象 <code>构造函数.prototype === 实例.__proto__</code></li>
</ul>
<p><strong>注意：<code>__proto__</code>是浏览器的一个隐藏（私有）属性，IE 浏览器不支持，不要通过它来修改原型里的内容，如果要修改原型中的内容，使用 <code>构造函数.prototype</code> 去修改</strong></p>
<h3 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h3><p>默认情况下，原型对象中只包含了一个属性：constructor，constructor 属性指向了当前原型对象的构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// 构造函数本身</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line"><span class="comment">// p 实例对象没有constructor 属性， 该属性来源于原型上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">constructor</span> == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h3><p>构造函数：构造函数就是一个函数，配合 new 可以新建对象</p>
<p>实例：通过构造函数实例化出来的对象我们把它叫做构造函数的实例。一个构造函数可以有很多实例</p>
<p>原型：每一个构造函数都有一个属性<code>prototype</code>，函数的 prototype 属性值就是原型。通过构造函数创建出来的实例能够直接使用原型上的属性和方法</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204519.png"></p>
<p>原型三角关系：</p>
<ul>
<li><p>构造函数和原型</p>
<ul>
<li>构造函数，通过 prototype 属性访问原型</li>
<li>原型通过 constructor 属性访问到构造函数</li>
</ul>
</li>
<li><p>构造函数 和 实例对象</p>
<ul>
<li>构造函数可以创建实例对象</li>
<li>实例对象不能直接访问到构造函数</li>
</ul>
</li>
<li><p>原型 和 实例对象关系</p>
<ul>
<li>实例对象可以直接访问到原型上的所有成员</li>
<li>实例对象可以间接的访问到构造函数（通过原型上的 constructor 属性）</li>
</ul>
</li>
</ul>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>任何一个对象，都有原型对象，原型对象本身又是一个对象，所以原型对象也有自己的原型对象，这样形成的链式结构，就是原型链</p>
<p>绘制对象的原型链结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">// p ==&gt; Person.prototype  ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="comment">// o ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="comment">// arr ==&gt; Array.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">// date ==&gt; Date.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math 是个内置对象，不是个构造函数</span></span><br><span class="line"><span class="comment">// Math ==&gt; Object.prototype ==&gt; null</span></span><br></pre></td></tr></table></figure>

<p>总结：Object.prototype 是原型链的尽头，Object.prototype 的原型是 null</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204539.png"></p>
<h3 id="函数的原型链结构"><a href="#函数的原型链结构" class="headerlink" title="函数的原型链结构"></a>函数的原型链结构</h3><p>函数是由 new Function 创建出来的，因此函数也是一个对象，<code>所有的函数都是 Function 的实例</code></p>
<p>Person &#x3D;&#x3D;&gt; Function.prototype &#x3D;&#x3D;&gt; Object.prototype &#x3D;&#x3D;&gt; null</p>
<p>Function.prototype 类型是个函数</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204558.jpeg"></p>
<h2 id="完整版原型链"><a href="#完整版原型链" class="headerlink" title="完整版原型链"></a>完整版原型链</h2><p>图一<br><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204647.png"></p>
<p>图二<br><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102204701.jpeg"></p>
<ol>
<li>所有函数都是 new Function 创建出来的，因此 <code>所有函数.__proto__</code> 都是 <code>Function.prototype</code></li>
<li>所有对象都是 new Object 创建出来的，因此 <code>所有对象.__proto__</code> 都是 <code>Object.prototype</code></li>
</ol>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyZWVwZXJ5YW5nL2Jsb2cvaXNzdWVzLzk=">参考链接</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js —— 继承</title>
    <url>/2035.html</url>
    <content><![CDATA[<h2 id="ES5实现继承的六种方式"><a href="#ES5实现继承的六种方式" class="headerlink" title="ES5实现继承的六种方式"></a>ES5实现继承的六种方式</h2><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>利用原型链让一个引用类型继承另一个引用类型的属性和方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">property</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">property</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 SubType</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subProperty</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSubValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subProperty</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="title function_">getSuperValue</span>());                            <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance <span class="keyword">instanceof</span> <span class="title class_">SubType</span>);                         <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance <span class="keyword">instanceof</span> <span class="title class_">SuperType</span>);                       <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance <span class="keyword">instanceof</span> <span class="title class_">Object</span>);                          <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(instance));           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(instance));         <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(instance));            <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ol>
<li>来自原型对象的引用属性是所有实例共享的。</li>
<li>创建子类实例时，无法向父类构造函数传参。</li>
</ol>
<p>举例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 来自原型对象的引用属性是所有实例共享的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>);        <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>);        <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为修改colors是修改的SubType.prototype.colors，所以所有的实例都会更新</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 创建子类实例时，无法向父类构造函数传参</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用父类是在 SubType.prototype = new SuperType()</span></span><br><span class="line"><span class="comment">// 新建子类实例调用 new SubType()</span></span><br><span class="line"><span class="comment">// 所以无法再new SubType() 的时候给父类 SuperType() 传参</span></span><br></pre></td></tr></table></figure>

<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>在子类构造函数的内部通过call()以及apply()调用父类构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类 SuperType</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> (name) &#123;</span><br><span class="line">  <span class="comment">// 继承了SuperType，同时还传递了参数</span></span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">name</span>);               <span class="comment">// &quot;Tom&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="title function_">getName</span>());          <span class="comment">// &quot;Tom&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">age</span>);                <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>);             <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Peter&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">name</span>);               <span class="comment">// &quot;Peter&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="title function_">getName</span>());          <span class="comment">// &quot;Peter&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">age</span>);                <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>);             <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>可以看到，借用构造函数实现继承，解决了原型链继承的两个问题，既可以在新建子类实例的时候给父类构造函数传递参数，也不会造成子类实例共享父类引用变量。</p>
<p>但是你注意到了吗，这里我们把父类方法也写在了SuperType()构造函数里面，可以像前面一样写在SuperType.prototype上吗？</p>
<p>答案是不可以，必须写在SuperType()构造函数里面。因为这里是通过调用SuperType.call(this)来实现继承的，并没有通过new生成一个父类实例，所以如果写在prototype上，子类是无法拿到的。</p>
<p>缺点：如果方法都在构造函数中定义，那么就无法复用函数。每次构建实例时都会在实例中保留方法函数，造成了内存的浪费，同时也无法实现同步更新，因为每个实例都是单独的方法函数。如果方法写在prototype上，就只会有一份，更新时候会做到同步更新。</p>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。</p>
<p>使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> (name, age) &#123;</span><br><span class="line">  <span class="comment">// 继承父类实例属性</span></span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子类实例属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubType</span>;</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>);                  <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span></span><br><span class="line">instance1.<span class="title function_">sayName</span>();                            <span class="comment">// &quot;Tom&quot;</span></span><br><span class="line">instance1.<span class="title function_">sayAge</span>();                             <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Peter&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>);                  <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;]</span></span><br><span class="line">instance2.<span class="title function_">sayName</span>();                            <span class="comment">// &quot;Peter&quot;</span></span><br><span class="line">instance2.<span class="title function_">sayAge</span>();                             <span class="comment">// 30</span></span><br></pre></td></tr></table></figure>

<p>缺点： 调用了两次父类构造函数，一次通过SuperType.call(this)调用，一次通过new SuperType()调用。</p>
<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>不使用严格意义上的构造函数，借助原型可以基于已有的对象创建新的对象，同时还不必因此创建自定义类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在object函数内部，先创建了一个临时的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回这个临时类型的一个新实例。</span></span><br><span class="line"><span class="comment">// 从本质上讲，object()对传入其中的对象执行了一次浅复制。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">object</span> (o) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;Shelby&#x27;</span>, <span class="string">&#x27;Court&#x27;</span>, <span class="string">&#x27;Van&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anotherPerson = <span class="title function_">object</span>(person);</span><br><span class="line">anotherPerson.<span class="property">name</span> = <span class="string">&#x27;Greg&#x27;</span>;</span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;Rob&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yetAnotherPerson = <span class="title function_">object</span>(person);</span><br><span class="line">yetAnotherPerson.<span class="property">name</span> = <span class="string">&#x27;Linda&#x27;</span>;</span><br><span class="line">yetAnotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;Barbie&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="property">friends</span>);               <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yetAnotherPerson.<span class="property">friends</span>);            <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>);                      <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>Object.create()在传入一个参数的情况下与前面写的object()方法的行为相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;Shelby&#x27;</span>, <span class="string">&#x27;Court&#x27;</span>, <span class="string">&#x27;Van&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anotherPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line">anotherPerson.<span class="property">name</span> = <span class="string">&#x27;Greg&#x27;</span>;</span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;Rob&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yetAnotherPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;Linda&#x27;</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">yetAnotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;Barbie&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="property">friends</span>);               <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yetAnotherPerson.<span class="property">friends</span>);            <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>);                      <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>缺点：和原型链继承一样，所有子类实例共享父类的引用类型。</p>
<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>寄生式继承是与原型式继承紧密相关的一种思路，创建一个仅用于封装继承过程的函数，该函数内部以某种形式来做增强对象，最后返回对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span> (o) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span> (o) &#123;</span><br><span class="line">  <span class="keyword">var</span> clone = <span class="title function_">object</span>(o);</span><br><span class="line">  clone.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&#x27;Shelby&#x27;</span>, <span class="string">&#x27;Court&#x27;</span>, <span class="string">&#x27;Van&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anotherPerson = <span class="title function_">createAnother</span>(person);</span><br><span class="line">anotherPerson.<span class="title function_">sayHi</span>();                              <span class="comment">// &quot;Hi&quot;</span></span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;Rob&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherPerson.<span class="property">friends</span>);              <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> yerAnotherPerson = <span class="title function_">createAnother</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yerAnotherPerson.<span class="property">friends</span>);              <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>缺点： 和原型链式继承一样，所有子类实例共享父类引用类型。 和借用构造函数继承一样，每次创建对象都会创建一次方法。</p>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>将寄生式继承和组合继承相结合，解决了组合式继承中会调用两次父类构造函数的缺点。</p>
<p>组合继承在第一次调用SuperType构造函数时，SubType.prototype会得到两个属性：name和colors；它们都是 SuperType 的实例属性，只不过现在位于 SubType的原型中。当调用SubType构造函数时，又会调用一次SuperType构造函数，这一次又在新对象上创建了实例属性name和colors。于是，这两个属性就屏蔽了原型中的两个同名属性。</p>
<p>所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。</p>
<p>其背后的基本思路是：不必为了指定子类型的原型而调用父类的构造函数，我们需要的无非就是父类原型的一个副本而已。本质上，就是使用寄生式继承来继承父类的prototype，然后再将结果指定给子类的prototype。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">SubType, SuperType</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="title function_">object</span>(<span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>);        <span class="comment">// 创建对象</span></span><br><span class="line">  prototype.<span class="property">constructor</span> = <span class="title class_">SubType</span>;    <span class="comment">// 增强对象</span></span><br><span class="line">  <span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = prototype;      <span class="comment">// 指定对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="comment">// 继承父类实例属性</span></span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子类实例属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父类方法</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">SubType</span>, <span class="title class_">SuperType</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类方法</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line">instance1.<span class="title function_">sayAge</span>();                                   <span class="comment">// 20</span></span><br><span class="line">instance1.<span class="title function_">sayName</span>();                                  <span class="comment">// &quot;Tom&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>);                        <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Peter&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">instance2.<span class="title function_">sayAge</span>();                                   <span class="comment">// 30</span></span><br><span class="line">instance2.<span class="title function_">sayName</span>();                                  <span class="comment">// &quot;Peter&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>);                        <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br></pre></td></tr></table></figure>

<p>寄生组合式继承的高效率体现在它只调用了一次SuperType构造函数，并且因此避免了再SubType.prototype上面创建不必要的、多余的属性。与此同时，原型链还能保持不变。因此，还能够正常使用instanceof和isPrototypeOf()。</p>
<h2 id="ES6实现继承"><a href="#ES6实现继承" class="headerlink" title="ES6实现继承"></a>ES6实现继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperType</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubType</span> <span class="keyword">extends</span> <span class="title class_ inherited__">SuperType</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承父类实例属性和prototype上的方法</span></span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类实例属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子类方法</span></span><br><span class="line">  <span class="title function_">sayAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line">instance1.<span class="title function_">sayAge</span>();                                   <span class="comment">// 20</span></span><br><span class="line">instance1.<span class="title function_">sayName</span>();                                  <span class="comment">// &quot;Tom&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>);                        <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Peter&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">instance2.<span class="title function_">sayAge</span>();                                   <span class="comment">// 30</span></span><br><span class="line">instance2.<span class="title function_">sayName</span>();                                  <span class="comment">// &quot;Peter&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>);                        <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js —— 闭包</title>
    <url>/2039.html</url>
    <content><![CDATA[<h3 id="闭包-closure-的概念"><a href="#闭包-closure-的概念" class="headerlink" title="闭包(closure)的概念"></a>闭包(closure)的概念</h3><blockquote>
<p>闭包是函数和声明该函数的词法环境的组合</p>
</blockquote>
<p>在 js 中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，产生闭包</p>
<p>产生闭包的条件：有两个函数，是嵌套关系，内部函数引用了外部函数的变量</p>
<p>闭包的作用：</p>
<ul>
<li>私有变量，保护数据安全</li>
<li>持久化数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 闭包的基本模型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span> () &#123;</span><br><span class="line">    num++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner  <span class="comment">// 把inner函数给返回出去，让外部能够调用inner函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并不一定是有返回函数才算是产生了闭包</span></span><br><span class="line"><span class="keyword">var</span> f3</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">  f3 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>()</span><br><span class="line"><span class="title function_">f3</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h3><h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><p>需求：统计一个函数的调用次数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被调用了，调用次数是&#x27;</span> + count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 缺点：count是全局变量，不安全</span></span><br></pre></td></tr></table></figure>

<p>使用闭包解决这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span> <span class="comment">// 私有变量, 将 count 保护起来了</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前count&#x27;</span> + count)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> add</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">result</span>()</span><br></pre></td></tr></table></figure>

<h4 id="缓存的私有化"><a href="#缓存的私有化" class="headerlink" title="缓存的私有化"></a>缓存的私有化</h4><p>计算斐波那契数列，会有很大的性能问题，因为重复的计算了很多次，因此我们可以使用缓存来解决这个性能问题。</p>
<p>缺点：既然使用缓存，就需要保证缓存的数据的安全，不能被别人修改，因此，需要使用闭包来实现缓存的私有化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 缓存</span></span><br><span class="line">  <span class="keyword">var</span> arr = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fbi = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[n]) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr[n]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = <span class="title function_">fbi</span>(n - <span class="number">1</span>) + <span class="title function_">fbi</span>(n - <span class="number">2</span>)</span><br><span class="line">      arr[n] = temp <span class="comment">//存入缓存</span></span><br><span class="line">      <span class="keyword">return</span> temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fbi</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fbi = <span class="title function_">outer</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fbi</span>(<span class="number">40</span>))</span><br></pre></td></tr></table></figure>

<h3 id="闭包存在的问题"><a href="#闭包存在的问题" class="headerlink" title="闭包存在的问题"></a>闭包存在的问题</h3><blockquote>
<p>正常情况下：函数在调用的时候，去开辟一块内存空间用来执行内部的代码，当函数调用结束的时候，要销毁开辟的空间，节省内存<br>闭包占用的内存是不会被释放的，因此，如果滥用闭包，会造成内存泄漏的问题。闭包很强大，但是只有在必须使用闭包的时候才使用</p>
</blockquote>
<h4 id="js-的垃圾回收机制-了解"><a href="#js-的垃圾回收机制-了解" class="headerlink" title="js 的垃圾回收机制(了解)"></a>js 的垃圾回收机制(了解)</h4><ul>
<li>内存：计算机中所有程序的运行都是在<code>内存</code> 中进行的，因此内存的性能对计算机的影响非常大，运行程序需要消耗内存，当程序结束时，内存会得到释放。</li>
<li>javascript 分配内存：当我们定义变量，javascript 自动分配内存存储数据。无论是值类型或者是引用类型，都需要存储在内存中。</li>
<li>垃圾回收：当代码执行结束，分配的内存已经不需要了，这时候需要将内存进行回收，在 javascript 语言中，<code>垃圾回收机器</code>会帮我们回收<code>不再需要使用</code>的内存。</li>
</ul>
<h5 id="引用记数法清除"><a href="#引用记数法清除" class="headerlink" title="引用记数法清除"></a>引用记数法清除</h5><p>引用记数垃圾收集：如果没有引用指向某个对象（或者是函数作用域），那么这个对象或者函数作用域就会被垃圾回收机制回收。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对象被 o 变量引用，引用记数 1</span></span><br><span class="line"><span class="keyword">var</span> obj = o <span class="comment">// 变量被 o 和 obj 引用，引用记数 2</span></span><br><span class="line">o = <span class="number">1</span> <span class="comment">// o 不在引用对象了，引用记数 1</span></span><br><span class="line">obj = <span class="literal">null</span> <span class="comment">// obj 不在引用对象了，引用记数 0，可以被垃圾回收了</span></span><br></pre></td></tr></table></figure>

<p>引用计数法无法解决循环引用导致的内存泄露</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj1 = &#123;&#125; <span class="comment">// 引用计数为 2</span></span><br><span class="line">  <span class="keyword">var</span> obj2 = &#123;&#125; <span class="comment">// 引用计数为 2</span></span><br><span class="line">  obj1.<span class="property">a</span> = obj2</span><br><span class="line">  obj2.<span class="property">b</span> = obj1</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// 销毁fn调用开辟的空间， 但是由于引用计数考虑到两个对象都不是零引用的对象，就不能够被垃圾回收机制给回收掉</span></span><br></pre></td></tr></table></figure>

<h5 id="标记清除法清除"><a href="#标记清除法清除" class="headerlink" title="标记清除法清除"></a>标记清除法清除</h5><p>使用引用计数法进行垃圾回收的时候，会出现循环引用导致内存泄漏的问题。因此现代的浏览器都采用标记清除法来进行垃圾回收。</p>
<p>这个算法假定设置一个叫做根（root）的对象（在 Javascript 里，根是全局对象 Window）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。</p>
<p><strong>从 2012 年起，所有现代浏览器都使用了标记 - 清除垃圾回收算法。</strong></p>
<h4 id="闭包占用内存释放"><a href="#闭包占用内存释放" class="headerlink" title="闭包占用内存释放"></a>闭包占用内存释放</h4><p>当闭包的功能不在需要使用了，将这个变量指向 <code>null</code>， 这样闭包占用的内存就可以被回收掉了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行次数&#x27;</span> + count)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">result</span>()</span><br><span class="line">result = <span class="literal">null</span> <span class="comment">// 当函数 fn 没有被变量引用了，那么函数 fn 就会被回收，函数 fn 一旦被回收，那么 outer调用形成的作用域也就得到了释放</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>总结 —— 遍历</title>
    <url>/396.html</url>
    <content><![CDATA[<h1 id="原生-js-中-for-语句"><a href="#原生-js-中-for-语句" class="headerlink" title="原生 js 中 for 语句"></a>原生 js 中 for 语句</h1><p><span class='red'>可使用 continue 跳出当前循环， break 跳出整个循环</span></p>
<p>如果 for 语句在函数中，使用 return 可以结束 for 循环，同时也会结束函数后续代码的执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="原生-js-中数组的-forEach-方法"><a href="#原生-js-中数组的-forEach-方法" class="headerlink" title="原生 js 中数组的 forEach 方法"></a>原生 js 中数组的 forEach 方法</h1><p>遍历数组</p>
<p><span class="red">不能用 break continue 语句跳出整个循环</span><br><span class="red">不支持 return 操作输出，return 只用于跳出当前循环</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 返回值: undefined</span></span><br></pre></td></tr></table></figure>

<h1 id="原生-js-中-for…in-语句"><a href="#原生-js-中-for…in-语句" class="headerlink" title="原生 js 中 for…in 语句"></a>原生 js 中 for…in 语句</h1><p>遍历对象</p>
<p>支持 <code>break</code>, <code>continue</code> 跳出循环</p>
<p>会枚举原型链中的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// 键</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]) <span class="comment">// 值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用 for in 遍历数组，会产生一些问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;name&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>数组的索引值 index 是 String 类型</li>
<li>会将 expando 属性也遍历出来</li>
<li>在某些情况下，在遍历数组元素时顺序是任意的</li>
</ol>
<h1 id="es6-for…of-方法"><a href="#es6-for…of-方法" class="headerlink" title="es6 for…of 方法"></a>es6 for…of 方法</h1><p>遍历类数组集合(Array, Map, Set, String, Arguments)</p>
<p>支持 <code>break</code>, <code>continue</code> 和 <code>throw</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="for…of-与-for…in-的区别"><a href="#for…of-与-for…in-的区别" class="headerlink" title="for…of 与 for…in 的区别"></a>for…of 与 for…in 的区别</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9mb3IuLi5vZiNmb3IuLi5vZiVFNCVCOCU4RWZvci4uLmluJUU3JTlBJTg0JUU1JThDJUJBJUU1JTg4JUFC">参考 MDN</span></p>
<p>无论是 for…in 还是 for…of 语句都是迭代一些东西。它们之间的主要区别在于它们的迭代方式。</p>
<p>for…in 语句以任意顺序迭代对象的可枚举属性。</p>
<p>for…of 语句遍历可迭代对象定义要迭代的数据。</p>
<h1 id="jquery-中的-each-方法"><a href="#jquery-中的-each-方法" class="headerlink" title="jquery 中的 each 方法"></a>jquery 中的 each 方法</h1><p>遍历 jQuery 对象集合，为每个匹配的元素执行一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index, element</span>) &#123;</span><br><span class="line">  <span class="comment">// index 表示当前元素在所有匹配元素中的索引号</span></span><br><span class="line">  <span class="comment">// element 表示当前元素 dom 对象</span></span><br><span class="line">  <span class="comment">// this 在函数内部，this指向了element</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index, ele</span>) &#123;</span><br><span class="line">  <span class="comment">// $(ele).css(&quot;backgroundColor&quot;, arr[index])</span></span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;backgroundColor&#x27;</span>, arr[index])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="php-中-foreach-语句"><a href="#php-中-foreach-语句" class="headerlink" title="php 中 foreach 语句"></a>php 中 foreach 语句</h1><p>用来遍历数组(关联数组和索引数组均可)。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">  <span class="comment">// $arr: 要遍历的数组</span></span><br><span class="line">  <span class="comment">// $key: 键，可以是任意变量名</span></span><br><span class="line">  <span class="comment">// $value: 值，可以是任意变量名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历关联数组</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&quot;name&quot;</span>=&gt;<span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>=&gt;<span class="number">18</span>,</span><br><span class="line">  <span class="string">&quot;sex&quot;</span>=&gt;<span class="number">20</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$k</span> . <span class="string">&quot;=&quot;</span> . <span class="variable">$v</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>手写 —— 实现一个 new 操作符</title>
    <url>/2044.html</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;zs&#x27;</span>) <span class="comment">// Student &#123;name: &#x27;zs&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>new 做了哪些事</p>
<ol>
<li>创建一个新的空对象，类型是 Student</li>
<li>将 this 指向这个新的对象</li>
<li>执行构造函数 目的：给这个新对象加属性和方法</li>
<li>返回这个新对象</li>
</ol>
<p>简单实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NEW</span>(<span class="params">fun</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断是否是函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;第一个参数应该是函数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个空对象，并将原型指向 fun.prototype</span></span><br><span class="line">  <span class="comment">// const newObj = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// newObj.__proto__ = fun.prototype</span></span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fun.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> argsArr = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将构造函数 this 指向 newObj，并执行构造函数</span></span><br><span class="line">  <span class="keyword">const</span> result = fun.<span class="title function_">apply</span>(newObj, argsArr)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果构造函数本身有返回值，且返回值为对象时，会将本身返回值返回，如果返回值为简单类型，会忽略</span></span><br><span class="line">  <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> &amp;&amp; result !== <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> isFunction = <span class="keyword">typeof</span> result === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (isObject || isFunction) &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回新对象</span></span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stu = <span class="title function_">NEW</span>(<span class="title class_">Student</span>, <span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu) <span class="comment">// Student &#123;name: &#x27;ls&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>手写 —— 数组去重</title>
    <url>/2045.html</url>
    <content><![CDATA[<ul>
<li>新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf 为-1 或 includes 为false）就加入该新数组中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数组下标判断：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="title function_">indexOf</span>(arr[i]) === i) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">v, i, array</span>) =&gt;</span> array.<span class="title function_">indexOf</span>(v) === i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>hash去重</li>
</ul>
<p>虽然对象属性同样可以用来做数组去重，但是会将 number,NaN,undefined,null，变为字符串形式，因为对象的属性名就是一个字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Deduplication</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = []</span><br><span class="line">  <span class="keyword">var</span> hashMap = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i]</span><br><span class="line">    <span class="keyword">if</span> (!hashMap[temp]) &#123;</span><br><span class="line">      hashMap[temp] = <span class="literal">true</span></span><br><span class="line">      result.<span class="title function_">push</span>(temp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Deduplication</span>([[<span class="literal">undefined</span>, <span class="string">&#x27;undefined&#x27;</span>]]) <span class="comment">// [undefined]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ES6 Set</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line">  <span class="keyword">return</span> [...x]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>对象数组去重</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arr: 目标数组</span></span><br><span class="line"><span class="comment">// id: 唯一属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">distinct</span>(<span class="params">arr, id</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">get</span>(item[id])) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    map.<span class="title function_">set</span>(item[id], <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>手写 —— 深浅拷贝</title>
    <url>/2043.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9sb2Rhc2guY29tL2RvY3MvNC4xNy4xNSNjbG9uZURlZXA=">lodash 插件 cloneDeep</span></p>
<h3 id="浅拷贝："><a href="#浅拷贝：" class="headerlink" title="浅拷贝："></a><strong>浅拷贝</strong>：</h3><p>数组：slice()&#x2F;concat()&#x2F;Array.from()&#x2F;扩展运算符<br>对象：Object.assign()&#x2F;扩展运算符</p>
<h3 id="深拷贝："><a href="#深拷贝：" class="headerlink" title="深拷贝："></a><strong>深拷贝</strong>：</h3><ul>
<li>通过 JSON.parse(JSON.stringify(obj))</li>
</ul>
<p><strong>这种方法只能复制 JSON 格式支持的属性名和值，不支持的属性名和值会直接忽略：会忽略 undefined、symbol，不能序列化函数，不能解决循环引用的对象</strong> <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9zdHJpbmdpZnk=">参考MDN</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>)]: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">c</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">  <span class="attr">e</span>: <span class="title class_">NaN</span>,</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// 返回 &#123;d: null, e: null&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实现简单深拷贝</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(source)) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [index, value] <span class="keyword">of</span> source.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">      target[index] = <span class="title function_">deepCopy</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简化 =&gt; return source.map(elem =&gt; deepCopy(elem))</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&#x27;object&#x27;</span> &amp;&amp; source !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(source)) &#123;</span><br><span class="line">      target[key] = <span class="title function_">deepCopy</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简化 =&gt;  return Object.fromEntries(Object.entries(source).map(([key, val]) =&gt; [key, deepCopy(val)]))</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 基础类型无需拷贝</span></span><br><span class="line">    <span class="keyword">return</span> source</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Object.fromEntries()</code> 方法把键值对列表转换为一个对象，是 <code>Object.entries</code> 的反转</p>
<p><strong>循环引用(环)</strong></p>
<p>解决思路: 通过一个WeakMap来存储拷贝过的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hash = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">if</span> (hash.<span class="title function_">has</span>(source)) &#123;</span><br><span class="line">  <span class="keyword">return</span> hash.<span class="title function_">get</span>(source)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash.<span class="title function_">set</span>(source, target)</span><br></pre></td></tr></table></figure>

<p><strong>特殊对象的拷贝</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拷贝 Function</span></span><br><span class="line">target = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">`return <span class="subst">$&#123;source.toString()&#125;</span>`</span>)()</span><br><span class="line"><span class="comment">// 拷贝 Date</span></span><br><span class="line">target = <span class="keyword">new</span> <span class="title class_">Date</span>(source.<span class="title function_">getTime</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝 RegExp</span></span><br><span class="line">target = <span class="keyword">new</span> <span class="title class_">RegExp</span>(source)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>手写 —— 防抖和节流</title>
    <url>/398.html</url>
    <content><![CDATA[<blockquote>
<p>防抖和节流都是为了解决<strong>短时间内大量触发某函数</strong>而导致的<strong>性能问题，</strong>比如触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象</p>
</blockquote>
<h2 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h2><p>在事件被触发 n 秒后再执行回调函数，如果在这 n 秒内又被触发，则重新计时（短时间内连续触发的事件 只有效执行一次）</p>
<p>应用场景</p>
<ul>
<li><p>用户在输入框中连续输入一串字符后，只会在输入完后去执行最后一次的查询请求，这样可以有效减少请求次数，节约请求资源</p>
</li>
<li><p>window 的 resize、scroll 事件，不断地调整浏览器的窗口大小、或者滚动时会触发对应事件，防抖让其只触发一次</p>
</li>
</ul>
<h2 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h2><p>规定一个单位时间 n，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内事件被触发多次，只有一次能生效（每 n 秒触发一次）</p>
<p>应用场景</p>
<ul>
<li><p>鼠标连续不断地触发某事件（如点击），n 秒内只触发一次</p>
</li>
<li><p>监听滚动事件，比如是否滑到底部自动加载更多</p>
</li>
</ul>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>防抖的作用是将多个连续的<code>debounced</code>调用合并为一次<code>callback</code>调用。防抖是基于最近次 <code>debounced</code> 调用来重置 <code>waitTime</code>，如果<code>debounced</code>事件触发间隔小于 <code>waitTime</code>，<code>callback</code>就不会执行；</p>
<p>节流的作用是限制<code>callback</code>调用的频率（每<code>waitTime</code>调用一次）。是基于上次 <code>callback</code> 调用来计算 <code>waitTime</code> 的，不管<code>callback</code> 事件触发有多频繁，只要距离上次 <code>callback</code> 调用超过了 <code>waitTime</code>，就一定会进行下次 <code>callback</code> 调用。</p>
<p>– 原理：</p>
<p>防抖是 <code>debounced</code> 维护了一个计时器，规定在 <code>waitTime</code> 时间后触发 <code>callback</code>，但是在 <code>waitTime</code> 时间内再次触发 <code>debounced</code> 的话，会清除当前的 timer 然后重新计时，这样一来，只有最后一次<code>debounced</code> 操作才能触发 <code>callback</code>；</p>
<p>节流是通过判断是否到达一定时间 (<code>waitTime</code>) 来再次触发 <code>callback</code> ， <code>func</code> 在 <code>waitTime</code> 时间内不能被再次触发。</p>
<p>实现</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGhyb3R0bGUtZGVib3VuY2U=">throttle-debounce 插件</span></p>
<p>简单实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">delay, func</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> arg = <span class="variable language_">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, arg)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">delay, func</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>神奇的js</title>
    <url>/2009.html</url>
    <content><![CDATA[<h2 id="取整-不四舍五入"><a href="#取整-不四舍五入" class="headerlink" title="取整(不四舍五入)"></a>取整(不四舍五入)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~~<span class="number">2.33</span> === <span class="number">2</span></span><br><span class="line"><span class="number">2.33</span> | <span class="number">0</span> === <span class="number">2</span></span><br><span class="line"><span class="number">2.33</span> &gt;&gt; <span class="number">0</span> === <span class="number">2</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">2.33</span>)</span><br></pre></td></tr></table></figure>

<h2 id="浮点数精度丢失问题"><a href="#浮点数精度丢失问题" class="headerlink" title="浮点数精度丢失问题"></a>浮点数精度丢失问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在进行浮点数运算的时候，可能会出现精度丢失的问题</span></span><br><span class="line"><span class="comment">// 尽量少用浮点数进行运算，不要让浮点数进行比较</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> = <span class="number">0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法 : 根据小数点后面的位数量 乘以对应的整数</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>  ==&gt; (<span class="number">0.1</span>*<span class="number">10</span>+<span class="number">0.2</span>*<span class="number">10</span>) / <span class="number">10</span> = <span class="number">0.3</span></span><br></pre></td></tr></table></figure>

<h2 id="js-中的隐式转换"><a href="#js-中的隐式转换" class="headerlink" title="js 中的隐式转换"></a>js 中的隐式转换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(!(~+[])+&#123;&#125;)[--[~+<span class="string">&quot;&quot;</span>][+[]]*[~+[]] + ~~!+[]]+(&#123;&#125;+[])[[~!+[]]*~+[]] === <span class="string">&#x27;sb&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>icon 图标在 vue 项目中的使用</title>
    <url>/2011.html</url>
    <content><![CDATA[<p>参考链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWJiODY0YjUxODgyNTdlN2E0MjdjMDk=">https://juejin.im/post/59bb864b5188257e7a427c09</span></p>
<h3 id="使用-iconfont"><a href="#使用-iconfont" class="headerlink" title="使用 iconfont"></a>使用 iconfont</h3><p>阿里开源图库 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24v">https://www.iconfont.cn/</span></p>
<p>使用方法 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24vaGVscC9kZXRhaWw/c3BtPWEzMTN4Ljc3ODEwNjkuMTk5ODkxMDQxOS5kOGQxMWEzOTEmaGVscHR5cGU9Y29kZQ==">https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&amp;helptype=code</span></p>
<p>下载代码到本地（也可以使用在线链接）打开 demo_index.html 使用说明，有三种使用方式 unicode font-class symbol<br>unicode 方式： <span class="iconfont">&amp;#x33;</span> 这样，不直观，语意不明确，不支持多色图标<br>font-class 方式： <span class="iconfont icon-xxx"></span> 使用 class 定义，有语意，需要注意命名空间的问题，也是不支持多色图标<br>symbol 方式：使用 svg 不用再去请求 woff|eot|ttf| 这些字体库，且缩放不会失真，支持更加复杂的图标</p>
<p>symbol 方式使用步骤：</p>
<p>第一步：引入项目下面生成的 symbol 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./iconfont.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或通过 import 导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./iconfont.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>第二步：加入通用 CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：挑选相应图标并获取类名，应用于页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>symbol 其实使用了 SVG Sprite 技术， 所有的 svg-sprite 都是通过 iconfont 的 iconfont.js 生成的，所以：</p>
<p>所有图标 icon 都很不直观，完全不知道哪个图标名对应什么图标，每次增删改图标，或者添加一些自定义的 svg 图标，只能将其也上传到 iconfont 和原有的图标放在一个项目库中，之后再重新下载，将整体 js 文件一起替换，而且也做不到按需加载</p>
<p>导出的 svg 包含大量的无用信息，例如编辑器源信息、注释等。通常包含其它一些不会影响渲染结果或可以移除的内容</p>
<h3 id="vue-cli3-项目使用-svg-sprite-loader-打包-svg"><a href="#vue-cli3-项目使用-svg-sprite-loader-打包-svg" class="headerlink" title="vue cli3 项目使用 svg-sprite-loader 打包 svg"></a>vue cli3 项目使用 svg-sprite-loader 打包 svg</h3><p>vue cli3 默认使用 file-loader 处理 svg：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* config.module.rule(&#x27;svg&#x27;) */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(svg)(\?.*)?$/</span>,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    <span class="comment">/* config.module.rule(&#x27;svg&#x27;).use(&#x27;file-loader&#x27;) */</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;static/img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并路径指定为在 img 文件夹下，但我们的 svg 并不在 img 文件夹，而且 svg-sprite-loader 已经自带了 file-loader 的功能，所以，我们可以在我们自定义的 vue.config.js 文件下将 rule(svg) 清除：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">module</span>.<span class="title function_">rule</span>(<span class="string">&#x27;svg&#x27;</span>).<span class="property">uses</span>.<span class="title function_">clear</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者添加忽略，然后加上自定义的 svg rule，最后的配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用 svg-sprite-loader 处理 svg */</span></span><br><span class="line"><span class="comment">// 默认规则忽略 src/icons 文件夹</span></span><br><span class="line">config.<span class="property">module</span></span><br><span class="line">  .<span class="title function_">rule</span>(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">  .<span class="property">exclude</span>.<span class="title function_">add</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/icons&#x27;</span>))</span><br><span class="line">  .<span class="title function_">end</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/icons 文件夹下的 svg 使用 svg-sprite-loader</span></span><br><span class="line">config.<span class="property">module</span></span><br><span class="line">  .<span class="title function_">rule</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">  .<span class="property">include</span>.<span class="title function_">add</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/icons&#x27;</span>))</span><br><span class="line">  .<span class="title function_">end</span>()</span><br><span class="line">  .<span class="title function_">test</span>(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">  .<span class="title function_">use</span>(<span class="string">&#x27;svg-sprite&#x27;</span>)</span><br><span class="line">  .<span class="title function_">loader</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">  .<span class="title function_">options</span>(&#123;</span><br><span class="line">    <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure>

<p>之后可以通过如下方式使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/icons/qq.svg&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xlink:href=&quot;#icon-图标文件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-qq&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用缺点：需要手动导入图标</p>
<h3 id="自动导入"><a href="#自动导入" class="headerlink" title="自动导入"></a>自动导入</h3><p>使用 webpack 的 <span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvZGVwZW5kZW5jeS1tYW5hZ2VtZW50LyNyZXF1aXJlLWNvbnRleHQ=">require.context</span> api</p>
<p>require.context 语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">context</span>(directory, (useSubdirectories = <span class="literal">false</span>), (regExp = <span class="regexp">/^\.\//</span>))</span><br><span class="line"><span class="comment">// directory：说明需要检索的目录</span></span><br><span class="line"><span class="comment">// useSubdirectories：是否检索子目录</span></span><br><span class="line"><span class="comment">// regExp: 匹配文件的正则表达式</span></span><br><span class="line"><span class="comment">// Examples:</span></span><br><span class="line"><span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./test&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.test\.js$/</span>)</span><br><span class="line"><span class="comment">// 表示在 test 文件夹（不包含子目录）下面的找所有文件名以 .test.js 结尾的能被 require 的文件</span></span><br></pre></td></tr></table></figure>

<p>自动引入 @&#x2F;icons 下面所有的图标</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础组件的自动化全局注册</span></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;../../components&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// console.log(requireComponent.keys())</span></span><br><span class="line">requireComponent.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">filename</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> componentConfig = requireComponent(filename)</span><br><span class="line">  <span class="comment">// console.log(componentConfig)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> componentName = filename</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pop</span>()</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\.\w+$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">// console.log(componentName)</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(</span><br><span class="line">    componentName,</span><br><span class="line">    <span class="comment">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class="line">    <span class="comment">// 那么就会优先使用 `.default`，</span></span><br><span class="line">    <span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">    componentConfig.<span class="property">default</span> || componentConfig</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">requireAll</span> = requireContext =&gt; requireContext.<span class="title function_">keys</span>().<span class="title function_">map</span>(requireContext)</span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;@/icons&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">requireAll(req)</span><br></pre></td></tr></table></figure>

<p>之后直接将图标放入 <code>@/icons</code> 文件夹下就可以直接使用了，删改图标同理</p>
<h3 id="优化-svg"><a href="#优化-svg" class="headerlink" title="优化 svg"></a>优化 svg</h3><p>删除无用信息 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N2Zy9zdmdv">svgo</span><br>阿里云导出的 svg 是带有默认的 fill 的，导致图标不能继承父级元素的颜色,可以通过删除默认 fill 解决</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i svgo svgo-loader -D</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="property">module</span></span><br><span class="line">  .<span class="title function_">rule</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">  .<span class="property">include</span>.<span class="title function_">add</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/icons&#x27;</span>))</span><br><span class="line">  .<span class="title function_">use</span>(<span class="string">&#x27;svgo-loader&#x27;</span>)</span><br><span class="line">  .<span class="title function_">loader</span>(<span class="string">&#x27;svgo-loader&#x27;</span>)</span><br><span class="line">  .<span class="title function_">tap</span>(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">    options = &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        &#123; <span class="attr">removeXMLNS</span>: <span class="literal">true</span> &#125;, <span class="comment">// 删除xmlns属性（对于内联svg，默认情况下禁用）</span></span><br><span class="line">        &#123; <span class="attr">convertStyleToAttrs</span>: <span class="literal">true</span> &#125; <span class="comment">// 将css样式转换为svg元素属性</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> options</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>也可以在图标管理中 我的项目 批量操作 批量去色 将默认颜色去除， 之后可以通过 css 自定义颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">svg &#123;</span><br><span class="line">  fill: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-awesome-swiper 设置 loop：true不会自动滚动的问题</title>
    <url>/1002.html</url>
    <content><![CDATA[<p>vue-awesome-swiper: 基于 Swiper4、适用于 Vue 的轮播组件，支持服务端渲染和单页应用</p>
<p>github地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N1cm1vbi1jaGluYS92dWUtYXdlc29tZS1zd2lwZXI=">https://github.com/surmon-china/vue-awesome-swiper</span></p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuc3VybW9uLm1lL3Z1ZS1hd2Vzb21lLXN3aXBlci8=">https://github.surmon.me/vue-awesome-swiper/</span></p>
<p>问题：</p>
<p>设置loop：true， autoplay：2000 不会自动滚动</p>
<p>解决<br>在 swiper 上添加 <code>v-if=&quot;swiperSlides.length&gt;0&quot;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;swiper v-<span class="keyword">if</span>=<span class="string">&quot;swiperSlides.length&gt;0&quot;</span> :options=<span class="string">&quot;swiperOption&quot;</span> ref=<span class="string">&quot;mySwiper&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>vue 项目中使用 axios.all 处理并发请求报 &quot;TypeError: this.$axios.all is not a function&quot; 异常解决方法</title>
    <url>/384.html</url>
    <content><![CDATA[<p>axios&#x2F;index.js 部分配置如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios/index.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Axios</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<p>axios 实例没有 all 这个方法，all 是 axios 的静态方法</p>
<p>所以解决方式就是将该方法手动挂载到 Axios 实例上即可</p>
<p>在 <code>axios/index.js</code> 添加如下配置</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">// axios/index.js</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">const Axios = axios.create(&#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="addition">+ Axios.all = axios.all</span></span><br><span class="line"><span class="addition">+ Axios.spread = axios.spread</span></span><br></pre></td></tr></table></figure>


<p>附 axios 并发多个请求方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">request1</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request2</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">request1</span>(), <span class="title function_">request2</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">    <span class="comment">// acct、perms 分别为两个请求的结果</span></span><br><span class="line">  &#125;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 中 hock 的使用</title>
    <url>/2026.html</url>
    <content><![CDATA[<p>在 Vue 组件中，可以用过 <code>$on</code>, <code>$once</code> 去监听所有的生命周期钩子函数，如监听组件的 updated 钩子函数可以写成 this.$on(‘hook:updated’, () &#x3D;&gt; {})</p>
<h3 id="使用-once-‘hook-beforeDestory’-x3D-gt-清理定时器"><a href="#使用-once-‘hook-beforeDestory’-x3D-gt-清理定时器" class="headerlink" title="使用$.once(‘hook:beforeDestory’,() &#x3D;&gt; {})清理定时器"></a>使用$.once(‘hook:beforeDestory’,() &#x3D;&gt; {})清理定时器</h3><p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy1lZGdlLWNhc2VzLmh0bWwjJUU3JUE4JThCJUU1JUJBJThGJUU1JThDJTk2JUU3JTlBJTg0JUU0JUJBJThCJUU0JUJCJUI2JUU0JUJFJUE2JUU1JTkwJUFDJUU1JTk5JUE4">https://cn.vuejs.org/v2/guide/components-edge-cases.html#程序化的事件侦听器</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 直接在需要定时器的方法或者生命周期函数中声明并销毁</span></span><br><span class="line"><span class="variable language_">this</span>.$once(<span class="string">&#x27;hook:beforeDestory&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">  timer = <span class="literal">null</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="在父组件监听子组件的生命周期方法"><a href="#在父组件监听子组件的生命周期方法" class="headerlink" title="在父组件监听子组件的生命周期方法"></a>在父组件监听子组件的生命周期方法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">hook:mounted</span>=<span class="string">&quot;handleChildMounted&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>监听第三方组件数据的变化，但是组件又没有提供change事件，可以在外部监听组件的updated钩子函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">hook:updated</span>=<span class="string">&quot;handleChildUpdated&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础知识点复习</title>
    <url>/2046.html</url>
    <content><![CDATA[<h3 id="生命周期介绍"><a href="#生命周期介绍" class="headerlink" title="生命周期介绍"></a>生命周期介绍</h3><p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvYXBpLyMlRTklODAlODklRTklQTElQjktJUU3JTk0JTlGJUU1JTkxJUJEJUU1JTkxJUE4JUU2JTlDJTlGJUU5JTkyJUE5JUU1JUFEJTkw">vue 生命周期钩子函数</span></p>
<p>beforeCreate：在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用；此时组件的选项还未挂载，因此无法访问 methods，data，computed 上的方法或数据；使用场景 : 几乎不用</p>
<p>created：在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch&#x2F;event 事件回调。然而，挂载阶段还没开始，<code>$el</code> 属性目前不可见；可以调用 methods 中的方法、改变 data 中的数据、获取 computed 中的计算属性等；使用场景：发送 ajax、本地存储获取数据</p>
<p>beforeMounted()：在挂载开始之前被调用（挂载：DOM 渲染）</p>
<p>mounted()：这个周期可以获取 DOM；指令的生效在 mounted 周期之前；在这个周期内，对 data 的改变可以生效。但是要进下一轮的 DOM 更新；使用场景：发送 ajax、操作 DOM</p>
<p>beforeUpdate()：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程；此处获取的数据是更新后的数据，但是获取页面中的 DOM 元素是更新之前的</p>
<p>updated()：由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子；组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作</p>
<p>beforeDestroy()：实例销毁之前调用。在这一步，实例仍然完全可用；使用场景：实例销毁之前，执行清理任务，比如清除定时器等</p>
<p>destroyed()：Vue 实例销毁后调用。调用后，Vue 实例的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</p>
<p><strong>组件生命周期调用顺序</strong></p>
<p>组件的调用顺序都是先父后子,渲染完成的顺序是先子后父。<br>组件的销毁操作是先父后子，销毁完成的顺序是先子后父。</p>
<p>加载渲染过程<br>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount- &gt;子mounted-&gt;父mounted</p>
<p>子组件更新过程<br>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p>
<p>父组件更新过程<br>父 beforeUpdate -&gt; 父 updated</p>
<p>销毁过程<br>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p>
<h3 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h3><p>父组件到子组件：通过绑定属性传递给子组件</p>
<p>子组件到父组件：自定义事件，父组件给子组件传递一个函数，由子组件调用（$emit()）这个函数</p>
<p>非父子组件通讯</p>
<ul>
<li><p>是通过 <code>事件总线 (event bus 公交车) 机制</code> 来实现的</p>
</li>
<li><p>事件总线：实际上就是一个 <code>空 Vue 实例</code></p>
</li>
<li><p>可以实现任意两个组件之间的通讯而不管两个组件到底有什么样的层级关系</p>
</li>
<li><p><code>$emit()</code>：发送数据</p>
</li>
<li><p><code>$on()</code>：接收数据</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化事件总线 bus</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件 B 创建的钩子中监听事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;id&#x27;</span>, <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvZm9ybXMuaHRtbA==">https://cn.vuejs.org/v2/guide/forms.html</span><br><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy1jdXN0b20tZXZlbnRzLmh0bWwjJUU4JTg3JUFBJUU1JUFFJTlBJUU0JUI5JTg5JUU3JUJCJTg0JUU0JUJCJUI2JUU3JTlBJTg0LXYtbW9kZWw=">https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model</span></p>
<p>vue 数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。其实主要是用了 Es5 中的 <code>Object.defineProperty</code> 来劫持每个属性的 getter 和 setter。这也正是 Vue 不兼容 IE8 以下的原因。</p>
<p>v-model 原理（语法糖）：v-model是 :value&#x3D;”msg” @input&#x3D;”msg&#x3D;$event.target.value” 的语法糖</p>
<p><code>Object.defineProperty</code> 不可以用来监听数组</p>
<p>vue 是通过重写数组的方法（变异方法）实现对数组的监听</p>
<h3 id="key属性作用"><a href="#key属性作用" class="headerlink" title="key属性作用"></a>key属性作用</h3><p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvYXBpLyNrZXk=">https://cn.vuejs.org/v2/api/#key</span><br><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvbGlzdC5odG1sIyVFNyVCQiVCNCVFNiU4QSVBNCVFNyU4QSVCNiVFNiU4MCU4MQ==">https://cn.vuejs.org/v2/guide/list.html#维护状态</span></p>
<p>当 Vue.js 用<code>v-for</code>正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。</p>
<p>没有<code>key</code>属性，Vue 无法跟踪每个节点</p>
<h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sIyVFNSVCQyU4MiVFNiVBRCVBNSVFNiU5QiVCNCVFNiU5NiVCMCVFOSU5OCU5RiVFNSU4OCU5Nw==">https://cn.vuejs.org/v2/guide/reactivity.html#异步更新队列</span></p>
<h3 id="vdom"><a href="#vdom" class="headerlink" title="vdom"></a>vdom</h3><p>用js对象描述真实dom结构</p>
<ol>
<li>数据更新需要手动更新DOM，且DOM API细节比较多，操作复杂，容易出错且代码难以维护</li>
<li>直接DOM对比的话，dom的查找和创建等操作是很耗费资源的，且dom的大部分属性对于diff操作是没有意义的</li>
</ol>
<p>引入 Virtual DOM 在性能方面的考量仅仅是一方面。更重要的原因是为了解耦 HTML 依赖<br>将 Virtual DOM作为一个兼容层，让我们还能对接非 Web 端的系统，实现跨端开发。<br>同样的，通过 Virtual DOM我们可以渲染到其他的平台，比如实现 SSR、同构渲染等等。<br>实现组件的高度抽象化</p>
<h3 id="native修饰符"><a href="#native修饰符" class="headerlink" title="native修饰符"></a>native修饰符</h3><p>在组件的根元素上监听一个原生事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component v-on:click.native=&quot;doTheThing&quot;&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure>

<p>可以理解为该修饰符的作用就是把一个vue组件转化为一个普通的HTML标签，并且该修饰符对普通HTML标签是没有任何作用的。</p>
<p>为什么vue组件要设计一个native修饰符</p>
<p>DOM本身具有事件属性，所以原生元素(div, button 等)的所有事件都是DOM事件<br>vue组件有自己的自定义事件系统，你在component组件上定义事件，vue必须要知道是那种类型的事件好进入相应的处理逻辑，.native 就是区分的标识。</p>
<h2 id="set原理"><a href="#set原理" class="headerlink" title="$set原理"></a>$set原理</h2><p>如果在实例创建之后添加新的属性到实例上，它不会触发视图更新</p>
<p>Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它</p>
<p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性，可以使用 <code>Vue.set(object, key, value)</code> 方法将响应属性添加到嵌套的对象上，或者创建一个包含原对象属性和新属性的对象替换掉原对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">set</span> (target, key, val) &#123;</span><br><span class="line">  <span class="comment">// 如果 set 函数的第一个参数是 undefined 或 null 或者是原始类型值，那么在非生产环境下会打印警告信息</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; (<span class="title function_">isUndef</span>(target) || <span class="title function_">isPrimitive</span>(target)) ) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">`Cannot set reactive property on undefined, null, or primitive value: <span class="subst">$&#123;target&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// target为数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) &amp;&amp; <span class="title function_">isValidArrayIndex</span>(key)) &#123;</span><br><span class="line">    <span class="comment">// 修改数组的长度, 避免索引&gt;数组长度导致splcie()执行有误</span></span><br><span class="line">    target.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(target.<span class="property">length</span>, key)</span><br><span class="line">    <span class="comment">// 利用数组的splice变异方法触发响应式</span></span><br><span class="line">    target.<span class="title function_">splice</span>(key, <span class="number">1</span>, val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// target为对象, key在target或者target.prototype上</span></span><br><span class="line">  <span class="comment">// 同时必须不能在 Object.prototype 上</span></span><br><span class="line">  <span class="comment">// 直接修改即可, 有兴趣可以看issue: https://github.com/vuejs/vue/issues/6845</span></span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 以上都不成立, 即开始给target创建一个全新的属性</span></span><br><span class="line">  <span class="comment">// 获取Observer实例</span></span><br><span class="line">  <span class="keyword">const</span> ob = target.<span class="property">__ob__</span></span><br><span class="line">  <span class="comment">// Vue 实例对象拥有 _isVue 属性, 即不允许给Vue 实例对象添加属性</span></span><br><span class="line">  <span class="comment">// 也不允许Vue.set/$set 函数为根数据对象(vm.$data)添加属性</span></span><br><span class="line">  <span class="keyword">if</span> (target.<span class="property">_isVue</span> || (ob &amp;&amp; ob.<span class="property">vmCount</span>)) &#123;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">&#x27;Avoid adding reactive properties to a Vue instance or its root $data &#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;at runtime - declare it upfront in the data option.&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target本身就不是响应式数据, 直接赋值</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 进行响应式处理</span></span><br><span class="line">  <span class="title function_">defineReactive</span>(ob.<span class="property">value</span>, key, val)</span><br><span class="line">  ob.<span class="property">dep</span>.<span class="title function_">notify</span>()</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="scoped原理"><a href="#scoped原理" class="headerlink" title="scoped原理"></a>scoped原理</h2><p><code>&lt;style scoped&gt;&lt;/style&gt;</code></p>
<p>Vue的作用域样式实现思路如下：1. 加了scoped，PostCSS给一个组件中的所有dom添加了一个独一无二的动态属性，<code>&lt;div data-v-实例标识 &gt;</code>；2. 然后给CSS选择器的最后一个选择器单元增加了属性选择器，假设原选择器为 <code>.page .title</code>，则更改后的选择器为 <code>.page .title[data-v-实例标识]</code>。这种做法使得样式只作用于当前组件内部dom，可以使得组件之间的样式不互相污染。</p>
<p>如果这时候需要改子组件的样式，但是又不影响其他页面使用这个子组件的样式的时候，我们可以使用深度作用选择器 <code>&gt;&gt;&gt;、/deep/、::v-deep</code></p>
<p>使用深度作用选择器后， postcss会在每一个深度作用选择器前面的一个选择器单元增加一个属性选择器[data-v-实例标识]，假设原选择器为 <code>.page /deep/.title</code>，则更改后的选择器为 <code>.page[data-v-实例标识] .title</code></p>
<h2 id="vue中ref"><a href="#vue中ref" class="headerlink" title="vue中ref"></a>vue中ref</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvYXBpLyNyZWY=">https://cn.vuejs.org/v2/api/#ref</span></p>
<p>给元素或子组件注册引用信息，引用信息将会注册在父组件的 <code>$refs</code>对象上；<br>如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</p>
<h2 id="Vue中-sync和v-model的区别"><a href="#Vue中-sync和v-model的区别" class="headerlink" title="Vue中.sync和v-model的区别"></a>Vue中.sync和v-model的区别</h2><ol>
<li>v-model: @input + value</li>
<li>:val.sync: @update:val</li>
<li>v-model只能用一次；.sync可以有多个</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>在vue的template中如何使用scss变量</title>
    <url>/2000.html</url>
    <content><![CDATA[<p>在 scss 中使用 <code>:export</code> 暴露变量</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#009A61</span>;</span><br><span class="line"><span class="comment">//暴露css</span></span><br><span class="line">:export &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>script</code> 中引入变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> variables <span class="keyword">from</span> <span class="string">&#x27;@/assets/styles/variables.scss&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>computed</code> 中缓存暴露变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">variables</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> variables</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>使用 axios 导致 cookie 丢失问题</title>
    <url>/402.html</url>
    <content><![CDATA[<p>问题：使用 axios 发送请求会拦截响应头中的 set-cookie，导致 cookie 丢失</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy85NTM=">https://github.com/axios/axios/issues/953</span></p>
<p>在控制台中也找不到 cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">headers</span>[<span class="string">&#x27;set-cookie&#x27;</span>]) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>) <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决方式：修改 axios 配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span> <span class="comment">// 默认是 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Axios.interceptors.request.use(</span></span><br><span class="line"><span class="comment">//   config =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     config.withCredentials = true // 添加</span></span><br><span class="line"><span class="comment">//     return config</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span> <span class="comment">// 表示跨域请求时是否需要使用凭证 默认 false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>设置 <code>withCredentials = true</code> 会造成跨域，需要使用代理解决跨域问题</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>axios 取消请求</title>
    <url>/430.html</url>
    <content><![CDATA[<p>原生 js abort() 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> A = $.<span class="title function_">ajax</span>(&#123;&#125;)</span><br><span class="line">A.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure>

<p>Axios 提供了一个 CancelToken 的函数，这是一个构造函数，该函数的作用就是用来取消接口请求的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  getMsg () &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">        that.<span class="property">cancel</span> = c</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">        <span class="comment">// 这个参数 c 就是 CancelToken 构造函数里面自带的取消请求的函数，这里把该函数当参数用</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="attr">params</span>: &#123;&#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">items</span> = res.<span class="property">data</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  cancelGetMsg () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">cancel</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts 柱状图基本配置</title>
    <url>/1145.html</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">monthOptions</span>: &#123;</span><br><span class="line">  <span class="attr">color</span>: [<span class="string">&#x27;#FFD058&#x27;</span>], <span class="comment">// 设置柱的颜色 会被 series itemStyle color 覆盖</span></span><br><span class="line">  <span class="attr">xAxis</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&#x27;报备组数&#x27;</span>, <span class="string">&#x27;来访组数&#x27;</span>, <span class="string">&#x27;大定套数&#x27;</span>, <span class="string">&#x27;草签套数&#x27;</span>, <span class="string">&#x27;正签套数&#x27;</span>], <span class="comment">// x轴</span></span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">inside</span>: <span class="literal">false</span>, <span class="comment">// 在外部显示</span></span><br><span class="line">        <span class="attr">textStyle</span>: &#123; <span class="comment">// 设置样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;rgba(255,255,255,0.5)&#x27;</span>,</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">15</span>,</span><br><span class="line">          <span class="attr">fontFamily</span>: <span class="string">&#x27;PingFang-SC-Regular,PingFang-SC&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisTick</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;, <span class="comment">// x轴线上的分割点</span></span><br><span class="line">      <span class="attr">axisLine</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;<span class="comment">// x轴线</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">axisLine</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    <span class="attr">axisTick</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">      <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> &#125; <span class="comment">// 去掉y轴显示数字</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">splitLine</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125; <span class="comment">// 水平线</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">grid</span>: &#123; <span class="comment">// 间距</span></span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">    <span class="attr">right</span>: <span class="string">&#x27;10%&#x27;</span>,</span><br><span class="line">    <span class="attr">bottom</span>: <span class="string">&#x27;15%&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&#x27;15%&#x27;</span>,</span><br><span class="line">    <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123; <span class="comment">// 用于显示阴影</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;rgba(255,255,255,0.08)&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">barGap</span>: <span class="string">&#x27;-100%&#x27;</span>,</span><br><span class="line">      <span class="comment">// barCategoryGap: &#x27;25%&#x27;,</span></span><br><span class="line">      <span class="attr">barWidth</span>: <span class="string">&#x27;15%&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">      <span class="comment">// animation: false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="comment">// 正常数据</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">barWidth</span>: <span class="string">&#x27;15%&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [],</span><br><span class="line">      <span class="attr">itemStyle</span>: &#123; <span class="comment">// 上方显示数值</span></span><br><span class="line">        <span class="attr">normal</span>: &#123;</span><br><span class="line">          <span class="attr">label</span>: &#123;</span><br><span class="line">            <span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="title function_">formate</span>(val.<span class="property">value</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">// 开启显示</span></span><br><span class="line">            <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span>, <span class="comment">// 在上方显示</span></span><br><span class="line">            <span class="attr">textStyle</span>: &#123; <span class="comment">// 数值样式</span></span><br><span class="line">              <span class="attr">color</span>: <span class="string">&#x27;#FFD058&#x27;</span>,</span><br><span class="line">              <span class="attr">fontSize</span>: <span class="number">15</span>,</span><br><span class="line">              <span class="attr">fontFamily</span>: <span class="string">&#x27;PingFang-SC-Regular,PingFang-SC&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">animationDuration</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>将 html 内容转换成图片总结 html2canvas与dom-to-image</title>
    <url>/355.html</url>
    <content><![CDATA[<h3 id="html2canvas"><a href="#html2canvas" class="headerlink" title="html2canvas"></a>html2canvas</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2h0bWwyY2FudmFz">html2canvas</span></p>
<p>基本使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install html2canvas</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> <span class="string">&#x27;html2canvas&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="comment">// html2canvas(element, options)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">html2canvas</span>(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">canvas</span>) &#123;</span><br><span class="line">  <span class="comment">// document.body.appendChild(canvas)</span></span><br><span class="line">  <span class="keyword">let</span> dataURL = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>) <span class="comment">// dataURL 为 base64 图片</span></span><br><span class="line">  <span class="comment">// var img = new Image()</span></span><br><span class="line">  <span class="comment">// img.src = dataURL</span></span><br><span class="line">  <span class="comment">// document.body.appendChild(img)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>常用配置使用示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">dpi</span>: <span class="number">192</span>,</span><br><span class="line">  <span class="attr">scale</span>: <span class="number">2</span>, <span class="comment">// 放大</span></span><br><span class="line">  <span class="comment">// logging: true, //日志开关，便于查看html2canvas的内部执行流程</span></span><br><span class="line">  <span class="attr">useCORS</span>: <span class="literal">true</span> <span class="comment">// 开启跨域配置, (跨域图片，转换的时候会将跨域图片识别为空白,因此需要开启此选项)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">html2canvas</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>), options).<span class="title function_">then</span>(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(canvas)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>html2canvas 生成图片模糊问题</p>
<ol>
<li>html2canvas 第二个参数配置 <code>scale</code> 和 <code>dpi</code>, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2h0bWwyY2FudmFzL3B1bGwvMTA4Nw==">参考</span></li>
<li>如果要生成的 dom 中有背景图片，将背景图片换成 div 包裹 img 标签形式，不要通过css设置成background</li>
</ol>
<h3 id="dom-to-image"><a href="#dom-to-image" class="headerlink" title="dom-to-image"></a>dom-to-image</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RzYXllbi9kb20tdG8taW1hZ2U=">dom-to-image</span></p>
<p>基本使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install dom-to-image</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* in ES 6 */</span></span><br><span class="line"><span class="keyword">import</span> domtoimage <span class="keyword">from</span> <span class="string">&#x27;dom-to-image&#x27;</span></span><br><span class="line"><span class="comment">/* in ES 5 */</span></span><br><span class="line"><span class="keyword">var</span> domtoimage = <span class="built_in">require</span>(<span class="string">&#x27;dom-to-image&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-node&#x27;</span>)</span><br><span class="line"></span><br><span class="line">domtoimage</span><br><span class="line">  .<span class="title function_">toPng</span>(node)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">dataUrl</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    img.<span class="property">src</span> = dataUrl</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;oops, something went wrong!&#x27;</span>, error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>将 base64 转换成 file 对象用于上传到服务器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">b64ToFile</span>(<span class="params">dataurl</span>)  &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = dataurl.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> mime = arr[<span class="number">0</span>].<span class="title function_">match</span>(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> bstr = <span class="title function_">atob</span>(arr[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">let</span> n = bstr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(n)</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">      u8arr[n] = bstr.<span class="title function_">charCodeAt</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> file =  <span class="keyword">new</span> <span class="title class_">File</span>([u8arr], <span class="string">&#x27;filename.png&#x27;</span>, &#123;<span class="attr">type</span>:mime&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>js 图像处理库</title>
    <url>/1730.html</url>
    <content><![CDATA[<h3 id="merge-images-合并图像"><a href="#merge-images-合并图像" class="headerlink" title="merge-images 合并图像"></a>merge-images 合并图像</h3><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x1a2VjaGlsZHMvbWVyZ2UtaW1hZ2Vz">https://github.com/lukechilds/merge-images</span></p>
<h3 id="Cropper-js-图片裁剪工具"><a href="#Cropper-js-图片裁剪工具" class="headerlink" title="Cropper.js 图片裁剪工具"></a>Cropper.js 图片裁剪工具</h3><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zlbmd5dWFuY2hlbi9jcm9wcGVyanM=">https://github.com/fengyuanchen/cropperjs</span><br>示例地址：<span class="exturl" data-url="aHR0cHM6Ly9mZW5neXVhbmNoZW4uZ2l0aHViLmlvL2Nyb3BwZXJqcy8=">https://fengyuanchen.github.io/cropperjs/</span></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205245.png"></p>
<h3 id="grade-js-根据图片的两种主要颜色生成背景渐变"><a href="#grade-js-根据图片的两种主要颜色生成背景渐变" class="headerlink" title="grade.js 根据图片的两种主要颜色生成背景渐变"></a>grade.js 根据图片的两种主要颜色生成背景渐变</h3><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Jlbmhvd2RsZTg5L2dyYWRl">https://github.com/benhowdle89/grade</span><br>示例地址：<span class="exturl" data-url="aHR0cHM6Ly9iZW5ob3dkbGU4OS5naXRodWIuaW8vZ3JhZGUv">https://benhowdle89.github.io/grade/</span></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205301.png"></p>
<h3 id="Compressor-js-图像压缩"><a href="#Compressor-js-图像压缩" class="headerlink" title="Compressor.js 图像压缩"></a>Compressor.js 图像压缩</h3><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zlbmd5dWFuY2hlbi9jb21wcmVzc29yanM=">https://github.com/fengyuanchen/compressorjs</span><br>示例地址：<span class="exturl" data-url="aHR0cHM6Ly9mZW5neXVhbmNoZW4uZ2l0aHViLmlvL2NvbXByZXNzb3Jqcy8=">https://fengyuanchen.github.io/compressorjs/</span></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/cuilongjin/static@img/img/20210102205339.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>前端工具库</tag>
      </tags>
  </entry>
  <entry>
    <title>RoughJS -- JavaScript手绘风格的图形库</title>
    <url>/650.html</url>
    <content><![CDATA[<p>RoughJS是一个轻量级的JavaScript图形库（压缩后约9KB），可以让你在网页上绘制素描风格、手绘样式般的图形。RoughJS定义了绘制直线，曲线，圆弧，多边形，圆和椭圆的图元，同时它还支持绘制SVG路径。</p>
<p>Rough.js可同时用于<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc19BUEk=">Canvas</span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZH">SVG</span>。</p>
<p>网站地址：<span class="exturl" data-url="aHR0cHM6Ly9yb3VnaGpzLmNvbS8=">https://roughjs.com/</span></p>
<p>使用手册：<span class="exturl" data-url="aHR0cHM6Ly93d3cudHV0b3JpYWxkb2NzLmNvbS90dXRvcmlhbC9yb3VnaGpzL2dldC1zdGFydGVkLmh0bWw=">https://www.tutorialdocs.com/tutorial/roughjs/get-started.html</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端工具库</tag>
      </tags>
  </entry>
  <entry>
    <title>rrweb-io - 利用现代浏览器所提供的强大 API 录制并回放任意 Web 界面中的用户操作</title>
    <url>/1754.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jyd2ViLWlvL3Jyd2Vi">https://github.com/rrweb-io/rrweb</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端工具库</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 patch-package 来科学修改 node_modules 里的文件</title>
    <url>/2001.html</url>
    <content><![CDATA[<p>当我们使用npm包时，需要修改部分源码做自定义功能，但是直接修改node_modules里面的文件，重新安装包后做的修改就没有了。一般常用办法有两个：</p>
<ol>
<li>将代码下载到本地，修改后手动引入</li>
<li>fork别人的代码到自己仓库，修改后，从自己仓库安装</li>
</ol>
<p>但是这样做比较麻烦，而且更新不方便。我们可以使用 patch-package 来管理修改</p>
<p>以 hexo-theme-next 为例</p>
<ol>
<li><p>修改 node_modules 里面的代码</p>
</li>
<li><p>安装patch-package：<code>npm i patch-package --save-dev</code></p>
</li>
<li><p>执行命令：<code>npx patch-package hexo-theme-next</code></p>
</li>
</ol>
<p>第一次使用 patch-package 会在项目根目录生成 patches 文件夹，里面有修改过的文件 diff 记录</p>
<p>当这个包被重新安装后，可以使用如下方式让修改生效</p>
<p>方式一：执行命令：<code>git apply --ignore-whitespace patches/hexo-theme-next+8.0.1.patch</code></p>
<p>方式二：在 package.json，新增命令 postinstall:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">+  &quot;postinstall&quot;: &quot;patch-package&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行：<code>npm run postinstall</code></p>
<p>该命令也会在每次 npm install 时自动执行</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Babel 入门</title>
    <url>/2028.html</url>
    <content><![CDATA[<p>Babel与Polyfill的关系和区别<br>Babel 默认只转换新的 js 句法（syntax），而不转换新的 API，例如箭头函数等<br>Polyfill 用于实现浏览器并不支持的原生API的代码，如新增的方法等</p>
<p>Babel</p>
<p>Babel的安装，配置</p>
<p>创建 <code>babel.config.js</code> 文件，内容如下</p>
<blockquote>
<p>babel.config.js 是Babel执行时会默认在当前目录寻找的Babel配置文件，除了babel.config.js，我们也可以选择用.babelrc或.babelrc.js这两种配置文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@babel/env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装如下包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/cli @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>

<ul>
<li>@babel&#x2F;cli是Babel命令行转码工具，如果我们使用命令行进行Babel转码就需要安装它。</li>
<li>@babel&#x2F;cli依赖@babel&#x2F;core，因此也需要安装@babel&#x2F;core这个Babel核心npm包。</li>
<li>@babel&#x2F;preset-env这个npm包提供了ES6转换ES5的语法转换规则，我们在Babel配置文件里指定使用它。如果不使用的话，也可以完成转码，但转码后的代码仍然是ES6的，相当于没有转码。</li>
</ul>
<p>创建 <code>index.js</code> 文件，如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">num</span>) =&gt; num + <span class="number">1</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel index.js -o output.js</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>可以看到，ES6的箭头函数语法转换成了 ES5 的函数定义语法，但是并没有对ES6的Promise进行转换。因为Babel默认只转换新的 js 语法（箭头函数，解构…），而不转换新的 API。新的API分类两类，一类是Promise、Map、Symbol、Proxy、Iterator等全局对象及其对象自身的方法，例如Object.assign，Promise.resolve；另一类是新的实例方法，例如数组实例方法[1, 2, 3].find((item) &#x3D;&gt; item &lt; 2)</p>
<p>polyfill</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure>

<p>在 index.js 中引入 <code>import &#39;@babel/polyfill&#39;</code></p>
<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel index.js -o output.js</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;@babel/polyfill&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>输出结果中 <code>require(&quot;@babel/polyfill&quot;);</code></p>
<p>import被编译成了require，如果想要编译出来的模块引入规范还是import，则可以在preset-env的配置项中添加”modules”: false即可</p>
<p>有时候我们项目里并没有用到那么多的新增API，但是 @babel&#x2F;polyfill 会把所有浏览器环境的的polyfill都引入，整个包的体积就会很大，我们想要对目标环境按需引入相应的polyfill应该怎么办呢，这个时候我们就可以使用 preset-env 的配置项中的 useBuiltIns 属性来按需引入 polyfill。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span>, <span class="comment">// 用来设置是否把ES6的模块化语法改成其它模块化语法</span></span><br><span class="line">        <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用useBuiltIns:”usage”后，Babel除了会考虑目标环境缺失的API模块，同时考虑我们项目代码里使用到的ES6特性，且不需要在项目入口处手动引入polyfill</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/modules/es6.object.to-string.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/modules/es6.promise.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>可以看到 多了 <code>import &quot;core-js/...</code> 的引用，因为 @babel&#x2F;polyfil 是由core-js2和regenerator-runtime组成的一个集成包，<br>Babel 7.4.0 之后已经弃用了 @babel&#x2F;polyfill，所以core-js官方现在推荐我们使用polyfill的时候直接引入core-js和regenerator-runtime&#x2F;runtime这两个包完全取代 @babel&#x2F;polyfil</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMjYmFiZWxwb2x5ZmlsbA==">core-js</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFiZWxqcy5jbi9kb2NzL2JhYmVsLXBvbHlmaWxs">babel-polyfill</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Babel</tag>
        <tag>Polyfill</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack</title>
    <url>/429.html</url>
    <content><![CDATA[<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy8=">webpack 官网</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcv">webpack 中文网</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1aWxvbmdqaW4vd2VicGFjay1jb25maWcv">webpack 配置文件</span></li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>webpack 是一个现代 JavaScript 应用程序的模块打包器（module bundler）</p>
<p>webpack 是一个模块化方案（预编译）</p>
<p>webpack 获取具有依赖关系的模块，并生成表示这些模块的静态资源</p>
<p>webpack 的两个特点：模块化、打包</p>
<p>四个核心概念：<strong>入口(entry)<strong>、</strong>输出(output)<strong>、</strong>加载器(loader)<strong>、</strong>插件(plugins)</strong></p>
<p>模块化方案：webpack 和 requirejs（通过编写代码的方式将前端的功能，划分成独立的模块）<br>browserify 是与 webpack 相似的模块化打包工具</p>
<h3 id="webpack-起源"><a href="#webpack-起源" class="headerlink" title="webpack 起源"></a>webpack 起源</h3><ul>
<li>webpack 解决了现存模块打包器的两个痛点：<ul>
<li>Code Spliting - 代码分离</li>
<li>静态资源的模块化处理方案</li>
</ul>
</li>
</ul>
<h3 id="webpack-与模块"><a href="#webpack-与模块" class="headerlink" title="webpack 与模块"></a>webpack 与模块</h3><ul>
<li><p><span class="exturl" data-url="aHR0cDovL3poYW9kYS5uZXQvd2VicGFjay1oYW5kYm9vay9tb2R1bGUtc3lzdGVtLmh0bWw=">前端模块系统的演进</span></p>
</li>
<li><p>在 webpack 看来：所有的<strong>静态资源都是模块</strong></p>
</li>
<li><p>webpack 模块能够识别以下等形式的模块之间的依赖：</p>
<ul>
<li><p>ES2015 <code>import</code> <code>export</code></p>
</li>
<li><p>CommonJS <code>require()</code> <code>module.exports</code></p>
</li>
<li><p>AMD <code>define</code> 和 <code>require</code></p>
</li>
<li><p>css&#x2F;sass&#x2F;less 文件中的 <code>@import</code></p>
</li>
<li><p>图片连接，比如：样式 <code>url(...)</code> 或 HTML <code>&lt;img src=...&gt;</code></p>
</li>
<li><p>字体等</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>在 webpack 提供的模块化环境中<ul>
<li>想要加载一个 JS 文件，只需要 require(‘a.js’)</li>
<li>想要加载一个 CSS 文件，只需要 require(‘css&#x2F;index.css’)</li>
<li>想要加载一个图片文件，只需要 require(‘images&#x2F;a.png’)</li>
</ul>
</li>
</ul>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzQyZTExNTE1YzEwZiM=">入门 Webpack，看这篇就够了</span></li>
</ul>
<h3 id="webpack-打包原理："><a href="#webpack-打包原理：" class="headerlink" title="webpack 打包原理："></a>webpack 打包原理：</h3><p>​ 入口文件： main.js</p>
<p>​ webpack 从入口出发，递归分析项目中所有的依赖项（模块），使用 loader 来处理对应的模块最终，打包生成一个 bundle.js 文件。</p>
<p>​ 如果配置了 webpack 中的 代码分离（Code Spliting），webpack 会根据 分离点 将这个模块生成一个独立的 JS 文件</p>
<p>​ 还可以通过配置，将 CSS 、 图片、 字体 等文件，从 bundle.js 中抽离为独立的文件</p>
<h2 id="webpack-的基本使用"><a href="#webpack-的基本使用" class="headerlink" title="webpack 的基本使用"></a>webpack 的基本使用</h2><p>安装：<code>npm i -D webpack webpack-cli</code></p>
<p>webpack：是 webpack 工具的核心包</p>
<p>webpack-cli：提供了一些在终端中使用的命令</p>
<p>-D(–save-dev)：表示项目开发期间的依赖</p>
<p>webpack 的两种使用方式：命令行、配置文件（<code>webpack.config.js</code>）</p>
<h3 id="命令行使用说明"><a href="#命令行使用说明" class="headerlink" title="命令行使用说明"></a>命令行使用说明</h3><ul>
<li><code>package.json</code>中的<code>scripts</code>中可以存放一些 bash 命令，这些 bash 命令可以通过 <code>npm run 命令名称</code> 来执行</li>
<li>注意：npm 在执行 scripts 中的命令的时候，是在电脑系统后台默认开启一个 bash，将当前目录下的<code>./node_modules/.bin</code>这个文件夹临时加入了系统环境变量</li>
<li>使用方式：<code>npm run build</code></li>
<li>设置开发状态： <code>mode</code> 如果没有设置 mode 配置项，webpack 会默认提供开发环境(production)</li>
<li>在入口文件中可以使用 <code>import</code> 引入 js css less 等文件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// webpack 是 webpack-cli 提供的命令</span></span><br><span class="line">  <span class="comment">// src/js/main.js 为入口文件</span></span><br><span class="line">  <span class="comment">// --output dist/bundle.js 为出口文件</span></span><br><span class="line">  <span class="comment">// --mode development 生产环境</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  <span class="attr">&quot;build1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack src/js/main.js --output dist/bundle.js --mode development&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件方式（推荐）"><a href="#配置文件方式（推荐）" class="headerlink" title="配置文件方式（推荐）"></a>配置文件方式（推荐）</h3><p>项目<code>根目录</code>下创建一个 <code>webpack.config.js</code>文件，运行 <code>webpack</code> 命令时的默认配置文件</p>
<p>指定其他文件：<code>--config webpack.XX.js</code></p>
<p>配置 <code>package.json</code> 中的 <code>scripts</code> , 脚本命令为： <code>&quot;build&quot;: &quot;webpack&quot;</code></p>
<p>执行命令 : <code>npm run build</code></p>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack 是基于 node的 , 所以配置文件符合 node 方式书写配置</span></span><br><span class="line"><span class="comment">// 注意 : 不要再这个文件中使用ES6的的模块化 import语法</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./src/js/main.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 出口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 出口目录</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>安装：<code>npm i -D webpack-dev-server</code></p>
<p>作用：配合 webpack，创建开发环境（启动服务器、监视文件变化、自动编译、刷新浏览器等），提高开发效率</p>
<p>注意：无法直接在终端中执行 <code>webpack-dev-server</code>，需要在 <code>package.json</code> 配置 <code>scripts</code> 后使用</p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul>
<li><code>webpack-dev-server</code>将打包好的文件存储在内存中，提高编译和加载速度，效率更高（不会生成 dist 目录）</li>
<li>在内存中出口目录为项目根目录（命令行中的提示：<code>webpack output is served from /</code>）<ul>
<li>在<code>index.html</code>页面中引入文件不需要加<code>dist</code></li>
</ul>
</li>
</ul>
<h3 id="CLI-配置"><a href="#CLI-配置" class="headerlink" title="CLI 配置"></a>CLI 配置</h3><ul>
<li><code>--contentBase</code> ：告诉服务器在哪个目录中提供服务（可以理解为：打开哪个目录中的 index.html）<ul>
<li><code>--contentBase ./src</code>：当前目录下的 src 文件夹</li>
</ul>
</li>
<li><code>--open true</code> ：自动打开浏览器</li>
<li><code>--port 3000</code> ：指定端口号</li>
<li><code>--hot</code> ：热更新，只加载修改的文件(按需加载修改的内容)，而非全部加载</li>
<li><code>--progress</code>：显示进度条</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --contentBase src --open --port 8888 --hot&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h3><p>配置 <code>package.json</code> 中的 <code>scripts</code> , 脚本命令为： <code>&quot;dev&quot;: &quot;webpack-dev-server --hot&quot;</code></p>
<p>执行命令 : <code>npm run dev</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --hot 热更新写在命令行里，不然的话还要配其他插件麻烦</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="comment">// hot: true,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// api 表示当前项目请求的 key</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="comment">// 代理服务器路径</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;/api&#x27;</span> &#125;, <span class="comment">// 重写路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求 localhost:8080/api/.. 会被代理到 http://www.baidu.com/api/..</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// plugins: [</span></span><br><span class="line">  <span class="comment">//   new webpack.HotModuleReplacementPlugin()</span></span><br><span class="line">  <span class="comment">// ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="html-webpack-plugin-插件"><a href="#html-webpack-plugin-插件" class="headerlink" title="html-webpack-plugin 插件"></a>html-webpack-plugin 插件</h2><ul>
<li>安装：<code>npm i -D html-webpack-plugin</code></li>
<li>作用：根据模板，在内存中自动生成 html 页面，并自动引入<code>bundle.js</code>、<code>css</code>等文件</li>
</ul>
<p>配置文件配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 html-webpack-plugin 插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 配置插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// html-webpack-plugin 配置</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 模板页面路径</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;src/index.html&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打包非-js-文件"><a href="#打包非-js-文件" class="headerlink" title="打包非 js 文件"></a>打包非 js 文件</h2><p>webpack 默认只能处理 js 文件，非 js(css、less、图片、字体等)处理不了，借助 loader 加载器</p>
<h3 id="处理-css-文件"><a href="#处理-css-文件" class="headerlink" title="处理 css 文件"></a>处理 css 文件</h3><p>在 <code>main.js</code>中引入 css 文件 <code>import &#39;../css/main.css&#39;</code></p>
<p>安装 : <code>npm i -D style-loader css-loader</code></p>
<p>在 <code>webpack.config.js</code> 中，添加个新的配置项 <code>module</code></p>
<p>在 <code>module</code> 中添加 <code>loader</code> 来处理 <code>css</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 处理 css</span></span><br><span class="line">      <span class="comment">// 注意点 use 执行loader 顺序 从右往左</span></span><br><span class="line">      <span class="comment">// css-loader: 读取css文件内容，将其转化为一个模块</span></span><br><span class="line">      <span class="comment">// style-loader: 拿到模块, 创建一个style标签，插入页面中</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理-less-文件"><a href="#处理-less-文件" class="headerlink" title="处理 less 文件"></a>处理 less 文件</h3><p>在 <code>main.js</code>中引入 less 文件 <code>import &#39;../css/main.less&#39;</code></p>
<p>安装 : <code>npm i -D less-loader less style-loader css-loader</code></p>
<p>在 webpack.config.js 中配置项 <code>module-&gt;rules</code>中添加 loader 来处理 <code>less</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">//处理 css</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理图片文件"><a href="#处理图片文件" class="headerlink" title="处理图片文件"></a>处理图片文件</h3><p>安装 : <code>npm i -D url-loader file-loader</code></p>
<p>在 webpack.config.js 中配置项 <code>module-&gt;rules</code>中添加 loader 来处理图片</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 处理图片</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpg|png)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">//  图片大小 &lt;= 10000 =&gt; 转化为base64</span></span><br><span class="line">              <span class="comment">//  图片大小 &gt;= 10000 =&gt; 不会转base64 内部调用 file-loader 加载图片</span></span><br><span class="line">              <span class="attr">limit</span>: <span class="number">10000</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>url-loader</strong> 默认会将图片转化为 base64 编码格式，目的：提高性能</p>
<p><strong>file-loader</strong> 在处理图片时，会对文件进行重命名</p>
<p>base64 编码格式的图片说明：</p>
<ul>
<li>精灵图：将一些小图片合并为一张图片，减少请求次数，提高性能</li>
<li>字体图标：直接将一些小的图片,合并到字体文件中，并且不会失真</li>
<li>base64：是一种编码格式,能够将图片、文字等常见的文件，转化为 base64 格式，这种字符串格式浏览器能够识别并且读取显示到页面中</li>
<li>base64 是一个字符串，也可以直接被内嵌到页面中，或者 css 中</li>
<li>注意：大图片不适合用 base64 处理，只有小的图标才适合 base64 处理</li>
</ul>
<h3 id="处理字体文件"><a href="#处理字体文件" class="headerlink" title="处理字体文件"></a>处理字体文件</h3><p>在 <strong>main.js</strong> 中引入 css 文件 <code>import &#39;../css/iconfont/iconfont.css&#39;</code></p>
<p>在 webpack.config.js 中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 处理字体图标</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(svg|woff|woff2|ttf|eot)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;url-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理-ES6-语法"><a href="#处理-ES6-语法" class="headerlink" title="处理 ES6 语法"></a>处理 ES6 语法</h3><ol>
<li>现在的项目都是使用 ES6 开发的，但是这些新的 ES6 语法，并不是所有的浏览器都支持，所以就需要有一个工具，帮我们转成 es5 语法，这个就是：babel</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlvLw==">babel</span></li>
<li>Babel is a JavaScript compiler. &#x3D;&#x3D;&gt; babel 是一个 JavaScript 编译器</li>
<li>webpack 只能处理 import &#x2F; export 这个 es6 模块化语法，而其他的 js 新语法，应该使用 babel 来处理</li>
</ol>
<p>babel 的使用 :</p>
<ul>
<li>安装： <code>npm i -D babel-core babel-loader@7</code><ul>
<li>babel-core 是 babel 的核心包</li>
<li>babel-loader 加载 js 文件，并将 js 代码内容交给 babel-core 解析为 es5 低版本的 js</li>
</ul>
</li>
</ul>
<ul>
<li>安装：<code>npm i -D babel-preset-env babel-preset-stage-2</code><ul>
<li>babel-preset-env：表示能够解析 es2015、es2016、es2017、es2018 这些标准的语法</li>
<li>babel-preset-stage-2：用来解析还没有被采纳为标准的语法</li>
<li><code>babel-polyfill与babel-plugin-transform-runtime</code> 也是做兼容处理的,以前都是用这个，兼容更早的</li>
</ul>
</li>
</ul>
<ul>
<li>配置 : 在 webpack.config.js 中添加一个 loader</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 处理 ES6 语法</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="comment">// 设置忽略 node-modules 文件夹</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在项目根目录中创建 babel 的配置文件，叫：<code>.babelrc</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;env&quot;,</span><br><span class="line">    &quot;stage-2&quot;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  -----------</span><br><span class="line">  // 暂时不用</span><br><span class="line">  // 如果未来某一天真的用到了polify</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;transform-runtime&quot;, &#123;</span><br><span class="line">      &quot;helpers&quot;: false,</span><br><span class="line">      &quot;polyfill&quot;: true,</span><br><span class="line">      &quot;regenerator&quot;: true,</span><br><span class="line">      &quot;moduleName&quot;: &quot;babel-runtime&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目打包上线"><a href="#项目打包上线" class="headerlink" title="项目打包上线"></a>项目打包上线</h2><p>执行 : <code>npm run build</code> 对项目进行打包，生成 dist 文件</p>
<p>模拟本地服务器 : 安装 : <code>npm i -g http-server</code></p>
<p>把 dist 文件里的内容放到服务器里即可，直接运行<code>http-server</code></p>
<h2 id="webpack-和-gulp-区别"><a href="#webpack-和-gulp-区别" class="headerlink" title="webpack 和 gulp 区别"></a>webpack 和 gulp 区别</h2><ol>
<li>Gulp 侧重于前端开发的整个过程的控制管理（像是流水线），我们可以通过给 gulp 配置不通的 task（通过 Gulp 中的 gulp.task() 方法配置，比如启动 server、sass&#x2F;less 预编译、文件的合并压缩等等）来让 gulp 实现不同的功能，从而构建整个前端开发流程</li>
<li>Webpack 也称之为模块打包机 ，由此也可以看出 Webpack 更侧重于模块打包，当然我们可以把开发中的所有资源（图片、js 文件、css 文件等）都可以看成模块，最初 Webpack 本身就是为前端 JS 代码打包而设计的，后来被扩展到其他资源的打包处理。Webpack 是通过 loader（加载器）和 plugins（插件）对资源进行处理的</li>
<li>gulp 是构建工具，Webpack 是 js 模块化的解决方案</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序 canvas touchmove 事件实现手写签名并保存到相册</title>
    <url>/969.html</url>
    <content><![CDATA[<blockquote>
<p>2020-03-19<br>真机调试报错 <code>r.Canvas is not a constructor</code><br>原因：canvas 2d 和 webgl 暂不支持真机调试，请直接使用真机预览，真机预览模式下使用 vConsole 调试</p>
</blockquote>
<p>基础代码(使用 Canvas 2D 接口)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">ctx</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params">options</span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">onReady</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> query = wx.<span class="title function_">createSelectorQuery</span>()</span><br><span class="line">      query</span><br><span class="line">        .<span class="title function_">select</span>(<span class="string">&#x27;#sign&#x27;</span>)</span><br><span class="line">        .<span class="title function_">fields</span>(&#123; <span class="attr">node</span>: <span class="literal">true</span>, <span class="attr">size</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        .<span class="title function_">exec</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">          <span class="keyword">const</span> canvas = res[<span class="number">0</span>].<span class="property">node</span></span><br><span class="line">          <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> dpr = wx.<span class="title function_">getSystemInfoSync</span>().<span class="property">pixelRatio</span></span><br><span class="line">          canvas.<span class="property">width</span> = res[<span class="number">0</span>].<span class="property">width</span> * dpr</span><br><span class="line">          canvas.<span class="property">height</span> = res[<span class="number">0</span>].<span class="property">height</span> * dpr</span><br><span class="line">          ctx.<span class="title function_">scale</span>(dpr, dpr)</span><br><span class="line"></span><br><span class="line">          ctx.<span class="property">lineWidth</span> = <span class="number">4</span> <span class="comment">//线条的宽度</span></span><br><span class="line">          ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#333&#x27;</span> <span class="comment">//线条的颜色</span></span><br><span class="line">          ctx.<span class="property">lineCap</span> = <span class="string">&#x27;round&#x27;</span> <span class="comment">//定义线条开头和结尾处的形状</span></span><br><span class="line">          ctx.<span class="property">lineJoin</span> = <span class="string">&#x27;bevel&#x27;</span> <span class="comment">// 线条与线条之间的连接方式，该属性有三个属性值：miter（默认值，尖角），bevel（衔接），round（圆角）。</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">ctx</span>: ctx</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>实现手写效果</p>
<p>使用 catchtouchmove 绑定，默认会阻止页面跟着滑动</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">type</span>=<span class="string">&quot;2d&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sign&quot;</span> <span class="attr">bindtouchstart</span>=<span class="string">&quot;bindtouchstartHandler&quot;</span> <span class="attr">catchtouchmove</span>=<span class="string">&quot;catchtouchmoveHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bindtouchstartHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">type</span> != <span class="string">&#x27;touchstart&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> ctx = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">ctx</span></span><br><span class="line">  <span class="comment">//开始本次绘画</span></span><br><span class="line">  ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">  <span class="comment">//画笔起始点</span></span><br><span class="line">  ctx.<span class="title function_">moveTo</span>(e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>, e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">catchtouchmoveHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = e.<span class="property">currentTarget</span>.<span class="property">offsetLeft</span></span><br><span class="line">  <span class="keyword">let</span> top = e.<span class="property">currentTarget</span>.<span class="property">offsetTop</span></span><br><span class="line">  <span class="keyword">let</span> pageX = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageX</span></span><br><span class="line">  <span class="keyword">let</span> pageY = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ctx = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">ctx</span></span><br><span class="line">  <span class="comment">//根据鼠标路径绘画</span></span><br><span class="line">  ctx.<span class="title function_">lineTo</span>(pageX - left, pageY - top)</span><br><span class="line">  <span class="comment">//立即渲染</span></span><br><span class="line">  ctx.<span class="title function_">stroke</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>bindtouchmove</code>，需要单独处理页面跟着滚动的问题</p>
<p>给 canvas 绑定 bindtouchmove&#x3D;”touchmoveHandler” 然后绑定空的 catchtouchmove 事件<code>catchtouchmove=&quot;preventTouchmove&quot;</code> 或者直接 <code>catchtouchmove=&quot;ture&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">type</span>=<span class="string">&quot;2d&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sign&quot;</span> <span class="attr">bindtouchstart</span>=<span class="string">&quot;bindtouchstartHandler&quot;</span> <span class="attr">bindtouchmove</span>=<span class="string">&quot;bindtouchmoveHandler&quot;</span> <span class="attr">catchtouchmove</span>=<span class="string">&quot;preventTouchmove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bindtouchstartHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">type</span> != <span class="string">&#x27;touchstart&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> ctx = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">ctx</span></span><br><span class="line">  <span class="comment">//开始本次绘画</span></span><br><span class="line">  ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">  <span class="comment">//画笔起始点</span></span><br><span class="line">  ctx.<span class="title function_">moveTo</span>(e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>, e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind绑定的事件</span></span><br><span class="line">bindtouchmoveHandler (e) &#123;</span><br><span class="line">  <span class="keyword">let</span> ctx = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">ctx</span></span><br><span class="line">  <span class="comment">//根据鼠标路径绘画</span></span><br><span class="line">  ctx.<span class="title function_">lineTo</span>(e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>, e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>)</span><br><span class="line">  <span class="comment">//立即渲染</span></span><br><span class="line">  ctx.<span class="title function_">stroke</span>()</span><br><span class="line">&#125;,</span><br><span class="line">preventTouchmove () &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>保存到相册</p>
<p>wx.canvasToTempFilePath(Object object, Object this)<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9jYW52YXMvd3guY2FudmFzVG9UZW1wRmlsZVBhdGguaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 把当前画布指定区域的内容导出生成指定大小的图片。 canvas2d不需要使用draw方法</span></span><br><span class="line"><span class="title function_">canvasToTempFilePath</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> query = wx.<span class="title function_">createSelectorQuery</span>()</span><br><span class="line">    query</span><br><span class="line">      .<span class="title function_">select</span>(<span class="string">&#x27;#sign&#x27;</span>)</span><br><span class="line">      .<span class="title function_">fields</span>(&#123; <span class="attr">node</span>: <span class="literal">true</span>, <span class="attr">size</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">      .<span class="title function_">exec</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(res)</span></span><br><span class="line">        <span class="keyword">const</span> canvas = res[<span class="number">0</span>].<span class="property">node</span></span><br><span class="line">        wx.<span class="title function_">canvasToTempFilePath</span>(&#123;</span><br><span class="line">          <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">fileType</span>: <span class="string">&#x27;jpg&#x27;</span>,</span><br><span class="line">          <span class="attr">canvas</span>: canvas,</span><br><span class="line">          <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">tempFilePath</span>) <span class="comment">// 文件临时地址 可以保存到相册或上传</span></span><br><span class="line">            <span class="title function_">resolve</span>(res.<span class="property">tempFilePath</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存本地</span></span><br><span class="line"><span class="title function_">saveToAlbum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">canvasToTempFilePath</span>().<span class="title function_">then</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">getSetting</span>(&#123;</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有则获取授权</span></span><br><span class="line">        <span class="keyword">if</span> (!res.<span class="property">authSetting</span>[<span class="string">&#x27;scope.writePhotosAlbum&#x27;</span>]) &#123;</span><br><span class="line">          wx.<span class="title function_">authorize</span>(&#123;</span><br><span class="line">            <span class="attr">scope</span>: <span class="string">&#x27;scope.writePhotosAlbum&#x27;</span>,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">              wx.<span class="title function_">saveImageToPhotosAlbum</span>(&#123;</span><br><span class="line">                <span class="attr">filePath</span>: file,</span><br><span class="line">                <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;保存成功&#x27;</span></span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">fail</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;保存失败&#x27;</span>,</span><br><span class="line">                    <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">fail</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 有授权直接保存</span></span><br><span class="line">          wx.<span class="title function_">saveImageToPhotosAlbum</span>(&#123;</span><br><span class="line">            <span class="attr">filePath</span>: file,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">              wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;保存成功&#x27;</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">fail</span>(<span class="params"></span>) &#123;</span><br><span class="line">              wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;保存失败&#x27;</span>,</span><br><span class="line">                <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>在微信小程序中使用 iconfont</title>
    <url>/1060.html</url>
    <content><![CDATA[<p>在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24v">iconfont</span> 选择好需要使用的图标，将代码下载，解压后找到 iconfont.css 修改名称为 iocnfont.wxss 放到项目中即可</p>
<p>使用: Font class 方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将无效的字体引用删除，只保留 base64 引用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;data:application/x-font-woff2;charset=utf-8;base64,...&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Font class 方式不支持使用彩色图标，且 symbol 方式也无法使用，因为 iconfont.js 中含有操作 dom 的代码，会报错 Cannot read property ‘getElementsByTagName’ of undefined</p>
<p>如果想引入彩色图标</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ljb25mb250LWNsaS9taW5pLXByb2dyYW0taWNvbmZvbnQtY2xp">https://github.com/iconfont-cli/mini-program-iconfont-cli</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序中使用 async/await 语法</title>
    <url>/1018.html</url>
    <content><![CDATA[<p>旧文章害死人</p>
<p>研究了半天，突然发现开发工具在 1.02.1904282 以及之后版本中，增加了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL2NvZGVjb21waWxlLmh0bWwjJUU1JUEyJTlFJUU1JUJDJUJBJUU3JUJDJTk2JUU4JUFGJTkx">增强编译</span>已支持 Async&#x2F;Await 语法</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL3VwbG9nLmh0bWwjXzIwMTktMDUtMDg=">2019-05-08更新日志</span>第一条</p>
<p>已下内容已过期(文章刚发布一小时)</p>
<blockquote>
<p>微信小程序中原生支持 async await 语法，前提是需要关闭 ES6 转 ES5 后</p>
</blockquote>
<p>在开启 ES6 转 ES5 后 async 函数无法使用，可以使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9y">regenerator</span> 包来解决。新版本的 regenerator 在小程序中无法使用，会报如下错误：<br><img data-src="/wp-content/uploads/2020/03/regenerator.png" alt="regenerator"></p>
<p>原因是 regenerator 包更新了 Function 函数，具体可参考：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL3B1bGwvMzY5">https://github.com/facebook/regenerator/pull/369</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2NvbW1pdC8wNjNmMTRlZjdmMDFiYjI5ODMwZTNmMTdlOWVmMTUxZTdhNWNiMmYz">https://github.com/facebook/regenerator/commit/063f14ef7f01bb29830e3f17e9ef151e7a5cb2f3</span></p>
<p>可以直接使用老版本来解决这个问题，或者修改源码，把 Function 改回去</p>
<p>直接使用老版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install regenerator@0.13.1</span><br></pre></td></tr></table></figure>

<p>如果使用了 npm 模块，之后在需要使用 async 语法的 js 中直接引入即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regeneratorRuntime = <span class="built_in">require</span>(<span class="string">&#x27;regenerator-runtime&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果没有使用 npm 模块，不能直接 require 包名，需要将包提取出来，并引入完整路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regeneratorRuntime = <span class="built_in">require</span>(<span class="string">&#x27;../../libs/regenerator-runtime&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://wqdy.top/1041.html">微信小程序中使用 npm 包</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序中使用less</title>
    <url>/1895.html</url>
    <content><![CDATA[<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g wxss-cli</span><br></pre></td></tr></table></figure>

<p>然后在小程序目录，监听此目录以下所有 css 及 less 文件并实时保存文件后转换为 wxss</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听文件会自动将此目录下 css,less 文件编译为 wxss</span></span><br><span class="line">wxss ./pages</span><br></pre></td></tr></table></figure>
<p>新建的 less 文件最终不会上传至小程序</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序中使用 npm 包</title>
    <url>/1041.html</url>
    <content><![CDATA[<p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL25wbS5odG1s">https://developers.weixin.qq.com/miniprogram/dev/devtools/npm.html</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">npm init</span><br><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">npm install [package]</span><br></pre></td></tr></table></figure>

<p>打开开发者工具，在本地设置中，勾选使用 npm 模块，<br>安装完之后 点击开发者工具中的菜单栏：工具 –&gt; 构建 npm</p>
<p>会额外生成一个<code>miniprogram_npm</code> 目录 是开发者工具构建 npm 时生成的，可以理解为小程序版的 npm 包。</p>
<p>在需要的地方引入，以 regenerator 为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 regenerator-runtime</span></span><br><span class="line"><span class="keyword">const</span> regeneratorRuntime = <span class="built_in">require</span>(<span class="string">&#x27;regenerator-runtime&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序中相关 api 使用 promise</title>
    <url>/1065.html</url>
    <content><![CDATA[<p>微信小程序的 API 都是回调函数，一不小心就是回调地狱。我们可以用 Promise 封装下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Promisify</span> = f =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">arg = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      arg.<span class="property">success</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">      arg.<span class="property">fail</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">f</span>(arg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Request</span> = <span class="title class_">Promisify</span>(wx.<span class="property">request</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Login</span> = <span class="title class_">Promisify</span>(wx.<span class="property">login</span>)</span><br><span class="line"><span class="title class_">Login</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span>) &#123;</span><br><span class="line">    <span class="title class_">Request</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;text.php&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>相关问题</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vY29tbXVuaXR5L2RldmVsb3AvZG9jLzAwMDY0Y2MyNmJjMDU4YTZhODQ4ZjIzODM1MWMwMA==">wx.request 经 Promise 封装后，如何拿到requestTask</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序学习笔记</title>
    <url>/873.html</url>
    <content><![CDATA[<p><strong><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tLw==">微信公众平台</span></strong></p>
<ul>
<li><p>注册账号进入后台：设置 -&gt; 开发设置 -&gt; 拿到 AppID（创建小程序项目使用）</p>
</li>
<li><p>每个邮箱仅能申请一个小程序（未被微信公众平台注册，未被微信开放平台注册，未被个人微信号绑定的邮箱）</p>
</li>
</ul>
<p><strong><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9xdWlja3N0YXJ0LyMlRTQlQkQlOTMlRTklQUElOEMlRTUlQjAlOEYlRTclQTglOEIlRTUlQkElOEY=">体验小程序</span></strong></p>
<p><strong>微信开发者工具</strong></p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL2RlYnVnL3d4YWRvYy9kZXYvZGV2dG9vbHMvZGV2dG9vbHMuaHRtbA==">开发者工具</span></p>
</li>
<li><p>需要使用<code>注册小程序的微信</code>扫码登录</p>
</li>
<li><p>本地开发时：详情-项目配置，将 <code>不校验合法域名勾上</code></p>
</li>
</ul>
<h2 id="小程序项目结构"><a href="#小程序项目结构" class="headerlink" title="小程序项目结构"></a>小程序项目结构</h2><p><strong><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9zdHJ1Y3R1cmUuaHRtbA==">代码构成</span></strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">pages/ ---------------- 页面（组件），所有页面都应该放到这个目录中</span><br><span class="line">  index/  ------------- index页面文件夹</span><br><span class="line">    index.js ---------- index页面的逻辑代码</span><br><span class="line">    index.wxml -------- index页面的HTML结构</span><br><span class="line">    index.wxss -------- index页面的CSS样式</span><br><span class="line">    index.json -------- 页面配置（可选）</span><br><span class="line">utils/ ---------------- 公共工具（函数）</span><br><span class="line">app.js ---------------- 入口文件</span><br><span class="line">app.json -------------- 全局配置（包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等）</span><br><span class="line">app.wxss -------------- 全局样式（CSS）</span><br><span class="line">project.config.json --- 开发工具配置（例如ES6转ES5、界面颜色、编译配置等）</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jb25maWcuaHRtbA==">配置</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9jb25maWd1cmF0aW9uL2FwcC5odG1s">全局配置</span>: <code>app.json</code> 文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9jb25maWd1cmF0aW9uL3BhZ2UuaHRtbA==">页面配置</span> 配置本页面的窗口表现 ， 同全局配置中的 window 项配置，如果页面中的配置与全局配置冲突，是以页面配置为准</p>
<h3 id="页面路径列表-pages-配置项"><a href="#页面路径列表-pages-配置项" class="headerlink" title="页面路径列表-pages 配置项"></a>页面路径列表-<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9jb25maWd1cmF0aW9uL2FwcC5odG1sI3BhZ2Vz">pages</span> 配置项</h3><ul>
<li>所有需要展示的页面都要在 <code>app.json</code> 中进行配置，<code>pages</code> 数组的第一项表示进入小程序的默认页面</li>
<li>每一项开头不需要添加 <code>/</code>，否则报错</li>
<li>推荐：所有页面放到 <code>pages</code> 目录中，文件名称与文件夹名称相同</li>
<li>说明：在 <code>app.json</code> 中配置 <code>pages</code>，可以快速创建页面</li>
</ul>
<h3 id="标签栏-tabBar-配置"><a href="#标签栏-tabBar-配置" class="headerlink" title="标签栏 - tabBar 配置"></a>标签栏 - <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9jb25maWd1cmF0aW9uL2FwcC5odG1sI3RhYkJhcg==">tabBar</span> 配置</h3><ul>
<li>当设置 position 为 top 时，将不会显示 icon</li>
<li>tabBar 中的 list 是一个数组，只能配置最少 2 个、最多 5 个 tab，tab 按数组的顺序排序</li>
<li>list 中每一个菜单项的<code>pagePath</code>属性必须在 <code>pages</code> 中配置</li>
<li>文字颜色以及选中项文字颜色，只能统一设置不能单独设置</li>
<li>注意：没有出现在 <code>tabBar.list</code> 的 <code>pagePath</code> 页面不展示标签栏</li>
</ul>
<h2 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS93eG1sLw==">https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/</span></p>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><ul>
<li><p>WXML 中的动态数据均来自对应 Page 的 <code>data</code></p>
</li>
<li><p>小程序中插值表达式的特点</p>
<ul>
<li>插值表达式中可以直接使用 data 中提供的数据</li>
<li><strong>可以在属性中使用</strong></li>
<li>只能使用表达式，不能出现语句（if、for 等）</li>
<li>注意：<strong>小程序中的插值表达式不支持方法调用</strong> ！！！需要通过特殊的机制来实现该功能</li>
<li><strong>小程序中的数据绑定是单向的，不是双向的</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">isCheck</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; msg &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;isCheck&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>绑定数据的具体类型(Booleal)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定的是字符串 false,转换成布尔值是 true， checkbox 是选中状态 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定的是布尔值 false, checkbox 是未选中状态 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定的是字符串 false, checkbox 是选中状态 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;&#x27;false&#x27;&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">flag</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三元运算 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hidden --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;flag === 0 ? true : false&#125;&#125;&quot;</span>&gt;</span>hidden<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 算数运算 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 13 + 4 + d --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; 10 + a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- checkbox是未选中状态 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;a &gt; b&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- checkbox是选中状态 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 花括号与引号间有空格，被解析成字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">&quot; &#123;&#123;a &gt; b&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 逻辑判断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;</span>&gt;</span>逻辑判断<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 字符串运算 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; &#x27;name:&#x27; + name &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name:zs --&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意： 花括号与引号间不要有空格，否则被解析成字符串</strong></p>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS93eG1sL2NvbmRpdGlvbmFsLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html</span></p>
<p><strong>wx:if</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123; isLoading &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>数据加载中...<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>搞定啦~<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 隐藏多个元素，不改变 wxml的层级结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123; isLoading &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>hidden</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123; isLoading &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>搞定啦~<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS93eG1sL2xpc3QuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html</span></p>
<ul>
<li><code>wx:for</code>：遍历数组，在元素中通过 <code>index</code> 获取索引号，通过 <code>item</code> 获取当前项</li>
<li><code>wx:for-index=&quot;i&quot;</code>：替换默认的 index</li>
<li><code>wx:for-item=&quot;v&quot;</code>：替换默认的 item</li>
<li>注意：<strong>遍历时，需要添加 <code>wx:key</code> 属性，来提高渲染性能</strong> (<code>wx:key</code> 的值不需要添加 <code>item.</code>)，如 <code>wx:key=&quot;id&quot;</code>，如果 item 本身是一个唯一的字符串或者数字，可以使用保留关键字 <code>*this</code>(代表在 for 循环中的 item 本身) 作为 key 值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; list &#125;&#125;&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;i&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;v&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;i&#125;&#125;: &#123;&#123;v.message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：1. 也可以用来渲染一个对象，index 表示 key，item 表示 value。2. 可以用一个 block 标签包裹，将循环写在 block 标签上，且 block 标签并不会渲染到 dom 中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3]&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;index&#125;&#125;:<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS93eG1sL3RlbXBsYXRlLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/template.html</span></p>
<h3 id="定义模板"><a href="#定义模板" class="headerlink" title="定义模板"></a>定义模板</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- name 属性作为模板的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;msgItem&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以将模板写在单独的一个 wxml 文件中，并通过 import 导入使用</p>
<h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><p>使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入</p>
<p>注意：is 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;msgItem&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;...item&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">item</span>: &#123;</span><br><span class="line">      <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;this is a template&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板的作用域"><a href="#模板的作用域" class="headerlink" title="模板的作用域"></a>模板的作用域</h3><p>模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <code>&lt;wxs /&gt;</code> 模块</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS93eG1sL2ltcG9ydC5odG1s">https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/import.html</span></p>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p><code>import</code>可以在该文件中使用目标文件定义的<code>template</code>，如：</p>
<p>在 item.wxml 中定义了一个叫<code>item</code>的<code>template</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- item.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 index.wxml 中引用了 item.wxml，就可以使用<code>item</code>模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;item.wxml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;item&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;text: &#x27;forbar&#x27;&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件 import 的 template。</p>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p><code>include</code> 可以将目标文件<strong>除了</strong> <code>&lt;template/&gt;</code> <code>&lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 <code>include</code> 位置</p>
<h2 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay92aWV3L3d4c3MuaHRtbA==">WXSS(WeiXin Style Sheets)</span>，用于描述 WXML 的组件样式</p>
<p>与 <code>css</code> 相比，<code>WXSS</code> 扩展的特性有：</p>
<ul>
<li><p>尺寸单位</p>
<p><code>rpx</code>（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为 750rpx。如在 iPhone6 上，屏幕宽度为 375px，共有 750 个物理像素，则 750rpx &#x3D; 375px &#x3D; 750 物理像素，1rpx &#x3D; 0.5px &#x3D; 1 物理像素。</p>
</li>
<li><p>样式导入</p>
<p>使用 <code>@import</code> 语句可以导入外联样式表，<code>@import</code> 后跟需要导入的外联样式表的相对路径，用<code>;</code>结束</p>
</li>
</ul>
<p>WXSS 中的注释需要使用多行注释</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* */</span></span><br></pre></td></tr></table></figure>

<p>全局样式、局部样式： app.wxss page.wxss</p>
<p>动态样式：<br>style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。</p>
<p>如果通过 wxss 使用背景图片，不能使用本地资源图片，可以使用网络图片，或者 base64；推荐使用<code>&lt;image/&gt;</code>标签来展示图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;color:&#123;&#123;color&#125;&#125;;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123;myclass&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>选择器</p>
<p>目前支持的选择器有：<code>.class</code> <code>#id</code> <code>element</code> <code>::after</code> <code>::before</code></p>
<h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC8=">https://developers.weixin.qq.com/miniprogram/dev/component/</span></p>
<h3 id="view-组件（标签）"><a href="#view-组件（标签）" class="headerlink" title="view 组件（标签）"></a>view 组件（标签）</h3><p>类似于 HTML 中的 div，用来布局</p>
<p><code>hover-class</code> 属性，指定按下去的样式类，其他属性使用见：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC92aWV3Lmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/component/view.html</span></p>
<h3 id="text-组件"><a href="#text-组件" class="headerlink" title="text 组件"></a>text 组件</h3><p>类似于 HTML 中的 span，行内元素</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">selectable</td>
<td align="left">boolean</td>
<td align="left">false</td>
<td align="left">否</td>
<td align="left">文本是否可选（长按文本）</td>
</tr>
<tr>
<td align="left">space</td>
<td align="left">string</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left">显示连续空格</td>
</tr>
<tr>
<td align="left">decode</td>
<td align="left">boolean</td>
<td align="left">false</td>
<td align="left">否</td>
<td align="left">是否解码</td>
</tr>
</tbody></table>
<p>详细使用文档： <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC90ZXh0Lmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/component/text.html</span></p>
<p>注意：如果想要文本选中功能，必须使用 text 标签，并且添加 selectable 属性，除了文本节点以外的其他节点都无法长按选中</p>
<p>text 标签中只能嵌套 text 标签</p>
<p>decode 可以解析的有 <code>&amp;nbsp;</code> <code>&amp;lt;</code> <code>&amp;gt;</code> <code>&amp;amp;</code> <code>&amp;apos;</code> <code>&amp;ensp;</code> <code>&amp;emsp;</code></p>
<p>可以使用 <code>\n</code> 来换行，在编辑器中按回车键换行也会解析出换行</p>
<h3 id="icon-组件"><a href="#icon-组件" class="headerlink" title="icon 组件"></a>icon 组件</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9pY29uLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/component/icon.html</span></p>
<p>使用 type 指定 icon 的类型，有效值：<code>success</code>, <code>success_no_circle</code>, <code>info</code>, <code>warn</code>, <code>waiting</code>, <code>cancel</code>, <code>download</code>, <code>search</code>, <code>clear</code></p>
<h3 id="button-组件"><a href="#button-组件" class="headerlink" title="button 组件"></a>button 组件</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9idXR0b24uaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/component/button.html</span></p>
<p>注意：如果设置了 <code>type</code> 属性，<code>hover-class</code> 属性会失效</p>
<h3 id="input-组件"><a href="#input-组件" class="headerlink" title="input 组件"></a>input 组件</h3><p>输入框。该组件是原生组件</p>
<p>属性：<br>placeholder-style: 指定 placeholder 的样式<br>placeholder-class: 默认值 input-placeholder 指定 placeholder 的样式类<br>maxlength: 默认 140，设置最大输入长度，设置为 -1 的时候不限制最大长度<br>cursor-spacing: 默认 0，指定光标与键盘的距离，取 input 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离<br>confirm-type: 默认 done，设置键盘右下角按钮的文字，仅在 type&#x3D;’text’时生效<br>adjust-position: 默认 true，键盘弹起时，是否自动上推页面</p>
<h3 id="image-图片组件"><a href="#image-图片组件" class="headerlink" title="image 图片组件"></a>image 图片组件</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9pbWFnZS5odG1s">https://developers.weixin.qq.com/miniprogram/dev/component/image.html</span></p>
<p>image 标签是 web 中 img 标签和背景图片的结合体</p>
<p>常用属性</p>
<p>src：图片资源地址</p>
<p>mode：图片裁剪、缩放的模式</p>
<p>lazy-load：图片懒加载，在即将进入一定范围（上下三屏）时才开始加载</p>
<p>show-menu-by-longpress: 开启长按图片显示识别小程序码菜单</p>
<p>binderror: 当错误发生时触发，用于图片加载失败时显示默认图片</p>
<p>注意：图片有默认宽高，默认宽高为：320 * 240 px；默认不会保持宽高比</p>
<h3 id="swiper-轮播组件"><a href="#swiper-轮播组件" class="headerlink" title="swiper 轮播组件"></a>swiper 轮播组件</h3><p>默认宽度 100%，高度 150px</p>
<h3 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9zY3JvbGwtdmlldy5odG1s">https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html</span></p>
<h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9uYXZpZ2F0b3IuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html</span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9hcHAtc2VydmljZS9yb3V0ZS5odG1s">https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html</span></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">target</td>
<td align="left">string</td>
<td align="left">self</td>
<td align="left">否</td>
<td align="left">在哪个目标上发生跳转，默认当前小程序</td>
</tr>
<tr>
<td align="left">url</td>
<td align="left">string</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left">当前小程序内的跳转链接</td>
</tr>
<tr>
<td align="left">open-type</td>
<td align="left">string</td>
<td align="left">navigate</td>
<td align="left">否</td>
<td align="left">跳转方式</td>
</tr>
</tbody></table>
<p><strong>open-type 的合法值</strong></p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">navigate</td>
<td align="left">对应 <code>wx.navigateTo</code></td>
</tr>
<tr>
<td align="left">redirect</td>
<td align="left">对应 <code>wx.redirectTo</code></td>
</tr>
<tr>
<td align="left">switchTab</td>
<td align="left">对应 <code>wx.switchTab</code></td>
</tr>
<tr>
<td align="left">reLaunch</td>
<td align="left">对应 <code>wx.reLaunch</code></td>
</tr>
<tr>
<td align="left">navigateBack</td>
<td align="left">对应 <code>wx.navigateBack</code></td>
</tr>
<tr>
<td align="left">exit</td>
<td align="left">退出小程序，<code>target=&quot;miniProgram&quot;</code> 时生效</td>
</tr>
</tbody></table>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9yb3V0ZS93eC5uYXZpZ2F0ZVRvLmh0bWw=">wx.navigateTo</span> ，保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9yb3V0ZS93eC5yZWRpcmVjdFRvLmh0bWw=">wx.redirectTo</span> 的功能，关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9yb3V0ZS93eC5zd2l0Y2hUYWIuaHRtbA==">wx.switchTab</span> 的功能，跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9yb3V0ZS93eC5yZUxhdW5jaC5odG1s">wx.reLaunch</span> 的功能，关闭所有页面，打开到应用内的某个页面<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9yb3V0ZS93eC5uYXZpZ2F0ZUJhY2suaHRtbA==">wx.navigateBack</span> 的功能，关闭当前页面，返回上一页面或多级页面。可通过 <code>getCurrentPages</code> 获取当前的页面栈，决定需要返回几层。<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9hcGkvZ2V0Q3VycmVudFBhZ2VzLmh0bWw=">getCurrentPages</span></p>
<p>url 可以使用绝对路径或相对路径，使用绝对路径时需要添加 <code>/</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/index/index&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;navigate&quot;</span>&gt;</span>sdfsf<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;./index/index&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;navigate&quot;</span>&gt;</span>sdfsf<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jdXN0b20tY29tcG9uZW50Lw==">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/</span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9hcGkvQ29tcG9uZW50Lmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html</span></p>
<p>普通页面也可以使用 Component 构造器来创建，提供 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jdXN0b20tY29tcG9uZW50L29ic2VydmVyLmh0bWw=">observers</span> 支持数据监听，类似 vue 中的 watch</p>
<p>还可以扩展 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlY2hhdC1taW5pcHJvZ3JhbS9jb21wdXRlZA==">conputed</span>，类似 vue 计算属性</p>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p><strong>全局数据</strong></p>
<p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="attr">globalData</span>: &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;hhh&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 app.js 文件中，直接使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">url</span> <span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">url</span> = <span class="string">&#x27;qqq&#x27;</span> <span class="comment">// 修改</span></span><br></pre></td></tr></table></figure>

<p>在其他非 app.js 文件中使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">App</span> = <span class="title function_">getApp</span>()</span><br><span class="line"><span class="keyword">let</span> url = <span class="title class_">App</span>.<span class="property">globalData</span>.<span class="property">url</span> <span class="comment">// 获取</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">globalData</span>.<span class="property">url</span> = <span class="string">&#x27;hhh&#x27;</span> <span class="comment">// 修改</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">globalData</span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span> <span class="comment">// 添加</span></span><br></pre></td></tr></table></figure>

<p><strong>页面内数据</strong></p>
<p>获取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getMsg () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">msg</span>) <span class="comment">// 和 vue 中的不同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改数据</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL2RlYnVnL3d4YWRvYy9kZXYvZnJhbWV3b3JrL2FwcC1zZXJ2aWNlL3BhZ2UuaHRtbA==">setData</span></li>
<li><code>setData()</code>：更新数据<ul>
<li>说明：将数据从逻辑层发送到视图层（异步），同时改变对应的 this.data 的值（同步）</li>
<li>修改 data 中的数据</li>
<li>更新视图，也就是说：视图中使用该数据的地方会重新渲染</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">changeMsg () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span></span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 回调函数</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：小程序中的数据不是双向绑定的，而是单向的！！！所以，无法直接修改 data 中的数据来将数据的变化显示在页面中，即通过 <code>this.data.msg = &#39;修改后的数据&#39;</code> 方式修改数据后，页面中不会显示该数据的变化</p>
<ul>
<li>文本框操作：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; input &#125;&#125;&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;inputChangeHandle&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">inputChangeHandle</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">input</span>: e.<span class="property">detail</span>.<span class="property">value</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay92aWV3L3d4bWwvZXZlbnQuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html</span></p>
<ul>
<li>绑定事件：<code>bindtap</code>、<code>catchtap</code></li>
<li>说明：bind 事件绑定不会阻止冒泡事件向上冒泡，catch 事件绑定可以阻止冒泡事件向上冒泡</li>
</ul>
<ul>
<li><p>事件对象可以携带额外信息，如 id, dataset, touches：通过标签的自定义属性<code>data-*</code>，实现给事件传递参数（<strong>不能使用函数调用的形式</strong>）</p>
</li>
<li><p>连字符写法会转换成驼峰写法，而大写字符会自动转成小写字符：<code>data-element-type</code> ，最终会呈现为 <code>event.currentTarget.dataset.elementType</code>，<code>data-elementType</code> ，最终会呈现为 <code>event.currentTarget.dataset.elementtype</code></p>
</li>
<li><p>mark 也可以用于承载一些自定义数据（类似于 dataset ）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;sayHi&quot;</span> <span class="attr">data-msg</span>=<span class="string">&quot;zs&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;单击事件触发了&#x27;</span>, event.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">msg</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a>WXS</h2><p>作用： 辅助构建页面结构的</p>
<p>不支持 es6 语法</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;!-- 语法结构 --&gt;</span><br><span class="line">&lt;wxs module=&quot;tools&quot;&gt;</span><br><span class="line">  function fn (arg) &#123;</span><br><span class="line">    return arg + 10</span><br><span class="line">  &#125;</span><br><span class="line">  // 导出一个对象</span><br><span class="line">  module.exports = &#123; fn: fn &#125;</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用 --&gt;</span><br><span class="line">&lt;view&gt;使用wxs：&#123;&#123; tools.fn(8) &#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<h2 id="UI-库"><a href="#UI-库" class="headerlink" title="UI 库"></a>UI 库</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvd2V1aS13eHNz">weui-wsxx</span></li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>两个生命周期：应用生命周期、页面生命周期</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL2RlYnVnL3d4YWRvYy9kZXYvZnJhbWV3b3JrL2FwcC1zZXJ2aWNlL2FwcC5odG1s">app 生命周期</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL2RlYnVnL3d4YWRvYy9kZXYvZnJhbWV3b3JrL2FwcC1zZXJ2aWNlL3BhZ2UuaHRtbA==">页面 生命周期</span></li>
</ul>
<h2 id="小程序发送请求"><a href="#小程序发送请求" class="headerlink" title="小程序发送请求"></a>小程序发送请求</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9uZXR3b3JrL3JlcXVlc3Qvd3gucmVxdWVzdC5odG1s">wx.request(Object object)</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9hYmlsaXR5L25ldHdvcmsuaHRtbA==">关于小程序中网络相关 API 的说明</span></p>
<p>在实际的项目中需要在 <code>开发设置</code> 中配置 <code>服务器域名</code>，然后小程序才能发送请求获取数据，但在开发期间，可以忽略这一步，在开发工具右上角的 <code>详情</code> 菜单中，勾选 <code>不校验安全域名、TLS版本以及HTTPS证书</code></p>
<p>在小程序不用考虑跨域的问题，因为小程序是基于微信这个客户端</p>
<p>无法在小程序中使用 XHR 对象，发送请求</p>
<h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><h3 id="wx-previewImage-Object-object-全屏预览图片"><a href="#wx-previewImage-Object-object-全屏预览图片" class="headerlink" title="wx.previewImage(Object object) 全屏预览图片"></a>wx.previewImage(Object object) 全屏预览图片</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9tZWRpYS9pbWFnZS93eC5wcmV2aWV3SW1hZ2UuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html</span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;tools.replace(src)&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;previewImage&quot;</span> <span class="attr">data-current</span>=<span class="string">&quot;&#123;&#123; src &#125;&#125;&quot;</span> <span class="attr">data-urls</span>=<span class="string">&quot;&#123;&#123; item.images &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片预览</span></span><br><span class="line">previewImage (e) &#123;</span><br><span class="line">  <span class="comment">// 获取需要预览的图片链接</span></span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">dataset</span>: &#123; current, urls&#125;&#125; = e.<span class="property">currentTarget</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将图片替换为大图</span></span><br><span class="line">  current = current.<span class="title function_">replace</span>(<span class="string">&#x27;w.h&#x27;</span>, <span class="string">&#x27;1000.1000&#x27;</span>)</span><br><span class="line">  urls = urls.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="title function_">replace</span>(<span class="string">&#x27;w.h&#x27;</span>, <span class="string">&#x27;1000.1000&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用预览图片 API</span></span><br><span class="line">  wx.<span class="title function_">previewImage</span>(&#123;</span><br><span class="line">    current, <span class="comment">// 当前显示图片的http链接</span></span><br><span class="line">    urls <span class="comment">// 需要预览的图片http链接列表</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wx-saveImageToPhotosAlbum-保存图片到相册"><a href="#wx-saveImageToPhotosAlbum-保存图片到相册" class="headerlink" title="wx.saveImageToPhotosAlbum 保存图片到相册"></a>wx.saveImageToPhotosAlbum 保存图片到相册</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9tZWRpYS9pbWFnZS93eC5zYXZlSW1hZ2VUb1Bob3Rvc0FsYnVtLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html</span></p>
<h3 id="wx-pageScrollTo-Object-object"><a href="#wx-pageScrollTo-Object-object" class="headerlink" title="wx.pageScrollTo(Object object)"></a>wx.pageScrollTo(Object object)</h3><p>将页面滚动到目标位置</p>
<h3 id="选择节点-wx-createSelectorQuery"><a href="#选择节点-wx-createSelectorQuery" class="headerlink" title="选择节点 wx.createSelectorQuery()"></a>选择节点 wx.createSelectorQuery()</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS93eG1sL3d4LmNyZWF0ZVNlbGVjdG9yUXVlcnkuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay92aWV3L3NlbGVjdG9yLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/framework/view/selector.html</span></p>
<p>返回一个 SelectorQuery 对象实例。在自定义组件或包含自定义组件的页面中，应使用 this.createSelectorQuery() 来代替</p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>文件系统<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9maWxlL3d4LnNhdmVGaWxlLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFile.html</span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9hYmlsaXR5L2ZpbGUtc3lzdGVtLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/file-system.html</span></p>
<p>上传文件<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9uZXR3b3JrL3VwbG9hZC93eC51cGxvYWRGaWxlLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html</span></p>
<p>文件管理器<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9maWxlL3d4LmdldEZpbGVTeXN0ZW1NYW5hZ2VyLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileSystemManager.html</span></p>
<h2 id="页面事件处理函数"><a href="#页面事件处理函数" class="headerlink" title="页面事件处理函数"></a>页面事件处理函数</h2><h3 id="onPageScroll-Object"><a href="#onPageScroll-Object" class="headerlink" title="onPageScroll(Object)"></a>onPageScroll(Object)</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9hcGkvUGFnZS5odG1sI29uUGFnZVNjcm9sbC1PYmplY3Qtb2JqZWN0">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPageScroll-Object-object</span></p>
<p>监听用户滑动页面事件。</p>
<p>Object 参数说明：<br>scrollTop Number 页面在垂直方向已滚动的距离（单位 px）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onPageScroll</span>(<span class="params">scroll</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(scroll.<span class="property">scrollTop</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小程序中授权功能"><a href="#小程序中授权功能" class="headerlink" title="小程序中授权功能"></a>小程序中授权功能</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vY29tbXVuaXR5L2RldmVsb3AvZG9jLzAwMGNlYTIzMDVjYzUwNDdhZjU3MzNkZTc1MTAwOA==">打开小程序设置页（wx.openSetting）接口调整</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vY29tbXVuaXR5L2RldmVsb3AvZG9jLzAwMDJlNjk4MjdjOGQ4NWJjZDU3YzlkNzQ1YjQwMA==">openSetting 的问题</span></li>
<li><span class="exturl" data-url="aHR0cDovL3ZhbmVzc2EuYjNsb2cub3JnL3dlYXBwLXdlcHk=">wepy 爬坑记 - openSetting</span></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">getSetting</span>(&#123;</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success: &#x27;</span>, res)</span><br><span class="line">    <span class="comment">// 根据获取到的用户授权信息判断用户是否同意过授权</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">authSetting</span>[<span class="string">&#x27;scope.address&#x27;</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// res.authSetting[&#x27;scope.address&#x27;] ===&gt; true</span></span><br><span class="line">      <span class="comment">// 已经授权，并且已经同意</span></span><br><span class="line">      <span class="comment">// 直接打开 收获地址 页面</span></span><br><span class="line">      wx.<span class="title function_">chooseAddress</span>(&#123;</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是否确认同意授权：&#x27;</span>, res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">authSetting</span>[<span class="string">&#x27;scope.address&#x27;</span>] === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// res.authSetting[&#x27;scope.address&#x27;] ===&gt; false</span></span><br><span class="line">      <span class="comment">// 已经授权，并切没有同意</span></span><br><span class="line">      <span class="comment">// 弹出确认框，引导用户去授权</span></span><br><span class="line">      wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;您需要授权后，才能使用收获地址功能，是否打开授权界面&#x27;</span>,</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">            <span class="comment">// 点击确定按钮</span></span><br><span class="line">            wx.<span class="title function_">openSetting</span>(&#123;</span><br><span class="line">              <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="comment">// console.log(res)</span></span><br><span class="line">                <span class="comment">// 此处，可以通过 res.authSetting[&#x27;scope.address&#x27;] 来获取到用户</span></span><br><span class="line">                <span class="comment">// 是否同意授权</span></span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">authSetting</span>[<span class="string">&#x27;scope.address&#x27;</span>]) &#123;</span><br><span class="line">                  <span class="comment">// 用户同意授权小程序使用通讯地址这个开发接口</span></span><br><span class="line">                  wx.<span class="title function_">chooseAddress</span>(&#123;</span><br><span class="line">                    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是否确认同意授权：&#x27;</span>, res)</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户本次还是不同意小程序使用通讯地址&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 点击取消按钮</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;取消&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// res.authSetting[&#x27;scope.address&#x27;] ===&gt; undefined</span></span><br><span class="line">      <span class="comment">// 没有授权</span></span><br><span class="line">      <span class="comment">// 第一次点击按钮</span></span><br><span class="line">      wx.<span class="title function_">chooseAddress</span>(&#123;</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是否确认同意授权：&#x27;</span>, res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="分包加载"><a href="#分包加载" class="headerlink" title="分包加载"></a>分包加载</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9zdWJwYWNrYWdlcy5odG1s">https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html</span></p>
<h2 id="与-vue-的区别"><a href="#与-vue-的区别" class="headerlink" title="与 vue 的区别"></a>与 vue 的区别</h2><ul>
<li><p>小程序中 插值表达式可以用在属性中</p>
</li>
<li><p>小程序中的插值表达式默认不支持方法调用，需要通过特殊机制来实现</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下不会再视图中输出内容，也不会报错 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;[1, 2].join(&#x27;-&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>小程序中的数据操作</p>
<ul>
<li>获取数据 <code>this.data.msg</code></li>
<li>更新数据 <code>this.setData(&#123; msg: &#39;something&#39; &#125;)</code></li>
</ul>
</li>
<li><p>绑定布尔值</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xx</span> <span class="attr">:xx</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xx</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 小程序中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xx</span> <span class="attr">xx</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xx</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>小程序中绑定事件时，不能直接调用事件处理程序，所以传参需要通过自定义属性</p>
</li>
<li><p>遍历数据</p>
<p>小程序中 <code>wx:for = &quot;lists&quot;</code>, 而 Vue 是 <code>v-for = &quot;item in lists&quot;</code></p>
</li>
</ul>
<h2 id="todomvc-案例"><a href="#todomvc-案例" class="headerlink" title="todomvc 案例"></a>todomvc 案例</h2><ul>
<li>每个框架或库都应该写一个 todomvc，来了解这个框架的使用模式是怎样的</li>
</ul>
<p>功能</p>
<ul>
<li>1 欢迎界面（没有任务就展示欢迎界面，有任务就展示任务列表）<ul>
<li>注意：欢迎界面 和 任务列表 只能二选一</li>
</ul>
</li>
<li>2 展示任务列表</li>
<li>3 添加任务<ul>
<li>剩余任务数量会改变</li>
</ul>
</li>
<li>4 任务状态切换（完成和未完成）<ul>
<li>剩余任务数量会改变</li>
<li>当所有的任务都完成，隐藏剩余任务数量展示</li>
</ul>
</li>
<li>5 删除任务<ul>
<li>剩余任务数量会改变（删除未完成任务）</li>
</ul>
</li>
<li>6 切换所有任务的选中状态<ul>
<li>只要有一项是选中的，那么，就应该让其他项也选中</li>
</ul>
</li>
<li>7 展示清除已完成任务按钮<ul>
<li>1 当有已完成的任务，就展示</li>
<li>2 单击清除已完成任务按钮，会清除所有已完成的任务</li>
</ul>
</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">任务中需要频繁处理的操作：</span><br><span class="line">1 清除已完成任务按钮 的展示和隐藏</span><br><span class="line">2 剩余任务（未完成任务）的展示和隐藏</span><br></pre></td></tr></table></figure>

<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>微信小程序 —— button 按钮去除 border 边框：使用 <code>button::after&#123; border: none; &#125;</code> 来去除边框</p>
<p>button navogator 组件默认有点击态，可以添加 <code>hover-class=&quot;none&quot;</code> 去除</p>
<p>getCurrentPages() 方法<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9hcGkvZ2V0Q3VycmVudFBhZ2VzLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html</span></p>
<p>获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。</p>
<p>页面间数据传递</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> page = <span class="title function_">getCurrentPages</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(page)</span><br><span class="line"><span class="keyword">let</span> prevPage = page[page.<span class="property">length</span> - <span class="number">2</span>]</span><br><span class="line"><span class="comment">// 修改上个页面的数据</span></span><br><span class="line">prevPage.<span class="title function_">setData</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;hehehe&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  wx.<span class="title function_">navigateBack</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序常用代码段</title>
    <url>/1931.html</url>
    <content><![CDATA[<h2 id="检查小程序更新"><a href="#检查小程序更新" class="headerlink" title="检查小程序更新"></a>检查小程序更新</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9iYXNlL3VwZGF0ZS9VcGRhdGVNYW5hZ2VyLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.html</span></p>
<p>在 <code>app.js</code> 中添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="attr">onLaunch</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">checkNewVersion</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">checkNewVersion</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">// 检查版本更新</span></span><br><span class="line">    <span class="comment">// 获取小程序更新机制兼容</span></span><br><span class="line">    <span class="keyword">if</span> (wx.<span class="title function_">canIUse</span>(<span class="string">&#x27;getUpdateManager&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> updateManager = wx.<span class="title function_">getUpdateManager</span>()</span><br><span class="line">      updateManager.<span class="title function_">onCheckForUpdate</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">// 请求完新版本信息的回调</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">hasUpdate</span>) &#123;</span><br><span class="line">          updateManager.<span class="title function_">onUpdateReady</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;更新提示&#x27;</span>,</span><br><span class="line">              <span class="attr">content</span>: <span class="string">&#x27;新版本已经准备好，是否重启应用？&#x27;</span>,</span><br><span class="line">              <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                  <span class="comment">// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class="line">                  updateManager.<span class="title function_">applyUpdate</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;</span><br><span class="line">                  <span class="comment">// 如果需要强制更新，则给出二次弹窗</span></span><br><span class="line">                  wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;更新提示&#x27;</span>,</span><br><span class="line">                    <span class="attr">content</span>: <span class="string">&#x27;本次更新可能会导致旧版本无法正常访问，请使用新版本&#x27;</span>,</span><br><span class="line">                    <span class="attr">showCancel</span>: <span class="literal">false</span>, <span class="comment">// 不显示取消按钮</span></span><br><span class="line">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                      <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                        <span class="comment">// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class="line">                        updateManager.<span class="title function_">applyUpdate</span>()</span><br><span class="line">                      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;</span><br><span class="line">                        <span class="comment">// 重新回到版本更新提示</span></span><br><span class="line">                        self.<span class="title function_">checkNewVersion</span>()</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          updateManager.<span class="title function_">onUpdateFailed</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 新的版本下载失败</span></span><br><span class="line">            wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;已经有新版本了&#x27;</span>,</span><br><span class="line">              <span class="attr">content</span>: <span class="string">&#x27;新版本已经上线啦~，请您删除当前小程序，重新搜索打开&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示</span></span><br><span class="line">      wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>微信开发者工具上可以通过「编译模式」下的「下次编译模拟更新」开关来调试</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端兼容性问题总结</title>
    <url>/387.html</url>
    <content><![CDATA[<h3 id="1-ios-移动端页面对点击事件有-300ms-延时"><a href="#1-ios-移动端页面对点击事件有-300ms-延时" class="headerlink" title="1. ios 移动端页面对点击事件有 300ms 延时"></a>1. ios 移动端页面对点击事件有 300ms 延时</h3><p>使用 fastclick 库 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Z0bGFicy9mYXN0Y2xpY2s=">https://github.com/ftlabs/fastclick</span></p>
<p>使用 FastClick 的时候，在需要使用的层上，实例化它。我们使用 document.body 是因为希望所有的按钮和链接都获得快速点击</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">FastClick</span> <span class="keyword">from</span> <span class="string">&#x27;fastclick&#x27;</span></span><br><span class="line"><span class="title class_">FastClick</span>.<span class="title function_">attach</span>(<span class="variable language_">document</span>.<span class="property">body</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-ios-滚动卡顿"><a href="#2-ios-滚动卡顿" class="headerlink" title="2. ios 滚动卡顿"></a>2. ios 滚动卡顿</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">overflow</span>-scrolling: touch; <span class="comment">/* 当手指从触摸屏上移开，会保持一段时间的滚动 */</span></span><br><span class="line">  <span class="comment">/* -webkit-overflow-scrolling: auto; */</span> <span class="comment">/* 当手指从触摸屏上移开，滚动会立即停止 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-ios-1px-border-变宽"><a href="#3-ios-1px-border-变宽" class="headerlink" title="3. ios 1px border 变宽"></a>3. ios 1px border 变宽</h3><p>以 dpr &#x3D; 2 为例：<br>你拿到一张标准的基于 iphone6 的设计稿(750px)<br>你看到它设计的一个 border 宽度是 1px<br>你兴致勃勃地写下了 border: 1px solid #000;<br>然而 iphone6 实际渲染像素是 375px，那么设计需要 border 的其实是 border: 0.5px solid #000;<br>然后你的是 1px<br>不是 1px 变粗了，只是实际只是需要 0.5px 而已</p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code> 意思是将物理设备的宽度设置给当前浏览器</p>
<p>在使用 table 标签设置 <code>border: 1px</code> 并使用 <code>border-collapse: collapse;</code> 合并边框后，发现 td 之间的边框宽度并不是 1px，而是比 1px 宽，大概为 1.5px</p>
<h3 id="4-webapp-软键盘弹起时问题"><a href="#4-webapp-软键盘弹起时问题" class="headerlink" title="4. webapp 软键盘弹起时问题"></a>4. webapp 软键盘弹起时问题</h3><p>其他参考链接 <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMDY5MzIyOQ==">https://segmentfault.com/a/1190000010693229</span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lvaW5nL0lPSU5H">https://github.com/ioing/IOING</span></p>
<p>页面放大:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>输入框被遮挡，看不见输入的内容: <code>document.activeElement.scrollIntoView()</code></p>
<p>页面自动上移，但收回软键盘时页面没有恢复原样少了一截</p>
<p>fixed 定位效果失效: <code>ios 弹出软键盘的时候, webview 的高度没有变化导致超出屏幕范围，并且不会触发 resize 事件</code></p>
<p><strong>scrollIntoView 与 scrollIntoViewIfNeeded</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0VsZW1lbnQvc2Nyb2xsSW50b1ZpZXc=">Element.scrollIntoView(option)</span> 方法让当前的元素滚动到浏览器窗口的可视区域内<br>option 如果为 true，元素的顶端将和其所在滚动区的可视区域的顶端对齐， 默认<br>option 如果为 false，元素的底端将和其所在滚动区的可视区域的底端对齐</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0VsZW1lbnQvc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZA==">element.scrollIntoViewIfNeeded()</span> 用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。 如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> clientHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span></span><br><span class="line"><span class="keyword">var</span> innerHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"><span class="comment">// 键盘弹起时 scrollHeight innerHeight 发生变化</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">focus</span>=<span class="string">&quot;input(1)&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;input(2)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">input (num) &#123;</span><br><span class="line">  <span class="keyword">var</span> u = navigator.<span class="property">userAgent</span></span><br><span class="line">  <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Linux&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 安卓手机通过 resize 事件监听键盘事件，因为部分手机手动关闭键盘时并不会失焦</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPhone&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 苹果手机</span></span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 键盘弹起</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="title function_">scrollIntoView</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 键盘隐藏</span></span><br><span class="line">      <span class="keyword">var</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="number">0</span></span><br><span class="line">      <span class="comment">// window.scrollTo(0, Math.max(scrollHeight - 1, 0))</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>附：安卓手机监听 resize</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">originalHeight</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>,</span><br><span class="line">    <span class="attr">resizeHeight</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  resizeHeight (val) &#123;</span><br><span class="line">    <span class="keyword">var</span> u = navigator.<span class="property">userAgent</span></span><br><span class="line">    <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Linux&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// var detail = document.querySelector(&#x27;.detail&#x27;)</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">resizeHeight</span> - <span class="number">0</span> &lt; <span class="variable language_">this</span>.<span class="property">originalHeight</span> - <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// detail.style.paddingBottom = &#x27;260px&#x27;</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="title function_">scrollIntoView</span>(&#123; <span class="attr">behavior</span>: <span class="string">&#x27;auto&#x27;</span>, <span class="attr">block</span>: <span class="string">&#x27;start&#x27;</span> &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// detail.style.paddingBottom = &#x27;0&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">resizeHeight</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span></span><br><span class="line">      that.<span class="property">resizeHeight</span> = <span class="variable language_">window</span>.<span class="property">resizeHeight</span></span><br><span class="line">    &#125;)()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-手机端页面文件上传兼容性问题"><a href="#5-手机端页面文件上传兼容性问题" class="headerlink" title="5. 手机端页面文件上传兼容性问题"></a>5. 手机端页面文件上传兼容性问题</h3><h3 id="6-移动端和-PC-端中的-hover-处理-移动端点击时会有-pc-端-hover-效果"><a href="#6-移动端和-PC-端中的-hover-处理-移动端点击时会有-pc-端-hover-效果" class="headerlink" title="6. 移动端和 PC 端中的 hover 处理 移动端点击时会有 pc 端 hover 效果"></a>6. 移动端和 PC 端中的 hover 处理 移动端点击时会有 pc 端 hover 效果</h3><p>百度一下给出的方式是注册 touchstart 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>但经过测试并没有解决该问题</p>
<h3 id="7-移动端-touch-时，会触发-pc-端的-mouseenter-mouseleave-事件"><a href="#7-移动端-touch-时，会触发-pc-端的-mouseenter-mouseleave-事件" class="headerlink" title="7. 移动端 touch 时，会触发 pc 端的 mouseenter mouseleave 事件"></a>7. 移动端 touch 时，会触发 pc 端的 mouseenter mouseleave 事件</h3><p>在事件中通过判断屏幕宽度解决</p>
<h3 id="8-ios-a-链接-input-type-x3D-”file”-等在点击时会出现灰色（touch-高亮）"><a href="#8-ios-a-链接-input-type-x3D-”file”-等在点击时会出现灰色（touch-高亮）" class="headerlink" title="8. ios a 链接 input type&#x3D;”file” 等在点击时会出现灰色（touch 高亮）"></a>8. ios a 链接 input type&#x3D;”file” 等在点击时会出现灰色（touch 高亮）</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br></pre></td></tr></table></figure>

<h3 id="9-禁用浏览器自动调整字体大小"><a href="#9-禁用浏览器自动调整字体大小" class="headerlink" title="9. 禁用浏览器自动调整字体大小"></a>9. 禁用浏览器自动调整字体大小</h3><p>移动端浏览器切换橫向模式时会调整字体大小（字体变大），解决方式:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  -webkit-text-size-adjust: none; <span class="comment">/* 或 100% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>谷歌浏览器已不支持这个属性了，不能通过该方式实现小于 12px 的字体，可使用缩放（transform:scale(0.8)）来实现小于 12px 的字体</p>
</blockquote>
<h3 id="10-appearance-属性"><a href="#10-appearance-属性" class="headerlink" title="10. appearance 属性"></a>10. appearance 属性</h3><p>normal|icon|window|button|menu|field<br>所有主流浏览器都不支持 appearance 属性</p>
<p><code>-webkit-appearance: none;</code> 去除默认样式，使 ios 端和安卓端显示效果一样，但有一个问题，input 的 checkbox 和 radio 类型在安卓端可能无法正常显示</p>
<h3 id="11-禁止长按"><a href="#11-禁止长按" class="headerlink" title="11. 禁止长按"></a>11. 禁止长按</h3><p>在 iOS 上，当你触摸并按住触摸的目标，比如长按一个链接，浏览器将显示链接有关的系统默认菜单，<br>长按图像弹出选项存储或者拷贝图像，长按文字弹出选择文字菜单</p>
<p>可通过如下方式禁止这些行为</p>
<p>禁止长按图片保存</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  -webkit-touch-callout: none;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none; // 像微信浏览器还是无法禁止，加上这行样式即可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>禁用长按复制</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">user-select: none;</span><br></pre></td></tr></table></figure>

<p>禁止长按呼出菜单</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  -webkit-touch-callout: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-点击穿透"><a href="#12-点击穿透" class="headerlink" title="12. 点击穿透"></a>12. 点击穿透</h3><p>假如页面上有两个元素 A 和 B。B 元素在 A 元素之上。我们在 B 元素的 touchstart 事件上注册了一个回调函数，该回调函数的作用是隐藏 B 元素。我们发现，当我们点击 B 元素，B 元素被隐藏了，随后，A 元素触发了 click 事件。<br>这是因为在移动端浏览器，事件执行的顺序是 touchstart &gt; touchend &gt; click。而 click 事件有 300ms 的延迟，当 touchstart 事件把 B 元素隐藏之后，隔了 300ms，浏览器触发了 click 事件，但是此时 B 元素不见了，所以该事件被派发到了 A 元素身上。如果 A 元素是一个链接，那此时页面就会意外地跳转。<br>跨页面点击穿透问题 点击页内按钮跳转至新页，然后发现新页面中对应位置元素的 click 事件被触发了</p>
<h3 id="13-移动端-video-播放时不弹出页面层"><a href="#13-移动端-video-播放时不弹出页面层" class="headerlink" title="13. 移动端 video 播放时不弹出页面层"></a>13. 移动端 video 播放时不弹出页面层</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">x5-playsinline</span>=<span class="string">&quot;&quot;</span> <span class="attr">playsinline</span>=<span class="string">&quot;&quot;</span> <span class="attr">webkit-playsinline</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="14-vue-移动端监听-scroll"><a href="#14-vue-移动端监听-scroll" class="headerlink" title="14. vue 移动端监听 scroll"></a>14. vue 移动端监听 scroll</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scroll</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="property">scrollTop</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15-vue-移动端列表保存滚动位置"><a href="#15-vue-移动端列表保存滚动位置" class="headerlink" title="15. vue 移动端列表保存滚动位置"></a>15. vue 移动端列表保存滚动位置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="function">(<span class="params">vm</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(vm.$route.meta.scrollTop)</span></span><br><span class="line">    <span class="keyword">if</span> (vm.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">scrollTop</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="property">scrollTop</span> = vm.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">scrollTop</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">name</span> === <span class="string">&#x27;invite&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;removeIncludeComponent&#x27;</span>, <span class="string">&#x27;staff&#x27;</span>)</span><br><span class="line">    <span class="comment">// next()</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">name</span> === <span class="string">&#x27;staffDetail&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> top = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="property">scrollTop</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(top)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">scrollTop</span> = top</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16-移动端去除-type-为-number-的箭头"><a href="#16-移动端去除-type-为-number-的箭头" class="headerlink" title="16. 移动端去除 type 为 number 的箭头"></a>16. 移动端去除 type 为 number 的箭头</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-outer-spin-button,</span><br><span class="line">input::-webkit-inner-spin-button &#123;</span><br><span class="line">  -webkit-appearance: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="17-设置状态栏的背景颜色（IOS）"><a href="#17-设置状态栏的背景颜色（IOS）" class="headerlink" title="17. 设置状态栏的背景颜色（IOS）"></a>17. 设置状态栏的背景颜色（IOS）</h3><p>设置状态栏的背景颜色，只有在”apple-mobile-web-app-capable” content&#x3D;”yes”时生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;black-translucent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>content 参数：</p>
<p>default ：状态栏背景是白色。<br>black ：状态栏背景是黑色。<br>black-translucent ：状态栏背景是半透明。 如果设置为 default 或 black ,网页内容从状态栏底部开始。<br>如果设置为 black-translucent ,网页内容充满整个屏幕，顶部会被状态栏遮挡。</p>
<h3 id="18-弹出数字键盘"><a href="#18-弹出数字键盘" class="headerlink" title="18. 弹出数字键盘"></a>18. 弹出数字键盘</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有&quot;#&quot; &quot;*&quot;符号输入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 纯数字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">pattern</span>=<span class="string">&quot;\d*&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="打开原生应用"><a href="#打开原生应用" class="headerlink" title="打开原生应用"></a>打开原生应用</h3><p>某些浏览器会禁用此协议，比如微信内部浏览器（除非开了白名单）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;weixin://&quot;</span>&gt;</span>打开微信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;alipays://&quot;</span>&gt;</span>打开支付宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;alipays://platformapi/startapp?saId=10000007&quot;</span>&gt;</span>打开支付宝的扫一扫功能<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;alipays://platformapi/startapp?appId=60000002&quot;</span>&gt;</span>打开支付宝的蚂蚁森林<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决-IOS下-active-伪类失效"><a href="#解决-IOS下-active-伪类失效" class="headerlink" title="解决 IOS下 active 伪类失效"></a>解决 IOS下 active 伪类失效</h3><p>给 body 注册一个空事件即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ontouchstart</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最简单的 rem 实现</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">640px</span> / <span class="number">3.75</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> / <span class="number">3.75</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="better-scroll-解决移动端滚动问题"><a href="#better-scroll-解决移动端滚动问题" class="headerlink" title="better-scroll 解决移动端滚动问题"></a>better-scroll 解决移动端滚动问题</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VzdGJodWFuZ3lpL2JldHRlci1zY3JvbGwv">https://github.com/ustbhuangyi/better-scroll/</span></p>
<h3 id="iphone-X-适配-安全区域-safe-area"><a href="#iphone-X-适配-安全区域-safe-area" class="headerlink" title="iphone X 适配 - 安全区域(safe area)"></a>iphone X 适配 - 安全区域(safe area)</h3><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2Rlc2lnbi9odW1hbi1pbnRlcmZhY2UtZ3VpZGVsaW5lcy9pb3MvdmlzdWFsLWRlc2lnbi9hZGFwdGl2aXR5LWFuZC1sYXlvdXQv">https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/</span></p>
<p>在 iOS 11 中采用了 <code>viewport-fit</code> 的 meta 标签作为适配方案</p>
<p><code>viewport-fit</code> 取值</p>
<p>auto 默认：页面内容显示在 safe area 内<br>cover 页面内容充满屏幕，可以通过添加边距保证网页主要内容处于 safe area 中不被裁剪</p>
<p>iOS 11 的 webview 引入了 <code>constant</code>、<code>env</code> 来处理 <code>viewport-fit=cover</code> 属性，以及一组四个预定义的常量：<code>safe-area-inset-left</code>, <code>safe-area-inset-right</code>, <code>safe-area-inset-top</code> 和 <code>safe-area-inset-bottom</code>，分别表示 safe area 和可视窗口 viewport 顶部，右边，左边，底部的间距，可以用于设置 margin 和 padding 或者绝对定位时 left 和 top，这四个常量只有在 <code>viewport-fit=cover</code> 时有效</p>
<p>建议使用 <code>viewport-fit=cover</code> 因为会使用 auto 会造成屏幕四周出现白边</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  top 为 0 的 fixed 定位的 heade */</span></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="comment">/* Status bar height on iOS 10 */</span></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* Status bar height on iOS 11.0 */</span></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="built_in">constant</span>(safe-area-inset-top);</span><br><span class="line">  <span class="comment">/* Status bar height on iOS 11+ */</span></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="built_in">env</span>(safe-area-inset-top);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="built_in">constant</span>(safe-area-inset-top); // 为导航栏+状态栏的高度 <span class="number">88px</span></span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="built_in">constant</span>(safe-area-inset-left); // 如果未竖屏时为<span class="number">0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="built_in">constant</span>(safe-area-inset-right); // 如果未竖屏时为<span class="number">0</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom); // 为底下圆弧的高度 <span class="number">34px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Chrome Developer Tools 使用技巧</title>
    <url>/419.html</url>
    <content><![CDATA[<h3 id="console-log"><a href="#console-log" class="headerlink" title="console.log()"></a>console.log()</h3><p>占位符 %o 它接受对象，%s 接受字符串，%d 表示小数或整数，%c CSS 值的占位符,对应的后面的参数必须是 CSS 语句</p>
<p>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%s 的价格是 %d 磅 %d 便士&#x27;</span>, <span class="string">&#x27;衬衫&#x27;</span>, <span class="number">9</span>, <span class="number">15</span>)</span><br></pre></td></tr></table></figure>

<p>输出：衬衫的价格是 9 磅 15 便士</p>
<p>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am a %cbutton&#x27;</span>, <span class="string">&#x27;color: white; background-color: orange; padding: 2px 5px; border-radius: 2px&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出：I am a <span style="color: white; background-color: orange; padding: 2px 5px; border-radius: 2px">button</span></p>
<h3 id="console-dir"><a href="#console-dir" class="headerlink" title="console.dir()"></a>console.dir()</h3><h3 id="console-warn"><a href="#console-warn" class="headerlink" title="console.warn()"></a>console.warn()</h3><p>输出警告信息，字的颜色是黄色的，用于区分或过滤掉无用的输出</p>
<h3 id="console-table"><a href="#console-table" class="headerlink" title="console.table()"></a>console.table()</h3><p>将数据以表格的形式输出，对于数据列表的输出更容易观察其数据结构，并且点击输出的表头可以对数据排序</p>
<p>第二个可选参数是需要输出的字段。默认输出所有字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(data) <span class="comment">// 输出全部</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(data, [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;price&#x27;</span>]) <span class="comment">// 输出 data 中的 id price 字段</span></span><br></pre></td></tr></table></figure>

<h3 id="console-count"><a href="#console-count" class="headerlink" title="console.count()"></a>console.count()</h3><p>计数器，可以用来统计代码被执行的次数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">count</span>(<span class="string">&#x27;odds&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">odds: 1</span><br><span class="line">odds: 2</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">countReset</span>() <span class="comment">// 可以使用它重置计数器。</span></span><br></pre></td></tr></table></figure>

<h3 id="console-time"><a href="#console-time" class="headerlink" title="console.time()"></a>console.time()</h3><p>是一个用于跟踪操作时间的专用函数，可以用来跟踪 js 的执行时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">  <span class="title function_">a</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>()</span><br></pre></td></tr></table></figure>

<h3 id="选择-DOM-元素-和"><a href="#选择-DOM-元素-和" class="headerlink" title="选择 DOM 元素 $ 和 $$"></a>选择 DOM 元素 $ 和 $$</h3><ul>
<li>在谷歌开发控制台中可以使用 <code>$(&#39;选择器&#39;)</code> 类似于 jquery 的方式选择 DOM 元素</li>
</ul>
<p><code>$(selector)</code> 等效于 <code>document.querySelector(selector)</code><br><code>$$(selector)</code> 等效于 <code>document.querySelectorAll(selector)</code></p>
<ul>
<li><code>inspect($(&#39;selector&#39;))</code> 将检查与选择器匹配的元素，并转到 Elements 选项卡</li>
</ul>
<ul>
<li><code>$0</code>，<code>$1</code>，<code>$2</code> 等可以获取最近检查过的元素，即通过 <code>$0</code> 即可直接获取当前高亮的元素，<code>$1</code> 可以获取上一个高亮的元素</li>
</ul>
<h3 id="将页面转换为可编辑状态"><a href="#将页面转换为可编辑状态" class="headerlink" title="将页面转换为可编辑状态"></a>将页面转换为可编辑状态</h3><p>在 Console 中输入: <code>document.body.contentEditable = true</code></p>
<p>之后页面中的内容即为可编辑状态，可以编辑 DOM 中的任何内容</p>
<h3 id="查找与-DOM-中的元素关联的事件"><a href="#查找与-DOM-中的元素关联的事件" class="headerlink" title="查找与 DOM 中的元素关联的事件"></a>查找与 DOM 中的元素关联的事件</h3><p><code>getEventListeners($(&#39;selector&#39;))</code> 返回一个对象，其中包含绑定到该元素的所有事件</p>
<p>或 控制台 &#x3D;&gt; Element &#x3D;&gt; EventListeners</p>
<h3 id="监控事件"><a href="#监控事件" class="headerlink" title="监控事件"></a>监控事件</h3><p>监视绑定到 DOM 中特定元素的事件，然后在它们被触发后立即将它们记录在控制台中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监控绑定到 &#x27;#box&#x27; 元素的所有事件</span></span><br><span class="line"><span class="title function_">monitorEvents</span>($(<span class="string">&#x27;#box&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控绑定到 &#x27;selector&#x27; 元素的 click 事件</span></span><br><span class="line"><span class="title function_">monitorEvents</span>($(<span class="string">&#x27;#box&#x27;</span>), <span class="string">&#x27;click&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控绑定到 &#x27;selector&#x27; 元素的 click 和 focus 事件</span></span><br><span class="line"><span class="title function_">monitorEvents</span>($(<span class="string">&#x27;#box&#x27;</span>), [<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;focus&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止监视</span></span><br><span class="line"><span class="title function_">unmonitorEvents</span>($(<span class="string">&#x27;#box&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="检索最后一个结果的值"><a href="#检索最后一个结果的值" class="headerlink" title="检索最后一个结果的值"></a>检索最后一个结果的值</h3><p><code>$_</code> 表示控制台中最近一次返回的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Hellow World&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">$_.<span class="title function_">reverse</span>()</span><br><span class="line">$_.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>) <span class="comment">// &#x27;World Hellow&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><ol>
<li>跳到下个断点, 如果后面没有断点了,那么代码直接执行完</li>
<li>单步调试 : 下一步 没有断点的话,函数就直接跳过</li>
<li>单步调试 : 进入函数</li>
<li>单步调试 : 跳出函数</li>
<li>单步调试 : 下一步 不管有没有断点,都会一步一步的走,纯碎的下一步</li>
<li>让所有的断点失效</li>
<li>自动根据错误断点</li>
</ol>
<p><img data-src="https://pic.rmb.bdstatic.com/bjh/5be7b30204587460a4f304432b726270.png"><br><img data-src="https://pic.rmb.bdstatic.com/bjh/85827b5258ae714066edd31f35fd4236.png"><br><img data-src="https://pic.rmb.bdstatic.com/bjh/0be40e17fff5f95297b89ead47343777.png"></p>
<h3 id="一键重新发起请求"><a href="#一键重新发起请求" class="headerlink" title="一键重新发起请求"></a>一键重新发起请求</h3><p>在与后端联调接口时比较方便，不用刷新页面，不用走页面交互</p>
<p>控制台 - Network - 选择要重新发送的请求 - 右键选择Replay XHR(只有xhr请求才有)</p>
<h3 id="在控制台修改入参重新发起请求"><a href="#在控制台修改入参重新发起请求" class="headerlink" title="在控制台修改入参重新发起请求"></a>在控制台修改入参重新发起请求</h3><p>同样方便与后端联调接口</p>
<p>控制台 - Network - 选择要重新发送的请求 - 右键 Copy - Copy as fetch - 控制台粘贴代码, 修改参数回车</p>
<h3 id="复制js变量"><a href="#复制js变量" class="headerlink" title="复制js变量"></a>复制js变量</h3><p>鼠标放在一个变量上，右键 Copy Object&#x2F;String…</p>
<p>或 在控制台中使用 copy() 函数，将对象作为入参执行即可</p>
<h3 id="将节点或变量保存为全局变量"><a href="#将节点或变量保存为全局变量" class="headerlink" title="将节点或变量保存为全局变量"></a>将节点或变量保存为全局变量</h3><p>鼠标放在一个Element节点或变量上，右键 Store xxx as global variable，在Console中将可以使用该变量</p>
<h3 id="网页截图"><a href="#网页截图" class="headerlink" title="网页截图"></a>网页截图</h3><p>可以截取指定节点或全部网页内容</p>
<p>使用前先打开控制台</p>
<p>截取全部网页内容：ctrl&#x2F;cmd + shift + p 执行Command命令，输入Capture full size screenshot 按下回车</p>
<p>截取部分网页内容：先在 Elements 中选中要截取的节点，ctrl + shift + p 执行Command命令，输入Capture node screenshot 回车</p>
<h3 id="展开所有DOM元素"><a href="#展开所有DOM元素" class="headerlink" title="展开所有DOM元素"></a>展开所有DOM元素</h3><p>调试元素时，在层级比较深的情况下，你是不是也经常一个个展开去调试？有一种更加快捷的方式</p>
<p>Alt&#x2F;Opt + click（需要展开的最外层元素）</p>
<h3 id="实时表达式"><a href="#实时表达式" class="headerlink" title="实时表达式"></a>实时表达式</h3><p>点击Console面板中的 小眼睛，输入一个 js 表达式，回车，该表达式将会在Console面板里置顶，并动态刷新表达式的值</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Fiddler 向指定页面中注入 js 或修改页面内容, 本地文件/目录响应请求</title>
    <url>/433.html</url>
    <content><![CDATA[<h2 id="修改线上页面内容"><a href="#修改线上页面内容" class="headerlink" title="修改线上页面内容"></a>修改线上页面内容</h2><p>有时候调试网页，需要在第三方页面中注入点 js 或修改一些代码，来进行自己的测试，可以使用 FiddlerScript 修改页面内容</p>
<p>使用方法如下</p>
<p>打开 fiddler 选择右边的 <code>FiddlerScript</code> 选项卡, 或者从菜单 - <code>Rules(规则)</code> - <code>Customize Rules(自定义规则)</code> 打开</p>
<p>点击 <code>Go to(转到)</code> - 选择 <code>OnBeforeResponse</code> 添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">function</span> <span class="title function_">OnBeforeResponse</span>(<span class="params">oSession: Session</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 判断如果是百度或是请求url中包含 baidu.com 的响应就在head前面添加一个 js 弹窗</span></span><br><span class="line">  <span class="keyword">if</span> (oSession.<span class="title class_">HostnameIs</span>(<span class="string">&#x27;www.baidu.com&#x27;</span>) || oSession.<span class="title function_">uriContains</span>(<span class="string">&#x27;baidu.com&#x27;</span>) &amp;&amp; oSession.<span class="property">oResponse</span>.<span class="property">headers</span>.<span class="title class_">ExistsAndContains</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 解码响应内容</span></span><br><span class="line">    oSession.<span class="title function_">utilDecodeResponse</span>()</span><br><span class="line">    <span class="comment">// 替换内容</span></span><br><span class="line">    oSession.<span class="title function_">utilReplaceInResponse</span>(<span class="string">&#x27;&lt;/head&gt;&#x27;</span>, <span class="string">&#x27;&lt;script&gt;alert(&quot;哈哈&quot;);&lt;/script&gt;&lt;/head&gt;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要替换的内容比较多或比较复杂，可以使用正则替换，替换方式如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解码响应内容</span></span><br><span class="line">oSession.<span class="title function_">utilDecodeResponse</span>()</span><br><span class="line"><span class="keyword">var</span> oBody = <span class="title class_">System</span>.<span class="property">Text</span>.<span class="property">Encoding</span>.<span class="property">UTF8</span>.<span class="title class_">GetString</span>(oSession.<span class="property">responseBodyBytes</span>)</span><br><span class="line"><span class="comment">// 使用正则进行替换</span></span><br><span class="line"><span class="keyword">var</span> oRegEx = <span class="regexp">/&lt;\/head&gt;/gi</span></span><br><span class="line">oBody = oBody.<span class="title function_">replace</span>(oRegEx, <span class="string">&#x27;&lt;script&gt;alert(1);&lt;/script&gt;&lt;/head&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">//设置新的响应内容</span></span><br><span class="line">oSession.<span class="title function_">utilSetResponseBody</span>(oBody)</span><br></pre></td></tr></table></figure>

<p>最后点击左上角的 <code>Save Script(保存)</code> 即可</p>
<h2 id="线上请求映射到本地开发环境"><a href="#线上请求映射到本地开发环境" class="headerlink" title="线上请求映射到本地开发环境"></a>线上请求映射到本地开发环境</h2><ol>
<li>本地文件响应</li>
</ol>
<p>编辑 FiddlerScript 添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">function</span> <span class="title function_">OnBeforeResponse</span>(<span class="params">oSession: Session</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果请求 url 中包含 nav.js 就用 D:/nav.js 来响应</span></span><br><span class="line">  <span class="keyword">if</span> (oSession.<span class="title function_">uriContains</span>(<span class="string">&#x27;nav.js&#x27;</span>)) &#123;</span><br><span class="line">    oSession[<span class="string">&#x27;x-replywithfile&#x27;</span>] = <span class="string">&#x27;D:/nav.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了编辑 FiddlerScript，也可以选择在右侧打开 <code>AutoResponder(自动回复器)</code> 选项卡（参考第三点） ，添加规则并<code>启用规则</code>，效果相同</p>
<ol start="2">
<li>本地目录响应</li>
</ol>
<p>原理同响应单个文件，只是封装了方法批量替换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">function</span> <span class="title function_">OnBeforeResponse</span>(<span class="params">oSession: Session</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (m_Hide304s &amp;&amp; oSession.<span class="property">responseCode</span> == <span class="number">304</span>) &#123;</span><br><span class="line">    oSession[<span class="string">&#x27;ui-hide&#x27;</span>] = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="attr">domain</span>: <span class="title class_">String</span> = <span class="string">&#x27;http://online.com/static/&#x27;</span></span><br><span class="line">  <span class="comment">// 本地目录 注意使用 &#x27;/&#x27; 代替 &#x27;\&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> <span class="attr">folder</span>: <span class="title class_">String</span> = <span class="string">&#x27;D:/static/&#x27;</span></span><br><span class="line">  <span class="title class_">AutoResponseFolder</span>(oSession, domain, folder)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">function</span> <span class="title function_">AutoResponseFolder</span> (<span class="attr">oSession</span>: <span class="title class_">Session</span>, <span class="attr">domain</span>: <span class="title class_">String</span>, <span class="attr">folder</span>: <span class="title class_">String</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取当前对话的完整URL</span></span><br><span class="line">  <span class="keyword">var</span> <span class="attr">fullUrl</span>: <span class="title class_">String</span> = oSession.<span class="property">fullUrl</span></span><br><span class="line">  <span class="keyword">if</span> (fullUrl.<span class="title class_">StartsWith</span>(domain)) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">localPath</span>: <span class="title class_">String</span> = fullUrl.<span class="title function_">replace</span>(domain, folder)</span><br><span class="line">    <span class="comment">// 设置延迟</span></span><br><span class="line">    <span class="comment">// oSession[&#x27;response-trickle-delay&#x27;] = 1000</span></span><br><span class="line">    oSession[<span class="string">&#x27;x-replywithfile&#x27;</span>] = localPath</span><br><span class="line">    <span class="comment">// FiddlerObject.log(localPath)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>替换整个线上环境为本地开发环境</li>
</ol>
<p>例如将所有 <code>http://online.com</code> 上的请求替换成本地 <code>localhost</code>，可以做如下：</p>
<p>在 <code>AutoResponder(自动回复器)</code> 选项卡中，添加如下规则：<code>regex:(?insx)http://online.com\/(?&lt;name&gt;.+)$</code> &#x3D;&gt; <code>http://localhost/$&#123;name&#125;</code></p>
<ol start="4">
<li>使用 Stave 插件批量映射</li>
</ol>
<p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vYXJjaGl2ZS9wL3N0YXZlL2Rvd25sb2Fkcw==">https://code.google.com/archive/p/stave/downloads</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>fiddler</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓手机高版本抓包方案</title>
    <url>/2031.html</url>
    <content><![CDATA[<p>安卓7.0以后，每个应用可以<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvYXJ0aWNsZXMvc2VjdXJpdHktY29uZmlnI0N1c3RvbVRydXN0">自定义可信 CA 集</span>，默认情况下，应用只会信任系统级的证书，不再信任用户级的证书。通过Fiddler&#x2F;Charles安装的证书属于用户级的证书，因此会被视作不安全的证书，导致无法正常抓包</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="修改APP配置文件允许信任用户证书，但前提是可以获取到APP的源码"><a href="#修改APP配置文件允许信任用户证书，但前提是可以获取到APP的源码" class="headerlink" title="修改APP配置文件允许信任用户证书，但前提是可以获取到APP的源码"></a>修改APP配置文件允许信任用户证书，但前提是可以获取到APP的源码</h4><h4 id="将证书安装到系统证书中，但需要root权限"><a href="#将证书安装到系统证书中，但需要root权限" class="headerlink" title="将证书安装到系统证书中，但需要root权限"></a>将证书安装到系统证书中，但需要root权限</h4><p>安装好用户证书，系统已root，安装re文件管理器，使用re文件管理器将证书移动到系统证书文件夹</p>
<p>用户证书路径：&#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;&lt;证书Hash值&gt;.编号<br>系统证书路径：&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts</p>
<p>方法1: 使用adb连接</p>
<p>Copy<br>执行:</p>
<ol>
<li>adb push 0dd2455e.0 &#x2F;sdcard</li>
<li>adb shell</li>
<li>su</li>
<li>mount -o remount,rw &#x2F;system</li>
</ol>
<p>#mount -o rw,remount &#x2F;system<br>5. cp &#x2F;sdcard&#x2F;0dd2455e.0 &#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;<br>6. chmod 644 &#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;0dd2455e.0</p>
<p>使用第三方文件管理器(推荐)</p>
<p>下载酷安市场app –&gt; 分别搜索 Syslock 和 RE管理器 并下载安装(其他应用市场下载也可以)<br>给 Syslock 和 RE管理器 root权限(以小米为例:安全中心–&gt;应用管理–&gt;权限–&gt;ROOT权限管理–&gt;找到应用并开启)<br>打开Syslock并解锁 &#x2F;system (每次重启后都得开启一次)<br>将文件拷贝至手机中<br>使用RE管理器将文件拷贝到 &#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts 下<br>修改文件权限<br>到此然后重启手机。就可以正常抓https数据包了。<br>也可以到手机 设置-&gt;安全-&gt;信任凭据–&gt;系统 查看。</p>
<h4 id="安卓模拟器（兼容性差，很多应用闪退）"><a href="#安卓模拟器（兼容性差，很多应用闪退）" class="headerlink" title="安卓模拟器（兼容性差，很多应用闪退）"></a>安卓模拟器（兼容性差，很多应用闪退）</h4><h4 id="安卓虚拟机-VMOS，官网-http-www-vmos-cn-，该方案相对简单"><a href="#安卓虚拟机-VMOS，官网-http-www-vmos-cn-，该方案相对简单" class="headerlink" title="安卓虚拟机 VMOS，官网: http://www.vmos.cn/，该方案相对简单"></a>安卓虚拟机 VMOS，官网: <span class="exturl" data-url="aHR0cDovL3d3dy52bW9zLmNuLyVFRiVCQyU4QyVFOCVBRiVBNSVFNiU5NiVCOSVFNiVBMSU4OCVFNyU5QiVCOCVFNSVBRiVCOSVFNyVBRSU4MCVFNSU4RCU5NQ==">http://www.vmos.cn/，该方案相对简单</span></h4><p>vmos 设置wifi代理</p>
<ol>
<li>找到 vmos 主屏右下角的设置 — 其他设置 — 网络 adb (记录 ip+端口)</li>
<li>连接vmos: <code>adb connect ip+端口</code></li>
<li>打开wlan设置: <code>adb shell am start -a android.intent.action.MAIN -n  com.android.settings/.wifi.WifiSettings</code></li>
<li>长按 wifi，修改网络，添加代理</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>移动端调试</title>
    <url>/418.html</url>
    <content><![CDATA[<h2 id="一些调试工具"><a href="#一些调试工具" class="headerlink" title="一些调试工具"></a>一些调试工具</h2><ol>
<li><p>直接在 chrome，firefox 等开启模拟器调试，简单直接，还能模拟网络等，但是无法 100% 还原手机的真实情况</p>
</li>
<li><p>chrome <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kZXZ0b29scy9kb2NzL3JlbW90ZS1kZWJ1Z2dpbmc=">远程调试功能</span></p>
<p><code>chrome://inspect/#devices</code></p>
<p>需要连接数据线，其次是设置比较繁琐，而且还限制了 android 手机。对于 IOS 的调试则可能要使用 Safari 的另一套工具</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9wZW9wbGUuYXBhY2hlLm9yZy9+cG11ZWxsci93ZWlucmUvZG9jcy9sYXRlc3Qv">weinre</span>：远程调试，在 PC 上生成一个像 chrome 开发工具一样的调试器，需要手动引入 js</p>
</li>
<li><p>Eruda、vConsole：在移动端页面上生成一个调试器，调试信息会挡住操作元素，查看复杂数据结构的 log 不方便，需要手动引入 js</p>
</li>
<li><p>安装各种虚拟机 sdk，在电脑上进行手机调试。能比较真实模拟手机，但是安装繁琐，操作不方便，无法模拟真实的手势操作</p>
</li>
</ol>
<h2 id="Eruda"><a href="#Eruda" class="headerlink" title="Eruda"></a>Eruda</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpcmlsaXJpL2VydWRh">https://github.com/liriliri/eruda</span></p>
<p>Eruda 是一个专为手机网页前端设计的调试面板，类似 DevTools 的迷你版，其主要功能包括：捕获 console 日志、检查元素状态、捕获 XHR 请求、显示本地存储和 Cookie 信息等等。</p>
<ol>
<li>按钮拖拽，面板透明度大小设置。</li>
<li>Console 面板：捕获 Console 日志，支持 log、error、info、warn、dir、time&#x2F;timeEnd、clear、count、assert、table；支持占位符，包括%c 自定义样式输出；支持按日志类型及正则表达式过滤；支持快捷命令加载 underscore、jQuery 库；支持 JavaScript 脚本执行。</li>
<li>Elements 面板：查看标签内容及属性；查看应用在 Dom 上的样式；支持页面元素高亮；支持屏幕直接点击选取；查看 Dom 上绑定的各类事件。</li>
<li>Network 面板：捕获请求，查看发送数据、返回头、返回内容等信息。</li>
<li>Resources 面板：查看并清除 localStorage、sessionStorage 及 cookie；查看页面加载脚本及样式文件；查看页面加载图片。</li>
<li>Sources 面板：查看页面源码；格式化 html，css，js 代码及 json 数据。</li>
<li>Info 面板：输出 URL 及 User Agent；支持自定义输出内容。</li>
<li>Snippets 面板：页面元素添加边框；加时间戳刷新页面；支持自定义代码片段。</li>
</ol>
<p>使用</p>
<p>通过 CDN 使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/eruda/1.5.2/eruda.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  eruda.init()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 npm 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install eruda --save</span><br></pre></td></tr></table></figure>

<p>在页面中加载脚本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/eruda/eruda.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  eruda.init()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Js 文件对于移动端来说略重（gzip 后大概 100kb）。建议通过 url 参数来控制是否加载调试器，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> src = <span class="string">&#x27;node_modules/eruda/eruda.min.js&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/eruda=true/</span>.<span class="title function_">test</span>(<span class="variable language_">window</span>.<span class="property">location</span>) &amp;&amp; <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;active-eruda&#x27;</span>) != <span class="string">&#x27;true&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;scr&#x27;</span> + <span class="string">&#x27;ipt src=&quot;&#x27;</span> + src + <span class="string">&#x27;&quot;&gt;&lt;/scr&#x27;</span> + <span class="string">&#x27;ipt&gt;&#x27;</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;scr&#x27;</span> + <span class="string">&#x27;ipt&gt;eruda.init();&lt;/scr&#x27;</span> + <span class="string">&#x27;ipt&gt;&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>初始化时可以传入配置：</p>
<ul>
<li>container：用于插件初始化的 Dom 元素，如果不设置，默认创建 div 作为容器直接置于 html 根结点下面</li>
<li>tool：指定要初始化哪些面板，默认加载所有</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(el)</span><br><span class="line"></span><br><span class="line">eruda.<span class="title function_">init</span>(&#123;</span><br><span class="line">  <span class="attr">container</span>: el,</span><br><span class="line">  <span class="attr">tool</span>: [<span class="string">&#x27;console&#x27;</span>, <span class="string">&#x27;elements&#x27;</span>],</span><br><span class="line">  <span class="attr">useShadowDom</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="vConsole"><a href="#vConsole" class="headerlink" title="vConsole"></a>vConsole</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvdkNvbnNvbGU=">https://github.com/Tencent/vConsole</span></p>
<p>一个轻量、可拓展、针对手机网页的前端开发者调试面板</p>
<p>特性</p>
<ul>
<li>查看 console 日志</li>
<li>查看网络请求</li>
<li>查看页面 element 结构</li>
<li>查看 Cookies、localStorage 和 SessionStorage</li>
<li>手动执行 JS 命令行</li>
<li>自定义插件</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvdkNvbnNvbGUvYmxvYi9kZXYvZG9jL3R1dG9yaWFsX0NOLm1k">使用说明</span></p>
<p>下载 vConsole 的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvdkNvbnNvbGUvcmVsZWFzZXMvbGF0ZXN0">最新版本</span>（不要直接下载 dev 分支下的 <code>dist/vconsole.min.js</code>），复制 <code>dist/vconsole.min.js</code> 到项目中：</p>
<p>在 HTML 中引入 vConsole 模块</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/vconsole.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vConsole = <span class="keyword">new</span> <span class="title class_">VConsole</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello world&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 vue 项目中：使用 npm 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vconsole</span><br></pre></td></tr></table></figure>

<p>在 main.js 中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VConsole</span> <span class="keyword">from</span> <span class="string">&#x27;vconsole&#x27;</span></span><br><span class="line"><span class="keyword">const</span> isDebug = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 本地开发调试注入 vConsole</span></span><br><span class="line"><span class="keyword">if</span> (isDebug) &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">VConsole</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="weinre"><a href="#weinre" class="headerlink" title="weinre"></a>weinre</h2><p><span class="exturl" data-url="aHR0cDovL3Blb3BsZS5hcGFjaGUub3JnL35wbXVlbGxyL3dlaW5yZS9kb2NzL2xhdGVzdC9Ib21lLmh0bWw=">http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html</span></p>
<ol>
<li>Element： 查看&#x2F;修改 dom，查看&#x2F;修改 dom CSS</li>
<li>Resources：查看&#x2F;修改 localStorage, sessionStorage</li>
<li>Network：查看网络请求</li>
<li>Timeline：</li>
<li>Console：查看控制台输出</li>
</ol>
<p>不能做 JS 调试</p>
<p>使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install -g weinre</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 weinre 服务</span></span><br><span class="line">weinre --boundHost 192.168.3.44 --httpPort 8888</span><br><span class="line"></span><br><span class="line">启动调试客户端</span><br><span class="line">在浏览器中打开 <span class="string">&#x27;http://192.168.3.44:8888&#x27;</span> 即可启动调试客户端</span><br><span class="line"></span><br><span class="line">在需要调试的页面中添加如下</span><br><span class="line">&lt;script src=<span class="string">&quot;http://192.168.3.44:8888/target/target-script-min.js#anonymous&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="spy-debugger"><a href="#spy-debugger" class="headerlink" title="spy-debugger"></a>spy-debugger</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d1Y2hhbmdtaW5nL3NweS1kZWJ1Z2dlcg==">https://github.com/wuchangming/spy-debugger</span></p>
<p>微信调试，各种 WebView 样式调试、手机浏览器的页面真机调试。便捷的远程调试手机页面、抓包工具，支持：HTTP&#x2F;HTTPS，无需 USB 连接设备</p>
<p>spy-debugger 集成了<code>weinre</code>，简化了<code>weinre</code>需要给每个调试的页面添加 js 代码。原理是拦截所有 html 页面请求注入<code>weinre</code>所需要的 js 代码。让页面调试更加方便</p>
<p>1、页面调试＋抓包<br>2、操作简单，无需 USB 连接设备<br>3、<strong>支持 HTTPS</strong><br>4、<code>spy-debugger</code>内部集成了<a href="http://people.apache.org/~pmuellr/weinre/docs/latest/"><code>weinre</code></a>、<a href="https://github.com/wuchangming/node-mitmproxy"><code>node-mitmproxy</code></a>、<a href="https://github.com/alibaba/anyproxy"><code>AnyProxy</code></a>。<br>5、自动忽略原生 App 发起的 https 请求，只拦截 webview 发起的 https 请求。对使用了 SSL pinning 技术的原生 App 不造成任何影响。<br>6、可以配合其它代理工具一起使用(默认使用 AnyProxy) <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d1Y2hhbmdtaW5nL3NweS1kZWJ1Z2dlciMlRTglQUUlQkUlRTclQkQlQUUlRTUlQTQlOTYlRTklODMlQTglRTQlQkIlQTMlRTclOTAlODYlRTklQkIlOTglRTglQUUlQTQlRTQlQkQlQkYlRTclOTQlQThhbnlwcm94eQ==">(设置外部代理)</span></p>
<p>基本使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install spy-debugger -g</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">spy-debugger</span><br><span class="line"><span class="comment">#设置手机的HTTP代理</span></span><br><span class="line">代理IP地址设置为PC的IP地址，端口为spy-debugger的启动端口(默认端口：9888)</span><br><span class="line"><span class="comment"># 手机安装证书</span></span><br><span class="line">手机浏览器访问 http://s.xxx</span><br><span class="line">设置-&gt;通用-&gt;描述文件与设备管理-&gt;找到node-mitmproxy CA（安装）</span><br><span class="line">设置-&gt;通用-&gt;关于本机-&gt;证书信任设置-&gt; 找到node-mitmproxy CA（打开）</span><br></pre></td></tr></table></figure>

<p>自定义选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义端口</span></span><br><span class="line">spy-debugger -p 8888</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置页面内容为可编辑模式</span></span><br><span class="line">spy-debugger -w <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否只拦截浏览器发起的https请求(默认： true)</span></span><br><span class="line">spy-debugger -b <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许weinre监控iframe加载的页面(默认： false)</span></span><br><span class="line">spy-debugger -i <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许 HTTP 缓存(默认： false)</span></span><br><span class="line">spy-debugger -c <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="m-console"><a href="#m-console" class="headerlink" title="m-console"></a>m-console</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Z3b24vbS1jb25zb2xl">https://github.com/fwon/m-console</span></p>
<p>手机远程调试工具，手机通过代理连接上 PC 后，可以在 PC 版浏览器打印 log 和错误日志</p>
<p>需要手动给每个调试的页面添加 js 代码</p>
<h2 id="DebugGap-VIDE"><a href="#DebugGap-VIDE" class="headerlink" title="DebugGap-VIDE"></a>DebugGap-VIDE</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGVidWdnYXAuY29tL2RlYnVnX3dlYnZpZXcuaHRtbA==">https://www.debuggap.com/debug_webview.html</span></p>
<h2 id="Mobile-Debug"><a href="#Mobile-Debug" class="headerlink" title="Mobile Debug"></a>Mobile Debug</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9iaWxlZGVidWcuY29tLw==">https://www.mobiledebug.com/</span></p>
<h2 id="whistle"><a href="#whistle" class="headerlink" title="whistle"></a>whistle</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNjA1ODg3NT91dG1fc291cmNlPXRhZy1uZXdlc3Q=">https://segmentfault.com/a/1190000016058875?utm_source=tag-newest</span><br><span class="exturl" data-url="aHR0cDovL3dwcm94eS5vcmcvd2hpc3RsZS8=">http://wproxy.org/whistle/</span></p>
<h2 id="chii"><a href="#chii" class="headerlink" title="chii"></a>chii</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpcmlsaXJpL2NoaWk=">https://github.com/liriliri/chii</span></p>
<h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><p>AnyProxy<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvYW55cHJveHk=">https://github.com/alibaba/anyproxy</span><br>Zan Proxy<br><span class="exturl" data-url="aHR0cHM6Ly95b3V6YW4uZ2l0aHViLmlvL3phbi1wcm94eS8=">https://youzan.github.io/zan-proxy/</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2047.html</url>
    <content><![CDATA[<p><a href="/2046.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%8B%E7%BB%8D">vue的生命周期</a><br><a href="/2046.html#%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF">组件通讯、组件渲染更新过程</a><br><a href="/2046.html#%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A">vue怎么实现双向数据绑定，v-model原理</a><br><a href="/2046.html#key%E5%B1%9E%E6%80%A7%E4%BD%9C%E7%94%A8">key属性作用</a><br><a href="/2046.html#nextTick">nextTick实现原理是什么？为什么在nextTick中可以获取到最新的dom</a><br><a href="/2046.html#vdom">vdom</a><br><a href="">diff</a><br><a href="/2046.html#native%E4%BF%AE%E9%A5%B0%E7%AC%A6">native修饰符</a><br><a href="/2046.html#$set%E5%8E%9F%E7%90%86">$set原理</a><br><a href="/2046.html#scoped%E5%8E%9F%E7%90%86">scoped原理</a><br><a href="/2046.html#vue%E4%B8%ADref">vue中ref</a><br><a href="/2046.html#Vue%E4%B8%AD.sync%E5%92%8Cv-model%E7%9A%84%E5%8C%BA%E5%88%AB">Vue中.sync和v-model的区别</a></p>
<p>模板编译<br>模板渲染过程<br>路由</p>
<h2 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h2><p>主要是利用 vue-router 提供的钩子函数 beforeEach() 对路由进行判断 - 导航守卫 - 全局前置守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>to: Route: 即将要进入的目标</p>
</li>
<li><p>from: Route: 当前导航正要离开的路由</p>
</li>
<li><p>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</p>
</li>
<li><p>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。</p>
</li>
<li><p>next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。</p>
</li>
<li><p>next(‘&#x2F;’) 或者 next({ path: ‘&#x2F;’ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</p>
</li>
</ul>
<h2 id="vue-路由传参"><a href="#vue-路由传参" class="headerlink" title="vue 路由传参"></a>vue 路由传参</h2><p><code>_vue/vue?id=路由参数</code></p>
<ul>
<li>vue 路由传参方式，说明区别和应用场景</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poL2d1aWRlL2Vzc2VudGlhbHMvbmF2aWdhdGlvbi5odG1sIyVFNyVCQyU5NiVFNyVBOCU4QiVFNSVCQyU4RiVFNyU5QSU4NCVFNSVBRiVCQyVFOCU4OCVBQQ==">编程式导航</span></p>
<p>params 和 queery</p>
<p>params 要用 name 来引入，query 要用 path 来引入</p>
<p>query 类似于 ajax 中 get 传参，params 类似于 post</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userId = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/user&#x27;</span>) <span class="comment">// -&gt; /user</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象, path为路由的path属性值</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span> &#125;) <span class="comment">// -&gt; /user</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;userId&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，name为路由的name属性值</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line"><span class="comment">// 如果提供了 path，params 会被忽略</span></span><br><span class="line"><span class="comment">// 这里的 params 不生效</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125;&#125;) <span class="comment">// -&gt; /register?plan=private</span></span><br><span class="line"></span><br><span class="line"><span class="attr">routes</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id?&#x27;</span>, name=<span class="string">&#x27;user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;]</span><br></pre></td></tr></table></figure>

<h2 id="首屏加载优化和算法"><a href="#首屏加载优化和算法" class="headerlink" title="首屏加载优化和算法"></a>首屏加载优化和算法</h2><h2 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h2><p>解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理</p>
<h2 id="Computed和Watch"><a href="#Computed和Watch" class="headerlink" title="Computed和Watch"></a>Computed和Watch</h2><p>Computed 有缓存: 基于它们的响应式依赖进行缓存，只有跟计算属性相关的数据发生了改变，计算属性才会重新计算<br>Watch没有缓存性 deep: true 深度监听，这样便会对对象中的每一项进行监听。优化的话可以使用字符串形式监听</p>
<h2 id="vue3-新特性"><a href="#vue3-新特性" class="headerlink" title="vue3 新特性"></a>vue3 新特性</h2><p>基于 Proxy 的观察者机制<br>重写虚拟 Dom<br>更好的支持 ts<br>新工具 vite</p>
<h2 id="做过哪些-webpack-配置"><a href="#做过哪些-webpack-配置" class="headerlink" title="做过哪些 webpack 配置"></a>做过哪些 webpack 配置</h2><p>配置 proxy 跨域<br>配置 externals<br>配置别名<br>添加打包分析插件 BundleAnalyzerPlugin</p>
<p>chainWebpack</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">IS_PROD</span> = [<span class="string">&#x27;production&#x27;</span>, <span class="string">&#x27;prod&#x27;</span>].<span class="title function_">includes</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cdn</span></span><br><span class="line"><span class="keyword">const</span> cdn = &#123;</span><br><span class="line">  <span class="attr">css</span>: [],</span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vue/2.5.17/vue.runtime.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcss.com/axios/0.18.0/axios.min.js&#x27;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 添加别名</span></span><br><span class="line">    config.<span class="property">resolve</span>.<span class="property">alias</span></span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&#x27;@&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除 prefetch 插件</span></span><br><span class="line">    config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;prefetch&#x27;</span>)</span><br><span class="line">    <span class="comment">// 移除 preload 插件</span></span><br><span class="line">    config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;preload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产环境配置</span></span><br><span class="line">    <span class="keyword">if</span> (isProduction) &#123;</span><br><span class="line">      <span class="comment">// 生产环境注入cdn ， 还需要修改index.html</span></span><br><span class="line">      config.<span class="title function_">plugin</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">          args[<span class="number">0</span>].<span class="property">cdn</span> = cdn</span><br><span class="line">          <span class="keyword">return</span> args</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 配置 externals</span></span><br><span class="line">    <span class="comment">// 键：表示 导入包语法 from 后面跟着的名称</span></span><br><span class="line">    <span class="comment">// 值：表示 script 引入JS文件时，在全局环境中的变量名称</span></span><br><span class="line">    config.<span class="property">externals</span> = &#123;</span><br><span class="line">      <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;element-ui&#x27;</span>: <span class="string">&#x27;ELEMENT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vuex&#x27;</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// UglifyJsPlugin</span></span><br><span class="line">    <span class="comment">// 去掉 console.log  drop_console: true,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启gzip压缩</span></span><br><span class="line">    <span class="comment">// compression-webpack-plugin</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="comment">// css预设器配置项</span></span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// pass options to sass-loader</span></span><br><span class="line">      <span class="attr">sass</span>: &#123;</span><br><span class="line">        <span class="comment">// 引入全局变量样式,@使我们设置的别名,执行src目录</span></span><br><span class="line">        <span class="attr">data</span>: <span class="string">` @import &quot;@/stylePath/theme.scss&quot;; `</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://yd.msword.top&#x27;</span>, <span class="comment">// 代理的目标服务器地址   用‘/api&#x27;代替target里面的地址</span></span><br><span class="line">        <span class="comment">// https请求需要该设置</span></span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">// 代理websockets</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否跨域，虚拟的站点需要更管origin</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.html 修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp; htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br><span class="line">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp; htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<h2 id="vue-自定义指令"><a href="#vue-自定义指令" class="headerlink" title="vue 自定义指令"></a>vue 自定义指令</h2><p>全局</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 只调用一次，指令第一次绑定到元素时调用，在这里可以进行一次初始化设置；</span></span><br><span class="line">  bind (el, binding) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(binding)</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">background</span> = binding.<span class="property">value</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 被绑定元素插入父节点时调用；</span></span><br><span class="line">  inserted () &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在 bind 之后立即以初始值为参数第一次调用，之后每当绑定值变化时调用，参数为新值与旧值；</span></span><br><span class="line">  update () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件内</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line">  <span class="attr">test</span>:&#123;</span><br><span class="line">    inserted (el, binding) &#123;<span class="comment">// 指令的定义</span></span><br><span class="line">      <span class="comment">// el为绑定元素，可以对其进行dom操作</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(binding) <span class="comment">//一个对象，包含很多属性属性</span></span><br><span class="line">    &#125;,</span><br><span class="line">    bind (el, binding, vnode) &#123;</span><br><span class="line">      el.<span class="property">innerHTML</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="vuex-的五个状态"><a href="#vuex-的五个状态" class="headerlink" title="vuex 的五个状态"></a>vuex 的五个状态</h2><p><code>state</code></p>
<p><code>mutations</code>：提供修改数据的方法</p>
<p><code>getters</code>：可以认为是 store 的计算属性</p>
<p><code>actions</code>：Action 提交的是 mutation，可以包含异步</p>
<p><code>modules</code>：将 store 分割成模块</p>
<h2 id="vuex-异步"><a href="#vuex-异步" class="headerlink" title="vuex 异步"></a>vuex 异步</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  addTodo (state, playload) &#123;</span><br><span class="line">    <span class="comment">// 操作state</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 异步任务</span></span><br><span class="line">  <span class="comment">// context : 相当于 store</span></span><br><span class="line">  <span class="comment">// playload : 就是传过来的参数</span></span><br><span class="line">  addTodoAsync (context, playload) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;addTodo&#x27;</span>, playload)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 添加任务</span></span><br><span class="line">  addTodo () &#123;</span><br><span class="line">    <span class="comment">// 异步 : 分发 dispatch  =&gt; actions</span></span><br><span class="line">    <span class="comment">// dispatch =&gt; 找 actions</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addTodoAsync&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">todoName</span>: <span class="variable language_">this</span>.<span class="property">todoName</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Hash-和-History-路由的区别和优缺点？"><a href="#Hash-和-History-路由的区别和优缺点？" class="headerlink" title="Hash 和 History 路由的区别和优缺点？"></a>Hash 和 History 路由的区别和优缺点？</h2><ul>
<li>hash 路由模式的实现主要是基于下面几个特性：</li>
</ul>
<p>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送（hash 值改变，浏览器不会重新发起请求）<br>hash 值改变，会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换<br>可以通过 a 标签，或对 loaction.hash 进行赋值，来改变 URL 的 hash 值<br>可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）</p>
<ul>
<li>history 路由模式的实现主要基于存在下面几个特性：</li>
</ul>
<p>pushState 和 repalceState 两个 API 来操作实现 URL 的变化，且不会重新发起请求<br>使用 popstate  事件来监听 url 的变化，从而对页面进行跳转（渲染）<br>history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</p>
<ul>
<li>hash模式优缺点</li>
</ul>
<p>优点</p>
<p>只需要前端配置路由表, 不需要后端的参与<br>兼容性好, 浏览器都能支持<br>hash值改变不会向后端发送请求, 完全属于前端路由</p>
<p>缺点<br>hash值前面需要加<code>#</code>, 不符合url规范, 也不美观</p>
<ul>
<li>history 模式的优缺点：</li>
</ul>
<p>优点：<br>符合url地址规范, 不需要<code>#</code>, 使用起来比较美观</p>
<p>缺点：<br>需要服务端配合重定向，否则一刷新页面就404了<br>兼容性比较差, 利用了 HTML5 History对象中新增的 pushState() 和 replaceState() 方法, 需要浏览器的支持</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy1jdXN0b20tZXZlbnRzLmh0bWwjJUU1JUIwJTg2JUU1JThFJTlGJUU3JTk0JTlGJUU0JUJBJThCJUU0JUJCJUI2JUU3JUJCJTkxJUU1JUFFJTlBJUU1JTg4JUIwJUU3JUJCJTg0JUU0JUJCJUI2">https://cn.vuejs.org/v2/guide/components-custom-events.html#将原生事件绑定到组件</span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>手写题</title>
    <url>/2041.html</url>
    <content><![CDATA[<p><a href="/2045.html">数组去重</a></p>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><details>
<summary>详情</summary>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数组中的数从小到大排列</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">// var numi = 0</span></span><br><span class="line"><span class="comment">// var numj = 0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="comment">// numj += 1</span></span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">    <span class="comment">// document.write(&#x27;(&#x27; + arr[i] + &#x27;,&#x27; + arr[i + 1] + &#x27;)&#x27;)</span></span><br><span class="line">    <span class="comment">// numi += 1</span></span><br><span class="line">    <span class="comment">// 两两比较，如果前面的大于后面的，交换位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">var</span> temp</span><br><span class="line">      temp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = temp</span><br><span class="line">      <span class="comment">// document.write(&#x27;交换了&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// document.write(&#x27;，arr=（&#x27; + arr + &#x27;）&#x27;)</span></span><br><span class="line">  <span class="comment">// document.write(&#x27;&lt;br&gt;&#x27;)</span></span><br><span class="line">  <span class="comment">// 如果一趟下来，一次交换都没有做，说明就已经排好序，就不需要继续比</span></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>


<h4 id="实现-call-apply-bind-方法"><a href="#实现-call-apply-bind-方法" class="headerlink" title="实现 call apply bind 方法"></a>实现 call apply bind 方法</h4><details>
<summary>详情</summary>

<blockquote>
<p>call 和 apply 区别</p>
</blockquote>
<p><strong>call：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>, [<span class="number">1</span>]) <span class="comment">// 获取额外参数</span></span><br><span class="line">  <span class="comment">// var args = [...arguments].slice(1)</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">var</span> res = context.<span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>context 为要绑定的 this，不传默认为 window<br>给 context 创建一个 fn 属性，并将值设置为需要调用的函数<br>调用 context.fn，并将额外参数 args 传递进去<br>删除 context 上的 fn 函数</p>
<p><strong>apply：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">let</span> res</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    res = context.<span class="title function_">fn</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">arguments</span>[<span class="number">1</span>].<span class="property">constructor</span>.<span class="property">name</span> === <span class="string">&#x27;Array&#x27;</span>) &#123;</span><br><span class="line">    res = context.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Uncaught TypeError: CreateListFromArrayLike called on non-object&#x27;</span>)</span><br><span class="line">    <span class="comment">// throw &#x27;Uncaught TypeError: CreateListFromArrayLike called on non-object&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>bind：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="variable language_">this</span> <span class="comment">// 保存原函数</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>) <span class="comment">// 参数转为数组</span></span><br><span class="line">  <span class="comment">// var args = [...arguments].slice(1) // 参数转为数组</span></span><br><span class="line">  <span class="keyword">var</span> context = args.<span class="title function_">shift</span>() <span class="comment">// 保存需要绑定的this上下文</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 返回一个新函数</span></span><br><span class="line">    self.<span class="title function_">apply</span>(context, args.<span class="title function_">concat</span>([].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aaa</span>(<span class="params">val, val1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">aaa</span>()</span><br><span class="line">aaa.<span class="title function_">myCall</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span> &#125;, <span class="string">&#x27;121&#x27;</span>, <span class="number">122</span>)</span><br><span class="line">aaa.<span class="title function_">myApply</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span> &#125;, [<span class="string">&#x27;121&#x27;</span>, <span class="number">122</span>])</span><br><span class="line">aaa.<span class="title function_">myBind</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span> &#125;)(<span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;222&#x27;</span>)</span><br></pre></td></tr></table></figure>
</details>


<h4 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a><a href="/398.html">防抖和节流</a></h4><h4 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a><a href="/2043.html">深浅拷贝</a></h4><h4 id="手写-Promise"><a href="#手写-Promise" class="headerlink" title="手写 Promise"></a>手写 Promise</h4><h4 id="手写-Promise-all"><a href="#手写-Promise-all" class="headerlink" title="手写 Promise.all"></a>手写 Promise.all</h4><h4 id="手写-Promise-race"><a href="#手写-Promise-race" class="headerlink" title="手写 Promise.race"></a>手写 Promise.race</h4><h4 id="异步调度"><a href="#异步调度" class="headerlink" title="异步调度"></a>异步调度</h4><h4 id="实现继承的方式"><a href="#实现继承的方式" class="headerlink" title="实现继承的方式"></a>实现继承的方式</h4><p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaHVtaW4vcC80NTU2ODIwLmh0bWw=">https://www.cnblogs.com/humin/p/4556820.html</span></p>
<p>原型链继承，将父类的实例作为子类的原型，无法实现多继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;cat&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>构造继承，使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组合继承，通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Cat</span>;</span><br></pre></td></tr></table></figure>

<p>调用了两次父类构造函数，生成了两份实例</p>
<p>寄生组合继承<br>通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法&#x2F;属性，避免的组合继承的缺点</p>
<p>es6 中的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Super</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Super</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sub = <span class="keyword">new</span> <span class="title class_">Sub</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Sub</span>.<span class="property">__proto__</span> === <span class="title class_">Super</span></span><br></pre></td></tr></table></figure>

<p>子类可以直接通过 <code>__proto__</code> 寻址到父类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Super</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Sub</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Super</span>()</span><br><span class="line"><span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> <span class="title class_">Sub</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Sub</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>
<p>而通过 ES5 的方式，<code>Sub.__proto__ === Function.prototype</code></p>
<p>es5继承 与 es6 继承的区别参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FkdmFuY2VkLUZyb250ZW5kL0RhaWx5LUludGVydmlldy1RdWVzdGlvbi9pc3N1ZXMvMjA=">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/20</span></p>
<h4 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h4><h4 id="扁平数据转tree"><a href="#扁平数据转tree" class="headerlink" title="扁平数据转tree"></a>扁平数据转tree</h4><h4 id="实现-instanceof"><a href="#实现-instanceof" class="headerlink" title="实现 instanceof"></a>实现 instanceof</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a instanceof b  b.prototype 是否在 a 的原型链中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;object&#x27;</span> || a === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// getProtypeOf是Object对象自带的一个方法，能够拿到参数的原型对象</span></span><br><span class="line">  <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(a)</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 查找到尽头，还没找到</span></span><br><span class="line">    <span class="keyword">if</span> (proto == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 找到相同的原型对象</span></span><br><span class="line">    <span class="keyword">if</span> (proto == b.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(proto)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="/2044.html">实现一个 new 操作符</a></p>
<h4 id="实现-JSON-stringify"><a href="#实现-JSON-stringify" class="headerlink" title="实现 JSON.stringify"></a>实现 JSON.stringify</h4><p><a href="/382.html#%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%9A3-4-4-%E5%88%86%E5%89%B2">手机号 3-4-4 分割</a><br><a href="/382.html#%E5%8D%83%E5%88%86%E4%BD%8D%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E5%AD%97">千分位格式化数字</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>总结 —— 获取一个对象的类型(类型识别)</title>
    <url>/2040.html</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="comment">// 只能查看基本数据类型的类型</span></span><br><span class="line"><span class="keyword">instanceof</span> <span class="comment">// 判断对象的具体类型</span></span><br><span class="line">constructor.<span class="property">name</span> <span class="comment">// 获取对象的具体类型 适用于任何类型的检测</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;str&#x27;</span>) <span class="comment">// &#x27;[object String]&#x27; 适用于任何类型的检测</span></span><br></pre></td></tr></table></figure>

<p><strong>typeof</strong></p>
<p>用于查看基本数据的数据类型， number string boolean undefined</p>
<p>null 比较特殊，结果是 object</p>
<p>如果查看复杂数据类型，返回的都是 object 类型</p>
<p>函数的结果是 function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typeof 判断</span></span><br><span class="line"><span class="comment">// 简单类型</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">12</span> <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;abc&#x27;</span> <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &#x27;underfined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂类型 (引用类型)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>instanceof 判断</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">object <span class="keyword">instanceof</span> constructor</span><br></pre></td></tr></table></figure>

<p>用来检测 <code>constructor.prototype</code> 是否存在于参数 <code>object</code> 的原型链中</p>
<p>不能用于类型识别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// instanceof 判断</span></span><br><span class="line"><span class="keyword">var</span> simpleStr = <span class="string">&#x27;This is a simple string&#x27;</span></span><br><span class="line"><span class="keyword">var</span> myString = <span class="keyword">new</span> <span class="title class_">String</span>()</span><br><span class="line"><span class="keyword">var</span> newStr = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;String created with constructor&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> myObj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> myNonObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">var</span> myArr = []</span><br><span class="line"><span class="keyword">var</span> myFn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">simpleStr <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// 返回 false, 检查原型链会找到 undefined</span></span><br><span class="line">myString <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// 返回 true</span></span><br><span class="line">newStr <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// 返回 true</span></span><br><span class="line">myString <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// 返回 true</span></span><br><span class="line"></span><br><span class="line">myObj <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// 返回 true, 尽管原型没有定义</span></span><br><span class="line">;(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// 返回 true, 同上</span></span><br><span class="line">myNonObj <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// 返回 false, 一种创建对象的方法，这种方法创建的对象不</span></span><br><span class="line"></span><br><span class="line">myArr <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// true</span></span><br><span class="line">myArr <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line">myFn <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line">myFn <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>constructor.name</strong></p>
<p>Undefined&#x2F;Null 没有 constructor 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr = []</span><br><span class="line"><span class="keyword">var</span> myFn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> myObj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型的构造函数</span></span><br><span class="line">myArr.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Array</span></span><br><span class="line">myFn.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Object</span></span><br><span class="line">myObj.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Function</span></span><br><span class="line">myDate.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Date</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">tea.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Teacher</span></span><br></pre></td></tr></table></figure>

<p><strong>Object.prototype.toString</strong></p>
<p>适用于任何类型的检测，不能识别自定义对象类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;str&#x27;</span>).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) <span class="comment">// String</span></span><br><span class="line"><span class="comment">// 正则 =&gt; RegExp</span></span><br><span class="line"><span class="comment">// 时间对象 =&gt; Date</span></span><br><span class="line"><span class="comment">// 字符串 =&gt; String</span></span><br><span class="line"><span class="comment">// 对象 =&gt; Object</span></span><br><span class="line"><span class="comment">// 数组 =&gt; Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(tea) <span class="comment">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>总结 —— parseInt 和 parseFloat</title>
    <url>/2030.html</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote>
<p><code>parseInt()</code> 函数解析一个字符串参数，指定该字符串为指定基数的进制值，并返回一个 10 进制的整数，如果被解析参数的第一个字符无法被转化成数值类型，则返回 <code>NaN</code></p>
</blockquote>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvcGFyc2VJbnQ=">parseInt</span></p>
<p><code>parseInt(string, radix)</code></p>
<p>string 要被解析的值，如果参数不是一个字符串，则将其转换为字符串</p>
<p>radix 基数，表示进制，介于 2 和 36 之间的整数，参数 radix 的值为undefined、0 或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。如果输入的 string 以 “0x”或 “0x”（一个0，后面是小写或大写的X）开头，那么radix被假定为16，字符串的其余部分被解析为十六进制数。如果输入的 string以 “0”（0）开头， radix被假定为10（十进制）。如果输入的 string 以任何其他值开头， radix 是 10 (十进制)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123&#x27;</span>, <span class="number">5</span>) <span class="comment">// 将 &#x27;123&#x27; 看作 5 进制数，返回十进制数 38</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;4215213&#x27;</span>, <span class="number">5</span>)   <span class="comment">// 4 * 5^2 + 2 * 5^1 + 1 * 5^0 = 111 返回 111</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;0x123&#x27;</span>) <span class="comment">// 291</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="built_in">parseInt</span>) <span class="comment">// [1, NaN, NaN]</span></span><br><span class="line"><span class="comment">// [1, 2, 3].map(parseInt(item, index))</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>parseFloat()</code> 函数解析一个字符串参数并返回一个浮点数，如果给定值不能被转换成数值，则会返回 NaN</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>) <span class="comment">// 3.14</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;0x123&#x27;</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// [1, 2, 3].map(parseFloat) // [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">0.0000005</span>) === <span class="number">5</span></span><br><span class="line"><span class="comment">// 如果 parseInt 第一个参数不是字符串，会将其转换成字符串</span></span><br><span class="line"><span class="comment">// 小于 10-6 的浮点数以指数表示</span></span><br><span class="line"><span class="comment">// parseint 从 float 的指数法中提取整数</span></span><br><span class="line"><span class="title class_">String</span>(<span class="number">0.0000005</span>) <span class="comment">// =&gt; &#x27;5e-7&#x27;</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">5e-7</span>) <span class="comment">// =&gt; 5</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;5e-7&#x27;</span>) <span class="comment">// =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">1111111111111111111111</span>) <span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">999999999999999999999</span>) <span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>((<span class="number">5e-7</span>).<span class="title function_">toFixed</span>()) <span class="comment">// =&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="number">9999999999999999</span>) <span class="comment">// 10000000000000000</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/cl7hv3hw900k49loya7ae12es.html</url>
    <content><![CDATA[<h2 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. - 除换行符以外的所有字符。</span><br><span class="line">^ - 字符串开头。</span><br><span class="line">$ - 字符串结尾。</span><br><span class="line">\d,\w,\s - 匹配数字、字符、空格。</span><br><span class="line">\D,\W,\S - 匹配非数字、非字符、非空格。</span><br><span class="line">[abc] - 匹配 a、b 或 c 中的一个字母。</span><br><span class="line">[a-z] - 匹配 a 到 z 中的一个字母。</span><br><span class="line">[^abc] - 匹配除了 a、b 或 c 中的其他字母。</span><br><span class="line">aa|bb - 匹配 aa 或 bb。</span><br><span class="line">? - 0 次或 1 次匹配。</span><br><span class="line">* - 匹配 0 次或多次。</span><br><span class="line">+ - 匹配 1 次或多次。</span><br><span class="line">&#123;n&#125; - 匹配 n次。</span><br><span class="line">&#123;n,&#125; - 匹配 n次以上。</span><br><span class="line">&#123;m,n&#125; - 最少 m 次，最多 n 次匹配。</span><br><span class="line">(expr) - 捕获 expr 子模式,以 \1 使用它。</span><br><span class="line">(?:expr) - 忽略捕获的子模式。</span><br><span class="line">(?=expr) - 正向预查模式 expr。</span><br><span class="line">(?!expr) - 负向预查模式 expr。</span><br></pre></td></tr></table></figure>

<p>任意正负数字  <code>^(\-|\+)?\d+(\.\d+)?$</code><br>邮箱 <code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code><br>最多保留2位小数的非负数字<br>匹配中文 <code>^[\u4e00-\u9fa5]*$</code></p>
<h4 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h4><p>校验数字的表达式</p>
<ul>
<li>n 位的数字：<code>^\d&#123;n&#125;$</code></li>
<li>至少 n 位的数字：<code>^\d&#123;n,&#125;$</code></li>
<li>m-n 位的数字：<code>^\d&#123;m,n&#125;$</code></li>
<li>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></li>
<li>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</code></li>
<li>带 1-2 位小数的正数或负数：<code>^(\-)?\d+(\.\d&#123;1,2&#125;)$</code></li>
<li>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></li>
<li>有两位小数的正实数：<code>^[0-9]+(\.[0-9]&#123;2&#125;)?$</code></li>
<li>非零的正整数：<code>^[1-9]\d*$</code></li>
<li>非零的负整数：<code>^-[1-9]\d*$</code></li>
<li>非负整数：<code>^\d+$</code></li>
<li>非正整数：<code>^-[1-9]\d*|0$</code></li>
</ul>
<p>校验字符的表达式</p>
<ul>
<li>汉字：<code>^[\u4e00-\u9fa5]&#123;0,&#125;$</code></li>
<li>英文和数字：<code>^[A-Za-z0-9]+$</code></li>
<li>长度为 3-20 的所有字符：<code>^\.&#123;3,20&#125;$</code></li>
<li>由 26 个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li>
<li>由 26 个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li>
<li>由 26 个小写英文字母组成的字符串：<code>^[a-z]+$</code></li>
<li>由数字和 26 个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li>
<li>由数字、26 个英文字母或者下划线组成的字符串：<code>^\w+$</code></li>
<li>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></li>
<li>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code></li>
</ul>
<p>钱的输入格式：<br>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]<em>$<br>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]</em>)$<br>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]<em>)$<br>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$<br>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$<br>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$<br>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})</em>(.[0-9]{1,2})?$<br>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})<em>)(.[0-9]{1,2})?$<br>备注：这就是最终结果了,别忘了”+”可以用”</em>“替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p>
]]></content>
  </entry>
</search>
